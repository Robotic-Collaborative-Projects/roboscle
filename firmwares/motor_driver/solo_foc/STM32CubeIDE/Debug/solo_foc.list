
solo_foc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c00  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08009dd8  08009dd8  00019dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a23c  0800a23c  00020440  2**0
                  CONTENTS
  4 .ARM          00000008  0800a23c  0800a23c  0001a23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a244  0800a244  00020440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a244  0800a244  0001a244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a248  0800a248  0001a248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000440  20000000  0800a24c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ba8  20000440  0800a68c  00020440  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fe8  0800a68c  00021fe8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY
 12 .debug_line   0004b965  00000000  00000000  00020470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0004e028  00000000  00000000  0006bdd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000091fa  00000000  00000000  000b9dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002010  00000000  00000000  000c2ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010d799  00000000  00000000  000c5008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00006470  00000000  00000000  001d27a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    000306ea  00000000  00000000  001d8c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002e981  00000000  00000000  00209302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00237c83  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d70  00000000  00000000  00237cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000440 	.word	0x20000440
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009dc0 	.word	0x08009dc0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000444 	.word	0x20000444
 8000214:	08009dc0 	.word	0x08009dc0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800051c:	480d      	ldr	r0, [pc, #52]	; (8000554 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800051e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000520:	480d      	ldr	r0, [pc, #52]	; (8000558 <LoopForever+0x6>)
  ldr r1, =_edata
 8000522:	490e      	ldr	r1, [pc, #56]	; (800055c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000524:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <LoopForever+0xe>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000538:	4c0b      	ldr	r4, [pc, #44]	; (8000568 <LoopForever+0x16>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000546:	f003 ff0b 	bl	8004360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800054a:	f009 fbff 	bl	8009d4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800054e:	f000 fc7f 	bl	8000e50 <main>

08000552 <LoopForever>:

LoopForever:
    b LoopForever
 8000552:	e7fe      	b.n	8000552 <LoopForever>
  ldr   r0, =_estack
 8000554:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800055c:	20000440 	.word	0x20000440
  ldr r2, =_sidata
 8000560:	0800a24c 	.word	0x0800a24c
  ldr r2, =_sbss
 8000564:	20000440 	.word	0x20000440
  ldr r4, =_ebss
 8000568:	20001fe8 	.word	0x20001fe8

0800056c <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800056c:	e7fe      	b.n	800056c <BusFault_Handler>
	...

08000570 <ASPEP_start>:

  return (crc == 0U);
}

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 8000574:	6940      	ldr	r0, [r0, #20]
 8000576:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000578:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 800057a:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800057c:	6d65      	ldr	r5, [r4, #84]	; 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 800057e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000582:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000586:	6960      	ldr	r0, [r4, #20]
 8000588:	f104 011c 	add.w	r1, r4, #28
 800058c:	462b      	mov	r3, r5
 800058e:	2204      	movs	r2, #4
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000590:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000594:	4718      	bx	r3
 8000596:	bf00      	nop

08000598 <ASPEP_sendBeacon>:

void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000598:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
               | (((uint32_t)capabilities->version) << 4U)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 800059a:	780b      	ldrb	r3, [r1, #0]
               | (((uint32_t)capabilities->version) << 4U)
 800059c:	790a      	ldrb	r2, [r1, #4]
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
               | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800059e:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80005a2:	4c1e      	ldr	r4, [pc, #120]	; (800061c <ASPEP_sendBeacon+0x84>)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 80005a4:	01db      	lsls	r3, r3, #7
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80005a6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
 80005aa:	784a      	ldrb	r2, [r1, #1]
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80005ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80005b0:	78ca      	ldrb	r2, [r1, #3]
 80005b2:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
 80005b6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 80005c0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80005c4:	5ca2      	ldrb	r2, [r4, r2]
 80005c6:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80005ca:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80005cc:	5ca2      	ldrb	r2, [r4, r2]
 80005ce:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 80005d2:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80005d4:	5ca2      	ldrb	r2, [r4, r2]
 80005d6:	4c12      	ldr	r4, [pc, #72]	; (8000620 <ASPEP_sendBeacon+0x88>)
 80005d8:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 80005dc:	5ca2      	ldrb	r2, [r4, r2]
 80005de:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80005e2:	f043 0305 	orr.w	r3, r3, #5
 80005e6:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e8:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80005ea:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80005ec:	b14b      	cbz	r3, 8000602 <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 80005ee:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 80005f0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80005f4:	b913      	cbnz	r3, 80005fc <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80005f6:	2302      	movs	r3, #2
 80005f8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 80005fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000600:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000602:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000606:	2303      	movs	r3, #3
 8000608:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800060c:	6481      	str	r1, [r0, #72]	; 0x48
 800060e:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000610:	2204      	movs	r2, #4
 8000612:	6d83      	ldr	r3, [r0, #88]	; 0x58
}
 8000614:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000618:	6940      	ldr	r0, [r0, #20]
 800061a:	4718      	bx	r3
 800061c:	08009de8 	.word	0x08009de8
 8000620:	08009dd8 	.word	0x08009dd8

08000624 <ASPEP_sendPing>:
{
 8000624:	b530      	push	{r4, r5, lr}
              | (uint32_t)((uint32_t)cBit << 5U)
 8000626:	ea4f 1c41 	mov.w	ip, r1, lsl #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 800062a:	f890 e060 	ldrb.w	lr, [r0, #96]	; 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 800062e:	f890 4063 	ldrb.w	r4, [r0, #99]	; 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000632:	4d1e      	ldr	r5, [pc, #120]	; (80006ac <ASPEP_sendPing+0x88>)
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000634:	ea4c 1c01 	orr.w	ip, ip, r1, lsl #4
              | (uint32_t)((uint32_t)Nbit << 6U)
 8000638:	f00e 0e01 	and.w	lr, lr, #1
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800063c:	ea4c 3c02 	orr.w	ip, ip, r2, lsl #12
 8000640:	ea4c 138e 	orr.w	r3, ip, lr, lsl #6
 8000644:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
              | (uint32_t)((uint32_t)ipID << 8U)
 8000648:	f004 040f 	and.w	r4, r4, #15
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800064c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4c17      	ldr	r4, [pc, #92]	; (80006b0 <ASPEP_sendPing+0x8c>)
 8000654:	f042 0206 	orr.w	r2, r2, #6
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000658:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800065c:	5ca2      	ldrb	r2, [r4, r2]
 800065e:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8000662:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000664:	5ca2      	ldrb	r2, [r4, r2]
 8000666:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 800066a:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800066c:	5ca2      	ldrb	r2, [r4, r2]
 800066e:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000672:	5ceb      	ldrb	r3, [r5, r3]
 8000674:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000678:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800067a:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800067c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800067e:	b13b      	cbz	r3, 8000690 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000680:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000682:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000686:	b913      	cbnz	r3, 800068e <ASPEP_sendPing+0x6a>
          pHandle->ctrlBuffer.state = pending;
 8000688:	2302      	movs	r3, #2
 800068a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 800068e:	bd30      	pop	{r4, r5, pc}
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000690:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000694:	2303      	movs	r3, #3
 8000696:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800069a:	6481      	str	r1, [r0, #72]	; 0x48
 800069c:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 800069e:	2204      	movs	r2, #4
 80006a0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80006a2:	6940      	ldr	r0, [r0, #20]
}
 80006a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80006a8:	4718      	bx	r3
 80006aa:	bf00      	nop
 80006ac:	08009dd8 	.word	0x08009dd8
 80006b0:	08009de8 	.word	0x08009de8

080006b4 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 80006b4:	2a0a      	cmp	r2, #10
{
 80006b6:	b410      	push	{r4}
 80006b8:	4603      	mov	r3, r0
    if (MCTL_SYNC == syncAsync)
 80006ba:	d00b      	beq.n	80006d4 <ASPEP_getBuffer+0x20>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 80006bc:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 80006c0:	2a01      	cmp	r2, #1
 80006c2:	d921      	bls.n	8000708 <ASPEP_getBuffer+0x54>
 80006c4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80006c8:	2a01      	cmp	r2, #1
 80006ca:	d911      	bls.n	80006f0 <ASPEP_getBuffer+0x3c>
        result = false;
 80006cc:	2000      	movs	r0, #0
}
 80006ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006d2:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 80006d4:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 80006d8:	2a01      	cmp	r2, #1
 80006da:	d8f7      	bhi.n	80006cc <ASPEP_getBuffer+0x18>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006dc:	6a82      	ldr	r2, [r0, #40]	; 0x28
        pHandle->syncBuffer.state = writeLock;
 80006de:	2401      	movs	r4, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006e0:	3204      	adds	r2, #4
 80006e2:	600a      	str	r2, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 80006e4:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
  bool result = true;
 80006e8:	4620      	mov	r0, r4
}
 80006ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006ee:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006f0:	6b82      	ldr	r2, [r0, #56]	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 80006f2:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006f4:	f103 0438 	add.w	r4, r3, #56	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 80006f8:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006fc:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006fe:	641c      	str	r4, [r3, #64]	; 0x40
}
 8000700:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000704:	600a      	str	r2, [r1, #0]
}
 8000706:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000708:	6b02      	ldr	r2, [r0, #48]	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 800070a:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 800070c:	f103 0430 	add.w	r4, r3, #48	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 8000710:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000714:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000716:	641c      	str	r4, [r3, #64]	; 0x40
}
 8000718:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 800071c:	600a      	str	r2, [r1, #0]
}
 800071e:	4770      	bx	lr

08000720 <ASPEP_sendPacket>:
{
 8000720:	b570      	push	{r4, r5, r6, lr}
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000722:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
 8000726:	2c02      	cmp	r4, #2
 8000728:	d002      	beq.n	8000730 <ASPEP_sendPacket+0x10>
      result = ASPEP_NOT_CONNECTED;
 800072a:	2102      	movs	r1, #2
}
 800072c:	4608      	mov	r0, r1
 800072e:	bd70      	pop	{r4, r5, r6, pc}
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8000730:	ea43 1402 	orr.w	r4, r3, r2, lsl #4
      *header = tmpHeader;
 8000734:	f841 4c04 	str.w	r4, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8000738:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
 800073c:	2c01      	cmp	r4, #1
 800073e:	d104      	bne.n	800074a <ASPEP_sendPacket+0x2a>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000740:	f64f 64ca 	movw	r4, #65226	; 0xfeca
 8000744:	528c      	strh	r4, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000746:	3202      	adds	r2, #2
 8000748:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 800074a:	2b0a      	cmp	r3, #10
 800074c:	d103      	bne.n	8000756 <ASPEP_sendPacket+0x36>
        if (pSupHandle->MCP_PacketAvailable)
 800074e:	7c04      	ldrb	r4, [r0, #16]
 8000750:	b394      	cbz	r4, 80007b8 <ASPEP_sendPacket+0x98>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from master is processed*/
 8000752:	2400      	movs	r4, #0
 8000754:	7404      	strb	r4, [r0, #16]
  uint32_t header = *headerPtr;
 8000756:	f851 4c04 	ldr.w	r4, [r1, #-4]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800075a:	4d35      	ldr	r5, [pc, #212]	; (8000830 <ASPEP_sendPacket+0x110>)
 800075c:	b2e6      	uxtb	r6, r4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800075e:	f3c4 2e07 	ubfx	lr, r4, #8, #8
 8000762:	5dae      	ldrb	r6, [r5, r6]
 8000764:	ea8e 0e06 	eor.w	lr, lr, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000768:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800076a:	f815 600e 	ldrb.w	r6, [r5, lr]
 800076e:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8000772:	ea8e 0e06 	eor.w	lr, lr, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000776:	f1a1 0c04 	sub.w	ip, r1, #4
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800077a:	f815 e00e 	ldrb.w	lr, [r5, lr]
 800077e:	f3c4 6503 	ubfx	r5, r4, #24, #4
 8000782:	ea8e 0e05 	eor.w	lr, lr, r5
 8000786:	4d2b      	ldr	r5, [pc, #172]	; (8000834 <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 8000788:	f815 500e 	ldrb.w	r5, [r5, lr]
 800078c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000790:	b292      	uxth	r2, r2
  *headerPtr |= (uint32_t)crc << 28;
 8000792:	f841 4c04 	str.w	r4, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000796:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000798:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800079a:	b1e1      	cbz	r1, 80007d6 <ASPEP_sendPacket+0xb6>
  __ASM volatile ("cpsie i" : : : "memory");
 800079c:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 800079e:	2b09      	cmp	r3, #9
 80007a0:	d00d      	beq.n	80007be <ASPEP_sendPacket+0x9e>
      else if (MCTL_SYNC == dataType)
 80007a2:	2b0a      	cmp	r3, #10
 80007a4:	d02e      	beq.n	8000804 <ASPEP_sendPacket+0xe4>
      else if(ASPEP_CTRL == dataType)
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d132      	bne.n	8000810 <ASPEP_sendPacket+0xf0>
        if (pHandle->ctrlBuffer.state != available)
 80007aa:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
 80007ae:	bb69      	cbnz	r1, 800080c <ASPEP_sendPacket+0xec>
          pHandle->ctrlBuffer.state = pending;
 80007b0:	2302      	movs	r3, #2
 80007b2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80007b6:	e7b9      	b.n	800072c <ASPEP_sendPacket+0xc>
          result = MCTL_SYNC_NOT_EXPECTED;
 80007b8:	2101      	movs	r1, #1
}
 80007ba:	4608      	mov	r0, r1
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 80007be:	6c03      	ldr	r3, [r0, #64]	; 0x40
        if (NULL == pHandle->asyncNextBuffer)
 80007c0:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 80007c2:	6819      	ldr	r1, [r3, #0]
          result = ASPEP_BUFFER_ERROR;
 80007c4:	458c      	cmp	ip, r1
 80007c6:	bf14      	ite	ne
 80007c8:	2103      	movne	r1, #3
 80007ca:	2100      	moveq	r1, #0
        if (NULL == pHandle->asyncNextBuffer)
 80007cc:	b36c      	cbz	r4, 800082a <ASPEP_sendPacket+0x10a>
        pHandle->lastRequestedAsyncBuff->state = pending;
 80007ce:	2002      	movs	r0, #2
 80007d0:	7198      	strb	r0, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 80007d2:	809a      	strh	r2, [r3, #4]
 80007d4:	e7aa      	b.n	800072c <ASPEP_sendPacket+0xc>
      if (MCTL_ASYNC == dataType)
 80007d6:	2b09      	cmp	r3, #9
 80007d8:	d022      	beq.n	8000820 <ASPEP_sendPacket+0x100>
      else if (MCTL_SYNC == dataType)
 80007da:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 80007dc:	f04f 0103 	mov.w	r1, #3
        pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 80007e0:	bf0b      	itete	eq
 80007e2:	f100 0328 	addeq.w	r3, r0, #40	; 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80007e6:	f100 0320 	addne.w	r3, r0, #32
        pHandle->syncBuffer.state = readLock;
 80007ea:	f880 102e 	strbeq.w	r1, [r0, #46]	; 0x2e
        pHandle->ctrlBuffer.state = readLock;
 80007ee:	f880 1024 	strbne.w	r1, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80007f2:	6483      	str	r3, [r0, #72]	; 0x48
 80007f4:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80007f6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80007f8:	6940      	ldr	r0, [r0, #20]
 80007fa:	4661      	mov	r1, ip
 80007fc:	4798      	blx	r3
 80007fe:	2100      	movs	r1, #0
}
 8000800:	4608      	mov	r0, r1
 8000802:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle -> syncBuffer.state != writeLock)
 8000804:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8000808:	2b01      	cmp	r3, #1
 800080a:	d003      	beq.n	8000814 <ASPEP_sendPacket+0xf4>
          result = ASPEP_BUFFER_ERROR;
 800080c:	2103      	movs	r1, #3
 800080e:	e78d      	b.n	800072c <ASPEP_sendPacket+0xc>
  uint8_t result = ASPEP_OK;
 8000810:	2100      	movs	r1, #0
 8000812:	e78b      	b.n	800072c <ASPEP_sendPacket+0xc>
          pHandle->syncBuffer.state = pending;
 8000814:	2302      	movs	r3, #2
 8000816:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
          pHandle->syncBuffer.length = bufferLength;
 800081a:	8582      	strh	r2, [r0, #44]	; 0x2c
  uint8_t result = ASPEP_OK;
 800081c:	2100      	movs	r1, #0
 800081e:	e785      	b.n	800072c <ASPEP_sendPacket+0xc>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8000820:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000822:	2103      	movs	r1, #3
 8000824:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000826:	6483      	str	r3, [r0, #72]	; 0x48
 8000828:	e7e4      	b.n	80007f4 <ASPEP_sendPacket+0xd4>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 800082a:	6443      	str	r3, [r0, #68]	; 0x44
 800082c:	e7cf      	b.n	80007ce <ASPEP_sendPacket+0xae>
 800082e:	bf00      	nop
 8000830:	08009de8 	.word	0x08009de8
 8000834:	08009dd8 	.word	0x08009dd8

08000838 <ASPEP_HWDataTransmittedIT>:
/* ASPEP_HWDataTransmittedIT is called as soon as previous packet transfer is completed */
/* pHandle->lockBuffer is set before packet transmission and is never read here after */
/* therefore, there is no need to protect this ISR against another higher priority ISR (HF Task)*/

void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000838:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 800083a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800083e:	2b03      	cmp	r3, #3
{
 8000840:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8000842:	d013      	beq.n	800086c <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000844:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000846:	2100      	movs	r1, #0
 8000848:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 800084a:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 800084e:	2a02      	cmp	r2, #2
 8000850:	d013      	beq.n	800087a <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8000852:	2b02      	cmp	r3, #2
 8000854:	d11d      	bne.n	8000892 <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000856:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 800085a:	6d83      	ldr	r3, [r0, #88]	; 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 800085c:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 800085e:	2204      	movs	r2, #4
 8000860:	6940      	ldr	r0, [r0, #20]
 8000862:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000864:	2303      	movs	r3, #3
 8000866:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 800086a:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 800086c:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
      pHandle->ctrlBuffer.state = available;
 8000870:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 8000872:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8000874:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if (pHandle->syncBuffer.state == pending)
 8000878:	d10b      	bne.n	8000892 <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 800087a:	f104 0028 	add.w	r0, r4, #40	; 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800087e:	6da3      	ldr	r3, [r4, #88]	; 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000880:	64a0      	str	r0, [r4, #72]	; 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000882:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8000884:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000886:	6960      	ldr	r0, [r4, #20]
 8000888:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 800088a:	2303      	movs	r3, #3
 800088c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 8000890:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000892:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8000894:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000896:	b1cb      	cbz	r3, 80008cc <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8000898:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 800089a:	64a3      	str	r3, [r4, #72]	; 0x48
        pHandle->asyncNextBuffer->state = readLock;
 800089c:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 800089e:	6819      	ldr	r1, [r3, #0]
 80008a0:	889a      	ldrh	r2, [r3, #4]
 80008a2:	6960      	ldr	r0, [r4, #20]
 80008a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80008a6:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 80008a8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d007      	beq.n	80008c0 <ASPEP_HWDataTransmittedIT+0x88>
 80008b0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d003      	beq.n	80008c0 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 80008bc:	b662      	cpsie	i
}
 80008be:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 80008c0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80008c2:	0063      	lsls	r3, r4, #1
 80008c4:	3368      	adds	r3, #104	; 0x68
 80008c6:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 80008c8:	6463      	str	r3, [r4, #68]	; 0x44
        {
 80008ca:	e7f7      	b.n	80008bc <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 80008cc:	64a3      	str	r3, [r4, #72]	; 0x48
 80008ce:	e7f5      	b.n	80008bc <ASPEP_HWDataTransmittedIT+0x84>

080008d0 <ASPEP_RXframeProcess>:

uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 80008d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
    uint16_t packetNumber;
    bool validCRCData = true;

    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 80008d4:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 80008d8:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 80008da:	2500      	movs	r5, #0
{
 80008dc:	4604      	mov	r4, r0
    *packetLength = 0;
 80008de:	800d      	strh	r5, [r1, #0]
    if (pHandle->NewPacketAvailable)
 80008e0:	b193      	cbz	r3, 8000908 <ASPEP_RXframeProcess+0x38>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 80008e2:	f890 6064 	ldrb.w	r6, [r0, #100]	; 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 80008e6:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
      switch (pHandle->ASPEP_State)
 80008ea:	2e01      	cmp	r6, #1
 80008ec:	d054      	beq.n	8000998 <ASPEP_RXframeProcess+0xc8>
 80008ee:	2e02      	cmp	r6, #2
 80008f0:	d03e      	beq.n	8000970 <ASPEP_RXframeProcess+0xa0>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d033      	beq.n	800095e <ASPEP_RXframeProcess+0x8e>

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80008f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008f8:	6960      	ldr	r0, [r4, #20]
 80008fa:	2204      	movs	r2, #4
 80008fc:	f104 011c 	add.w	r1, r4, #28
 8000900:	4798      	blx	r3
    }
#ifdef NULL_PTR_ASP
  }
#endif
  return (result);
}
 8000902:	4628      	mov	r0, r5
 8000904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000908:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
 800090c:	2d00      	cmp	r5, #0
 800090e:	d0f8      	beq.n	8000902 <ASPEP_RXframeProcess+0x32>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000910:	042b      	lsls	r3, r5, #16
 8000912:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000916:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800091a:	4995      	ldr	r1, [pc, #596]	; (8000b70 <ASPEP_RXframeProcess+0x2a0>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800091c:	4895      	ldr	r0, [pc, #596]	; (8000b74 <ASPEP_RXframeProcess+0x2a4>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800091e:	f083 0309 	eor.w	r3, r3, #9
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000922:	5cca      	ldrb	r2, [r1, r3]
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000924:	f045 030f 	orr.w	r3, r5, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000928:	ea82 4515 	eor.w	r5, r2, r5, lsr #16
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800092c:	5d4a      	ldrb	r2, [r1, r5]
  *headerPtr |= (uint32_t)crc << 28;
 800092e:	5c82      	ldrb	r2, [r0, r2]
 8000930:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000934:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000936:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000938:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800093a:	2b00      	cmp	r3, #0
 800093c:	d03a      	beq.n	80009b4 <ASPEP_RXframeProcess+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 800093e:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000940:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000944:	b913      	cbnz	r3, 800094c <ASPEP_RXframeProcess+0x7c>
          pHandle->ctrlBuffer.state = pending;
 8000946:	2302      	movs	r3, #2
 8000948:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 800094c:	2500      	movs	r5, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 800094e:	6960      	ldr	r0, [r4, #20]
 8000950:	6d23      	ldr	r3, [r4, #80]	; 0x50
      pHandle->badPacketFlag = ASPEP_OK;
 8000952:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000956:	4798      	blx	r3
}
 8000958:	4628      	mov	r0, r5
 800095a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          if (BEACON == pHandle->rxPacketType)
 800095e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8000960:	2b05      	cmp	r3, #5
 8000962:	f000 8095 	beq.w	8000a90 <ASPEP_RXframeProcess+0x1c0>
          else if (PING == pHandle->rxPacketType)
 8000966:	2b06      	cmp	r3, #6
 8000968:	f000 80d7 	beq.w	8000b1a <ASPEP_RXframeProcess+0x24a>
  uint8_t *result = NULL;
 800096c:	4635      	mov	r5, r6
 800096e:	e7c2      	b.n	80008f6 <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8000970:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8000972:	2b05      	cmp	r3, #5
 8000974:	d05f      	beq.n	8000a36 <ASPEP_RXframeProcess+0x166>
          else if (PING == pHandle->rxPacketType)
 8000976:	2b06      	cmp	r3, #6
 8000978:	f000 80d6 	beq.w	8000b28 <ASPEP_RXframeProcess+0x258>
          else if (DATA_PACKET == pHandle->rxPacketType)
 800097c:	2b09      	cmp	r3, #9
 800097e:	d1ba      	bne.n	80008f6 <ASPEP_RXframeProcess+0x26>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000980:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
              *packetLength = pHandle->rxLength;
 8000984:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
              result = pHandle->rxBuffer;
 8000988:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 800098a:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 800098c:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 800098e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000992:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 8000994:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 8000996:	e7ae      	b.n	80008f6 <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8000998:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800099a:	2b05      	cmp	r3, #5
 800099c:	d016      	beq.n	80009cc <ASPEP_RXframeProcess+0xfc>
          else if (PING == pHandle->rxPacketType)
 800099e:	2b06      	cmp	r3, #6
 80009a0:	d1a9      	bne.n	80008f6 <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 80009a2:	f3c2 320f 	ubfx	r2, r2, #12, #16
 80009a6:	4631      	mov	r1, r6
 80009a8:	f7ff fe3c 	bl	8000624 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 80009ac:	2302      	movs	r3, #2
 80009ae:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80009b2:	e7a0      	b.n	80008f6 <ASPEP_RXframeProcess+0x26>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80009b4:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 80009b8:	2303      	movs	r3, #3
 80009ba:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80009be:	64a1      	str	r1, [r4, #72]	; 0x48
 80009c0:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80009c2:	2204      	movs	r2, #4
 80009c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80009c6:	6960      	ldr	r0, [r4, #20]
 80009c8:	4798      	blx	r3
  return (result);
 80009ca:	e7bf      	b.n	800094c <ASPEP_RXframeProcess+0x7c>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 80009cc:	7f03      	ldrb	r3, [r0, #28]
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 80009ce:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009d0:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009d4:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009d8:	f894 606e 	ldrb.w	r6, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009dc:	f894 706f 	ldrb.w	r7, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 80009e0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 80009e4:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009e6:	4281      	cmp	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80009e8:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009ec:	bf28      	it	cs
 80009ee:	4601      	movcs	r1, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009f0:	42ab      	cmp	r3, r5
 80009f2:	4698      	mov	r8, r3
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 80009f4:	f3c2 5e46 	ubfx	lr, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009f8:	bf28      	it	cs
 80009fa:	46a8      	movcs	r8, r5
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009fc:	45b4      	cmp	ip, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009fe:	f884 806c 	strb.w	r8, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a02:	46e0      	mov	r8, ip
 8000a04:	bf28      	it	cs
 8000a06:	46b0      	movcs	r8, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a08:	45be      	cmp	lr, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a0a:	f884 806e 	strb.w	r8, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a0e:	46f0      	mov	r8, lr
 8000a10:	bf28      	it	cs
 8000a12:	46b8      	movcs	r8, r7
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a14:	42ab      	cmp	r3, r5
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a16:	f884 106d 	strb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a1a:	f884 806f 	strb.w	r8, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a1e:	f240 8088 	bls.w	8000b32 <ASPEP_RXframeProcess+0x262>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000a28:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8000a2c:	4620      	mov	r0, r4
 8000a2e:	f7ff fdb3 	bl	8000598 <ASPEP_sendBeacon>
  uint8_t *result = NULL;
 8000a32:	2500      	movs	r5, #0
 8000a34:	e75f      	b.n	80008f6 <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a36:	7f03      	ldrb	r3, [r0, #28]
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a38:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a3a:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a3e:	f894 606c 	ldrb.w	r6, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a42:	f894 c06e 	ldrb.w	ip, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a46:	f894 706f 	ldrb.w	r7, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a4a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a4e:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a50:	4281      	cmp	r1, r0
 8000a52:	bf28      	it	cs
 8000a54:	4601      	movcs	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000a56:	f3c2 3e86 	ubfx	lr, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a5a:	42b3      	cmp	r3, r6
 8000a5c:	4699      	mov	r9, r3
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000a5e:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a62:	bf28      	it	cs
 8000a64:	46b1      	movcs	r9, r6
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a66:	45e6      	cmp	lr, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a68:	f884 906c 	strb.w	r9, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a6c:	46f1      	mov	r9, lr
 8000a6e:	bf28      	it	cs
 8000a70:	46e1      	movcs	r9, ip
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a72:	45b8      	cmp	r8, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a74:	f884 906e 	strb.w	r9, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a78:	46c1      	mov	r9, r8
 8000a7a:	bf28      	it	cs
 8000a7c:	46b9      	movcs	r9, r7
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a7e:	42b3      	cmp	r3, r6
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a80:	f884 106d 	strb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a84:	f884 906f 	strb.w	r9, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a88:	d964      	bls.n	8000b54 <ASPEP_RXframeProcess+0x284>
 8000a8a:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8000a8e:	e7cb      	b.n	8000a28 <ASPEP_RXframeProcess+0x158>
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a90:	7f65      	ldrb	r5, [r4, #29]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a92:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a94:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a98:	f894 c06c 	ldrb.w	ip, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a9c:	f894 e06e 	ldrb.w	lr, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000aa0:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000aa4:	f005 053f 	and.w	r5, r5, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000aa8:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000aaa:	42ab      	cmp	r3, r5
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000aac:	f3c2 3786 	ubfx	r7, r2, #14, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000ab0:	bf28      	it	cs
 8000ab2:	462b      	movcs	r3, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ab4:	4560      	cmp	r0, ip
 8000ab6:	4601      	mov	r1, r0
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000ab8:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000abc:	bf28      	it	cs
 8000abe:	4661      	movcs	r1, ip
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ac0:	4577      	cmp	r7, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ac2:	f884 106c 	strb.w	r1, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ac6:	4639      	mov	r1, r7
 8000ac8:	bf28      	it	cs
 8000aca:	4671      	movcs	r1, lr
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000acc:	45c1      	cmp	r9, r8
 8000ace:	464e      	mov	r6, r9
 8000ad0:	bf28      	it	cs
 8000ad2:	4646      	movcs	r6, r8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000ad4:	4560      	cmp	r0, ip
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000ad6:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ada:	f884 106e 	strb.w	r1, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ade:	f884 606f 	strb.w	r6, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000ae2:	d8a1      	bhi.n	8000a28 <ASPEP_RXframeProcess+0x158>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000ae4:	429d      	cmp	r5, r3
 8000ae6:	d89f      	bhi.n	8000a28 <ASPEP_RXframeProcess+0x158>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000ae8:	4577      	cmp	r7, lr
 8000aea:	d89d      	bhi.n	8000a28 <ASPEP_RXframeProcess+0x158>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000aec:	45c1      	cmp	r9, r8
 8000aee:	d89b      	bhi.n	8000a28 <ASPEP_RXframeProcess+0x158>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000af0:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
 8000af4:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000af8:	4290      	cmp	r0, r2
 8000afa:	d195      	bne.n	8000a28 <ASPEP_RXframeProcess+0x158>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000afc:	1c4a      	adds	r2, r1, #1
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000afe:	3301      	adds	r3, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b00:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b02:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b04:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b06:	01b6      	lsls	r6, r6, #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b08:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b0a:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b0c:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b0e:	81e6      	strh	r6, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b10:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b14:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 8000b18:	e786      	b.n	8000a28 <ASPEP_RXframeProcess+0x158>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000b1a:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000b1e:	4631      	mov	r1, r6
 8000b20:	f7ff fd80 	bl	8000624 <ASPEP_sendPing>
  uint8_t *result = NULL;
 8000b24:	4635      	mov	r5, r6
 8000b26:	e6e6      	b.n	80008f6 <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000b28:	7f42      	ldrb	r2, [r0, #29]
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	f7ff fd7a 	bl	8000624 <ASPEP_sendPing>
 8000b30:	e6e1      	b.n	80008f6 <ASPEP_RXframeProcess+0x26>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000b32:	4288      	cmp	r0, r1
 8000b34:	f63f af75 	bhi.w	8000a22 <ASPEP_RXframeProcess+0x152>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000b38:	45b4      	cmp	ip, r6
 8000b3a:	f63f af72 	bhi.w	8000a22 <ASPEP_RXframeProcess+0x152>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000b3e:	45be      	cmp	lr, r7
 8000b40:	f63f af6f 	bhi.w	8000a22 <ASPEP_RXframeProcess+0x152>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000b44:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8000b48:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	f47f af68 	bne.w	8000a22 <ASPEP_RXframeProcess+0x152>
 8000b52:	e769      	b.n	8000a28 <ASPEP_RXframeProcess+0x158>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000b54:	4288      	cmp	r0, r1
 8000b56:	d898      	bhi.n	8000a8a <ASPEP_RXframeProcess+0x1ba>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000b58:	45e6      	cmp	lr, ip
 8000b5a:	d896      	bhi.n	8000a8a <ASPEP_RXframeProcess+0x1ba>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000b5c:	45b8      	cmp	r8, r7
 8000b5e:	d894      	bhi.n	8000a8a <ASPEP_RXframeProcess+0x1ba>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000b60:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
 8000b64:	f3c2 1202 	ubfx	r2, r2, #4, #3
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000b68:	1aab      	subs	r3, r5, r2
 8000b6a:	425d      	negs	r5, r3
 8000b6c:	415d      	adcs	r5, r3
 8000b6e:	e78c      	b.n	8000a8a <ASPEP_RXframeProcess+0x1ba>
 8000b70:	08009de8 	.word	0x08009de8
 8000b74:	08009dd8 	.word	0x08009dd8

08000b78 <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000b78:	b510      	push	{r4, lr}
    /* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.
      * This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_
      * RXframeProcess
      * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be
      * configured after.*/
    switch (pHandle->ASPEP_TL_State)
 8000b7a:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
{
 8000b7e:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000b80:	b13b      	cbz	r3, 8000b92 <ASPEP_HWDataReceivedIT+0x1a>
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d104      	bne.n	8000b90 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000b86:	2200      	movs	r2, #0
 8000b88:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000b8c:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
        break;
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000b90:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000b92:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000b94:	4a1e      	ldr	r2, [pc, #120]	; (8000c10 <ASPEP_HWDataReceivedIT+0x98>)
 8000b96:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000b98:	5cd3      	ldrb	r3, [r2, r3]
 8000b9a:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000b9e:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000ba0:	5cd3      	ldrb	r3, [r2, r3]
 8000ba2:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8000ba6:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000ba8:	5cd3      	ldrb	r3, [r2, r3]
 8000baa:	ea83 6111 	eor.w	r1, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000bae:	5c53      	ldrb	r3, [r2, r1]
 8000bb0:	b95b      	cbnz	r3, 8000bca <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000bb2:	7f03      	ldrb	r3, [r0, #28]
 8000bb4:	f003 030f 	and.w	r3, r3, #15
 8000bb8:	2b06      	cmp	r3, #6
 8000bba:	6683      	str	r3, [r0, #104]	; 0x68
          switch (pHandle->rxPacketType)
 8000bbc:	d809      	bhi.n	8000bd2 <ASPEP_HWDataReceivedIT+0x5a>
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	d81e      	bhi.n	8000c00 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 8000bc8:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000bd0:	bd10      	pop	{r4, pc}
 8000bd2:	2b09      	cmp	r3, #9
 8000bd4:	d1f5      	bne.n	8000bc2 <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000bd6:	8b83      	ldrh	r3, [r0, #28]
 8000bd8:	091b      	lsrs	r3, r3, #4
 8000bda:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000bde:	b17b      	cbz	r3, 8000c00 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000be0:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d30f      	bcc.n	8000c08 <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000be8:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
 8000bec:	6981      	ldr	r1, [r0, #24]
 8000bee:	6940      	ldr	r0, [r0, #20]
 8000bf0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000bf4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000bf6:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 8000bfe:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 8000c00:	2301      	movs	r3, #1
 8000c02:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 8000c06:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000c0e:	bd10      	pop	{r4, pc}
 8000c10:	08009de8 	.word	0x08009de8

08000c14 <ASPEP_HWDMAReset>:

/* Called after debugger has stopped the MCU*/
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8000c14:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000c16:	2200      	movs	r2, #0
 8000c18:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000c1c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000c1e:	6940      	ldr	r0, [r0, #20]
 8000c20:	2204      	movs	r2, #4
 8000c22:	311c      	adds	r1, #28
 8000c24:	4718      	bx	r3
 8000c26:	bf00      	nop

08000c28 <HAL_FDCAN_RxFifo0Callback>:

// FDCAN reception interrupt callback function
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
    // Check if a message is pending in Rx FIFO 0
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8000c28:	07ca      	lsls	r2, r1, #31
 8000c2a:	d400      	bmi.n	8000c2e <HAL_FDCAN_RxFifo0Callback+0x6>
 8000c2c:	4770      	bx	lr
{
 8000c2e:	b508      	push	{r3, lr}
    {
        // Retrieve the received message
        HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxCommandData);
 8000c30:	4a06      	ldr	r2, [pc, #24]	; (8000c4c <HAL_FDCAN_RxFifo0Callback+0x24>)
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <HAL_FDCAN_RxFifo0Callback+0x28>)
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	f004 fe85 	bl	8005944 <HAL_FDCAN_GetRxMessage>
        latest_command_timestamp = HAL_GetTick();
 8000c3a:	f003 fbdd 	bl	80043f8 <HAL_GetTick>
 8000c3e:	4905      	ldr	r1, [pc, #20]	; (8000c54 <HAL_FDCAN_RxFifo0Callback+0x2c>)
        response_flag = true;
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_FDCAN_RxFifo0Callback+0x30>)
        latest_command_timestamp = HAL_GetTick();
 8000c42:	6008      	str	r0, [r1, #0]
        response_flag = true;
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
    }
}
 8000c48:	bd08      	pop	{r3, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000046c 	.word	0x2000046c
 8000c50:	20000464 	.word	0x20000464
 8000c54:	2000045c 	.word	0x2000045c
 8000c58:	20000460 	.word	0x20000460

08000c5c <HAL_TIM_PeriodElapsedCallback>:
//		MC_SetCurrentReferenceMotor1(cmd);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c5c:	b530      	push	{r4, r5, lr}
	HAL_GPIO_TogglePin(USER_DEBUG_GPIO_Port,USER_DEBUG_Pin);
 8000c5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
{
 8000c62:	b083      	sub	sp, #12
 8000c64:	4604      	mov	r4, r0
	HAL_GPIO_TogglePin(USER_DEBUG_GPIO_Port,USER_DEBUG_Pin);
 8000c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6a:	f005 f8c5 	bl	8005df8 <HAL_GPIO_TogglePin>
	if(HAL_GetTick() - latest_command_timestamp > 200)
 8000c6e:	f003 fbc3 	bl	80043f8 <HAL_GetTick>
 8000c72:	4b45      	ldr	r3, [pc, #276]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000c74:	4a45      	ldr	r2, [pc, #276]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4945      	ldr	r1, [pc, #276]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x134>)
	// Load the can state packet with the latest sensor measurements
	state_packet.data.q = q;
	state_packet.data.q_dot = q_dot;

	q = get_encoder_position();
	if (htim->Instance == TIM2)
 8000c7a:	6824      	ldr	r4, [r4, #0]
	return (enc_index*M1_PULSE_NBR + (int32_t) TIM4->CNT);
 8000c7c:	4d45      	ldr	r5, [pc, #276]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x138>)
	if(HAL_GetTick() - latest_command_timestamp > 200)
 8000c7e:	1ac0      	subs	r0, r0, r3
 8000c80:	28c8      	cmp	r0, #200	; 0xc8
	state_packet.data.q_dot = q_dot;
 8000c82:	4845      	ldr	r0, [pc, #276]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x13c>)
	state_packet.data.q = q;
 8000c84:	bf9c      	itt	ls
 8000c86:	6813      	ldrls	r3, [r2, #0]
 8000c88:	600b      	strls	r3, [r1, #0]
	state_packet.data.q_dot = q_dot;
 8000c8a:	6803      	ldr	r3, [r0, #0]
 8000c8c:	808b      	strh	r3, [r1, #4]
	return (enc_index*M1_PULSE_NBR + (int32_t) TIM4->CNT);
 8000c8e:	4b43      	ldr	r3, [pc, #268]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8000c94:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 8000c98:	442b      	add	r3, r5
	if (htim->Instance == TIM2)
 8000c9a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
	q = get_encoder_position();
 8000c9e:	6013      	str	r3, [r2, #0]
	if (htim->Instance == TIM2)
 8000ca0:	d001      	beq.n	8000ca6 <HAL_TIM_PeriodElapsedCallback+0x4a>
		compensation[TIM4->CNT>>8]=command;

		state_packet.data.tau = command;
		MC_SetCurrentReferenceMotor1(cmd);
	}
}
 8000ca2:	b003      	add	sp, #12
 8000ca4:	bd30      	pop	{r4, r5, pc}
		speed_tracking_counter ++;
 8000ca6:	4b3e      	ldr	r3, [pc, #248]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000ca8:	681c      	ldr	r4, [r3, #0]
 8000caa:	3401      	adds	r4, #1
 8000cac:	601c      	str	r4, [r3, #0]
		if(speed_tracking_counter > 10)
 8000cae:	681c      	ldr	r4, [r3, #0]
 8000cb0:	2c0a      	cmp	r4, #10
 8000cb2:	dd0b      	ble.n	8000ccc <HAL_TIM_PeriodElapsedCallback+0x70>
			speed_tracking_counter = 0;
 8000cb4:	2400      	movs	r4, #0
 8000cb6:	601c      	str	r4, [r3, #0]
			q_dot = (q - old_position)/2;
 8000cb8:	4c3a      	ldr	r4, [pc, #232]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000cba:	6813      	ldr	r3, [r2, #0]
 8000cbc:	6825      	ldr	r5, [r4, #0]
 8000cbe:	1b5b      	subs	r3, r3, r5
 8000cc0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8000cc4:	105b      	asrs	r3, r3, #1
 8000cc6:	6003      	str	r3, [r0, #0]
			old_position = q;
 8000cc8:	6813      	ldr	r3, [r2, #0]
 8000cca:	6023      	str	r3, [r4, #0]
		if(abs(q)>M1_PULSE_NBR*2)
 8000ccc:	6813      	ldr	r3, [r2, #0]
		cmd.d = 100;
 8000cce:	2464      	movs	r4, #100	; 0x64
		if(abs(q)>M1_PULSE_NBR*2)
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	bfb8      	it	lt
 8000cd4:	425b      	neglt	r3, r3
		cmd.d = 100;
 8000cd6:	f8ad 4006 	strh.w	r4, [sp, #6]
		if(abs(q)>M1_PULSE_NBR*2)
 8000cda:	f641 74fe 	movw	r4, #8190	; 0x1ffe
 8000cde:	42a3      	cmp	r3, r4
 8000ce0:	dc31      	bgt.n	8000d46 <HAL_TIM_PeriodElapsedCallback+0xea>
			command = pos_gain*(q_d-q) + vel_gain*(q_dot_d-q_dot)+tau_ff;
 8000ce2:	4b31      	ldr	r3, [pc, #196]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000ce4:	4c31      	ldr	r4, [pc, #196]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000ce6:	6824      	ldr	r4, [r4, #0]
 8000ce8:	6812      	ldr	r2, [r2, #0]
 8000cea:	681d      	ldr	r5, [r3, #0]
 8000cec:	4b30      	ldr	r3, [pc, #192]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000cee:	1aa4      	subs	r4, r4, r2
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	6803      	ldr	r3, [r0, #0]
 8000cf4:	482f      	ldr	r0, [pc, #188]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000cf6:	6800      	ldr	r0, [r0, #0]
 8000cf8:	1ad2      	subs	r2, r2, r3
 8000cfa:	fb00 f202 	mul.w	r2, r0, r2
 8000cfe:	482e      	ldr	r0, [pc, #184]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000d00:	4b2e      	ldr	r3, [pc, #184]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000d02:	6800      	ldr	r0, [r0, #0]
 8000d04:	fb05 2204 	mla	r2, r5, r4, r2
 8000d08:	4402      	add	r2, r0
 8000d0a:	4c2d      	ldr	r4, [pc, #180]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000d0c:	601a      	str	r2, [r3, #0]
		if(command>2500)
 8000d0e:	6818      	ldr	r0, [r3, #0]
 8000d10:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000d14:	4290      	cmp	r0, r2
 8000d16:	dc03      	bgt.n	8000d20 <HAL_TIM_PeriodElapsedCallback+0xc4>
		else if(-command>2500)
 8000d18:	6818      	ldr	r0, [r3, #0]
 8000d1a:	4a2a      	ldr	r2, [pc, #168]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	da00      	bge.n	8000d22 <HAL_TIM_PeriodElapsedCallback+0xc6>
			command = -2500;
 8000d20:	601a      	str	r2, [r3, #0]
		compensation[TIM4->CNT>>8]=command;
 8000d22:	4a1c      	ldr	r2, [pc, #112]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x138>)
		cmd.q = command;
 8000d24:	6818      	ldr	r0, [r3, #0]
 8000d26:	f8ad 0004 	strh.w	r0, [sp, #4]
		compensation[TIM4->CNT>>8]=command;
 8000d2a:	6818      	ldr	r0, [r3, #0]
 8000d2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000d2e:	0a12      	lsrs	r2, r2, #8
 8000d30:	b200      	sxth	r0, r0
 8000d32:	f824 0012 	strh.w	r0, [r4, r2, lsl #1]
		MC_SetCurrentReferenceMotor1(cmd);
 8000d36:	9801      	ldr	r0, [sp, #4]
		state_packet.data.tau = command;
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	80cb      	strh	r3, [r1, #6]
}
 8000d3c:	b003      	add	sp, #12
 8000d3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		MC_SetCurrentReferenceMotor1(cmd);
 8000d42:	f000 bc87 	b.w	8001654 <MC_SetCurrentReferenceMotor1>
			vel_gain = 0;
 8000d46:	4c1b      	ldr	r4, [pc, #108]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x158>)
			pos_gain=0;
 8000d48:	4d17      	ldr	r5, [pc, #92]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	602b      	str	r3, [r5, #0]
			vel_gain = 0;
 8000d4e:	6023      	str	r3, [r4, #0]
			command = pos_gain*(q_d-q) + vel_gain*(q_dot_d-q_dot)+tau_ff+compensation[TIM4->CNT>>8];
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6812      	ldr	r2, [r2, #0]
 8000d56:	682d      	ldr	r5, [r5, #0]
 8000d58:	1a9b      	subs	r3, r3, r2
 8000d5a:	4a15      	ldr	r2, [pc, #84]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000d5c:	6812      	ldr	r2, [r2, #0]
 8000d5e:	6800      	ldr	r0, [r0, #0]
 8000d60:	1a12      	subs	r2, r2, r0
 8000d62:	6820      	ldr	r0, [r4, #0]
 8000d64:	4c14      	ldr	r4, [pc, #80]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000d66:	fb00 f202 	mul.w	r2, r0, r2
 8000d6a:	480a      	ldr	r0, [pc, #40]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000d6c:	6824      	ldr	r4, [r4, #0]
 8000d6e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000d70:	fb05 2203 	mla	r2, r5, r3, r2
 8000d74:	4422      	add	r2, r4
 8000d76:	0a00      	lsrs	r0, r0, #8
 8000d78:	4c11      	ldr	r4, [pc, #68]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000d7c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8000d80:	fa02 f280 	sxtah	r2, r2, r0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	e7c2      	b.n	8000d0e <HAL_TIM_PeriodElapsedCallback+0xb2>
 8000d88:	2000045c 	.word	0x2000045c
 8000d8c:	20000d74 	.word	0x20000d74
 8000d90:	20000494 	.word	0x20000494
 8000d94:	40000800 	.word	0x40000800
 8000d98:	20000d7c 	.word	0x20000d7c
 8000d9c:	20001fdc 	.word	0x20001fdc
 8000da0:	20000d84 	.word	0x20000d84
 8000da4:	20000d6c 	.word	0x20000d6c
 8000da8:	20000d70 	.word	0x20000d70
 8000dac:	20000d78 	.word	0x20000d78
 8000db0:	20000d80 	.word	0x20000d80
 8000db4:	20000d8c 	.word	0x20000d8c
 8000db8:	20000d88 	.word	0x20000d88
 8000dbc:	2000049c 	.word	0x2000049c
 8000dc0:	200004a0 	.word	0x200004a0
 8000dc4:	fffff63c 	.word	0xfffff63c

08000dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc8:	b500      	push	{lr}
 8000dca:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dcc:	2238      	movs	r2, #56	; 0x38
 8000dce:	2100      	movs	r1, #0
 8000dd0:	a806      	add	r0, sp, #24
 8000dd2:	f008 ffed 	bl	8009db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	e9cd 0000 	strd	r0, r0, [sp]
 8000ddc:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8000de0:	9004      	str	r0, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000de2:	f005 f89b 	bl	8005f1c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de6:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8000e38 <SystemClock_Config+0x70>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dea:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000dec:	2255      	movs	r2, #85	; 0x55
 8000dee:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df2:	2103      	movs	r1, #3
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000df4:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df8:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e00:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e04:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e06:	f005 f90f 	bl	8006028 <HAL_RCC_OscConfig>
 8000e0a:	b108      	cbz	r0, 8000e10 <SystemClock_Config+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e10:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8000e40 <SystemClock_Config+0x78>
 8000e14:	ed8d 7b00 	vstr	d7, [sp]
 8000e18:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8000e48 <SystemClock_Config+0x80>
 8000e1c:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e1e:	2104      	movs	r1, #4
 8000e20:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e22:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e26:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e28:	f005 fb82 	bl	8006530 <HAL_RCC_ClockConfig>
 8000e2c:	b108      	cbz	r0, 8000e32 <SystemClock_Config+0x6a>
 8000e2e:	b672      	cpsid	i
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <SystemClock_Config+0x68>
}
 8000e32:	b015      	add	sp, #84	; 0x54
 8000e34:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e38:	00000001 	.word	0x00000001
 8000e3c:	00010000 	.word	0x00010000
 8000e40:	0000000f 	.word	0x0000000f
 8000e44:	00000003 	.word	0x00000003
	...

08000e50 <main>:
{
 8000e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e54:	ed2d 8b02 	vpush	{d8}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	2400      	movs	r4, #0
{
 8000e5a:	b0af      	sub	sp, #188	; 0xbc
  HAL_Init();
 8000e5c:	f003 fab0 	bl	80043c0 <HAL_Init>
  SystemClock_Config();
 8000e60:	f7ff ffb2 	bl	8000dc8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
 8000e68:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6c:	4db2      	ldr	r5, [pc, #712]	; (8001138 <main+0x2e8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6e:	9422      	str	r4, [sp, #136]	; 0x88
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e70:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin|CAN_SHTD_Pin, GPIO_PIN_RESET);
 8000e72:	48b2      	ldr	r0, [pc, #712]	; (800113c <main+0x2ec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000e7a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	9304      	str	r3, [sp, #16]
 8000e82:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e84:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000e86:	f043 0320 	orr.w	r3, r3, #32
 8000e8a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000e8c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000e8e:	f003 0320 	and.w	r3, r3, #32
 8000e92:	9305      	str	r3, [sp, #20]
 8000e94:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000e9e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	9306      	str	r3, [sp, #24]
 8000ea6:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000eaa:	f043 0302 	orr.w	r3, r3, #2
 8000eae:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000eb0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000eb2:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin|CAN_SHTD_Pin, GPIO_PIN_RESET);
 8000eb6:	f44f 4190 	mov.w	r1, #18432	; 0x4800
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin|CAN_SHTD_Pin, GPIO_PIN_RESET);
 8000ebc:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin|CAN_SHTD_Pin, GPIO_PIN_RESET);
 8000ec0:	f004 ff94 	bl	8005dec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USER_DEBUG_GPIO_Port, USER_DEBUG_Pin, GPIO_PIN_RESET);
 8000ec4:	4622      	mov	r2, r4
 8000ec6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ece:	f004 ff8d 	bl	8005dec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = CAN_TERM_Pin|CAN_SHTD_Pin;
 8000ed2:	2600      	movs	r6, #0
 8000ed4:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8000ed8:	2301      	movs	r3, #1
 8000eda:	2700      	movs	r7, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000edc:	4897      	ldr	r0, [pc, #604]	; (800113c <main+0x2ec>)
 8000ede:	a91e      	add	r1, sp, #120	; 0x78
  GPIO_InitStruct.Pin = CAN_TERM_Pin|CAN_SHTD_Pin;
 8000ee0:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8000ee4:	e9cd 6720 	strd	r6, r7, [sp, #128]	; 0x80
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee8:	f004 fe88 	bl	8005bfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USER_DEBUG_Pin;
 8000eec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ef0:	2301      	movs	r3, #1
  HAL_GPIO_Init(USER_DEBUG_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	a91e      	add	r1, sp, #120	; 0x78
 8000ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = USER_DEBUG_Pin;
 8000ef8:	e9cd 6720 	strd	r6, r7, [sp, #128]	; 0x80
 8000efc:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(USER_DEBUG_GPIO_Port, &GPIO_InitStruct);
 8000f00:	f004 fe7c 	bl	8005bfc <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f04:	6cab      	ldr	r3, [r5, #72]	; 0x48
  hadc1.Instance = ADC1;
 8000f06:	4e8e      	ldr	r6, [pc, #568]	; (8001140 <main+0x2f0>)
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f08:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f0c:	ea43 0308 	orr.w	r3, r3, r8
 8000f10:	64ab      	str	r3, [r5, #72]	; 0x48
 8000f12:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000f14:	ea03 0308 	and.w	r3, r3, r8
 8000f18:	9302      	str	r3, [sp, #8]
 8000f1a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f1c:	6cab      	ldr	r3, [r5, #72]	; 0x48
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f1e:	2701      	movs	r7, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f20:	433b      	orrs	r3, r7
 8000f22:	64ab      	str	r3, [r5, #72]	; 0x48
 8000f24:	6cab      	ldr	r3, [r5, #72]	; 0x48
  ADC_MultiModeTypeDef multimode = {0};
 8000f26:	9410      	str	r4, [sp, #64]	; 0x40
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f28:	403b      	ands	r3, r7
 8000f2a:	9303      	str	r3, [sp, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000f2c:	223c      	movs	r2, #60	; 0x3c
 8000f2e:	4621      	mov	r1, r4
 8000f30:	a81e      	add	r0, sp, #120	; 0x78
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f32:	9b03      	ldr	r3, [sp, #12]
  ADC_MultiModeTypeDef multimode = {0};
 8000f34:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000f38:	f008 ff3a 	bl	8009db0 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f3c:	2220      	movs	r2, #32
 8000f3e:	4621      	mov	r1, r4
 8000f40:	a816      	add	r0, sp, #88	; 0x58
 8000f42:	f008 ff35 	bl	8009db0 <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000f46:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
  hadc1.Init.NbrOfConversion = 2;
 8000f4a:	f04f 0902 	mov.w	r9, #2
  hadc1.Instance = ADC1;
 8000f4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f52:	83b4      	strh	r4, [r6, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f54:	4630      	mov	r0, r6
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f56:	e9c6 4401 	strd	r4, r4, [r6, #4]
  hadc1.Init.GainCompensation = 0;
 8000f5a:	e9c6 a403 	strd	sl, r4, [r6, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f5e:	e9c6 7805 	strd	r7, r8, [r6, #20]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f62:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 2;
 8000f66:	f8c6 9020 	str.w	r9, [r6, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f6a:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f6e:	f886 4038 	strb.w	r4, [r6, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f72:	63f4      	str	r4, [r6, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f74:	f886 4040 	strb.w	r4, [r6, #64]	; 0x40
  hadc1.Instance = ADC1;
 8000f78:	6033      	str	r3, [r6, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f7a:	f003 fa55 	bl	8004428 <HAL_ADC_Init>
 8000f7e:	b108      	cbz	r0, 8000f84 <main+0x134>
 8000f80:	b672      	cpsid	i
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <main+0x132>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f84:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f86:	a910      	add	r1, sp, #64	; 0x40
 8000f88:	4630      	mov	r0, r6
 8000f8a:	f004 f8b7 	bl	80050fc <HAL_ADCEx_MultiModeConfigChannel>
 8000f8e:	b108      	cbz	r0, 8000f94 <main+0x144>
 8000f90:	b672      	cpsid	i
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <main+0x142>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000f94:	ed9f 8b62 	vldr	d8, [pc, #392]	; 8001120 <main+0x2d0>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f98:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 8001174 <main+0x324>
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f9c:	f8ad 009c 	strh.w	r0, [sp, #156]	; 0x9c
  sConfigInjected.InjectedOffset = 0;
 8000fa0:	e9cd 8022 	strd	r8, r0, [sp, #136]	; 0x88
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000fa4:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000fa8:	f88d 00a8 	strb.w	r0, [sp, #168]	; 0xa8
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000fac:	2509      	movs	r5, #9
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000fae:	247f      	movs	r4, #127	; 0x7f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000fb0:	a91e      	add	r1, sp, #120	; 0x78
 8000fb2:	4630      	mov	r0, r6
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000fb4:	e9cd b51e 	strd	fp, r5, [sp, #120]	; 0x78
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000fb8:	ed8d 8b28 	vstr	d8, [sp, #160]	; 0xa0
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000fbc:	9720      	str	r7, [sp, #128]	; 0x80
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000fbe:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000fc2:	9421      	str	r4, [sp, #132]	; 0x84
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000fc4:	f003 fda0 	bl	8004b08 <HAL_ADCEx_InjectedConfigChannel>
 8000fc8:	b108      	cbz	r0, 8000fce <main+0x17e>
 8000fca:	b672      	cpsid	i
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <main+0x17c>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000fce:	a356      	add	r3, pc, #344	; (adr r3, 8001128 <main+0x2d8>)
 8000fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000fd4:	a91e      	add	r1, sp, #120	; 0x78
 8000fd6:	4630      	mov	r0, r6
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000fd8:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000fdc:	f003 fd94 	bl	8004b08 <HAL_ADCEx_InjectedConfigChannel>
 8000fe0:	b108      	cbz	r0, 8000fe6 <main+0x196>
 8000fe2:	b672      	cpsid	i
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <main+0x194>
  sConfig.Channel = ADC_CHANNEL_1;
 8000fe6:	4a57      	ldr	r2, [pc, #348]	; (8001144 <main+0x2f4>)
 8000fe8:	2306      	movs	r3, #6
 8000fea:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8000fee:	2204      	movs	r2, #4
 8000ff0:	237f      	movs	r3, #127	; 0x7f
 8000ff2:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff6:	a916      	add	r1, sp, #88	; 0x58
  sConfig.Channel = ADC_CHANNEL_1;
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffc:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_1;
 8000ffe:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001002:	f003 fb15 	bl	8004630 <HAL_ADC_ConfigChannel>
 8001006:	b108      	cbz	r0, 800100c <main+0x1bc>
 8001008:	b672      	cpsid	i
  while (1)
 800100a:	e7fe      	b.n	800100a <main+0x1ba>
  sConfig.Channel = ADC_CHANNEL_5;
 800100c:	a348      	add	r3, pc, #288	; (adr r3, 8001130 <main+0x2e0>)
 800100e:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001012:	a916      	add	r1, sp, #88	; 0x58
 8001014:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_5;
 8001016:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101a:	f003 fb09 	bl	8004630 <HAL_ADC_ConfigChannel>
 800101e:	4601      	mov	r1, r0
 8001020:	b108      	cbz	r0, 8001026 <main+0x1d6>
 8001022:	b672      	cpsid	i
  while (1)
 8001024:	e7fe      	b.n	8001024 <main+0x1d4>
  hadc2.Instance = ADC2;
 8001026:	4e48      	ldr	r6, [pc, #288]	; (8001148 <main+0x2f8>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001028:	9001      	str	r0, [sp, #4]
 800102a:	223c      	movs	r2, #60	; 0x3c
 800102c:	a81e      	add	r0, sp, #120	; 0x78
 800102e:	f008 febf 	bl	8009db0 <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001032:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 8001034:	4b45      	ldr	r3, [pc, #276]	; (800114c <main+0x2fc>)
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001036:	83b1      	strh	r1, [r6, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001038:	4630      	mov	r0, r6
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800103a:	e9c6 1101 	strd	r1, r1, [r6, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800103e:	e9c6 1704 	strd	r1, r7, [r6, #16]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001042:	f8c6 a00c 	str.w	sl, [r6, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001046:	f8c6 8018 	str.w	r8, [r6, #24]
  hadc2.Init.NbrOfConversion = 1;
 800104a:	6237      	str	r7, [r6, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800104c:	f886 1024 	strb.w	r1, [r6, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001050:	f886 1038 	strb.w	r1, [r6, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001054:	63f1      	str	r1, [r6, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001056:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
  hadc2.Instance = ADC2;
 800105a:	6033      	str	r3, [r6, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800105c:	f003 f9e4 	bl	8004428 <HAL_ADC_Init>
 8001060:	b108      	cbz	r0, 8001066 <main+0x216>
 8001062:	b672      	cpsid	i
  while (1)
 8001064:	e7fe      	b.n	8001064 <main+0x214>
  sConfigInjected.InjectedOffset = 0;
 8001066:	9023      	str	r0, [sp, #140]	; 0x8c
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001068:	f8ad 009c 	strh.w	r0, [sp, #156]	; 0x9c
  sConfigInjected.QueueInjectedContext = DISABLE;
 800106c:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001070:	f88d 00a8 	strb.w	r0, [sp, #168]	; 0xa8
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001074:	a91e      	add	r1, sp, #120	; 0x78
 8001076:	4630      	mov	r0, r6
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001078:	ed8d 8b28 	vstr	d8, [sp, #160]	; 0xa0
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800107c:	e9cd b51e 	strd	fp, r5, [sp, #120]	; 0x78
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001080:	e9cd 7420 	strd	r7, r4, [sp, #128]	; 0x80
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001084:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001088:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800108c:	f003 fd3c 	bl	8004b08 <HAL_ADCEx_InjectedConfigChannel>
 8001090:	b108      	cbz	r0, 8001096 <main+0x246>
 8001092:	b672      	cpsid	i
  while (1)
 8001094:	e7fe      	b.n	8001094 <main+0x244>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8001096:	4a2e      	ldr	r2, [pc, #184]	; (8001150 <main+0x300>)
 8001098:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800109c:	4630      	mov	r0, r6
 800109e:	a91e      	add	r1, sp, #120	; 0x78
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 80010a0:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80010a4:	f003 fd30 	bl	8004b08 <HAL_ADCEx_InjectedConfigChannel>
 80010a8:	b108      	cbz	r0, 80010ae <main+0x25e>
 80010aa:	b672      	cpsid	i
  while (1)
 80010ac:	e7fe      	b.n	80010ac <main+0x25c>
  hcomp1.Instance = COMP1;
 80010ae:	4b29      	ldr	r3, [pc, #164]	; (8001154 <main+0x304>)
 80010b0:	4a29      	ldr	r2, [pc, #164]	; (8001158 <main+0x308>)
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80010b2:	6058      	str	r0, [r3, #4]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80010b4:	e9c3 0003 	strd	r0, r0, [r3, #12]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80010b8:	e9c3 0005 	strd	r0, r0, [r3, #20]
  hcomp1.Instance = COMP1;
 80010bc:	601a      	str	r2, [r3, #0]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80010be:	4618      	mov	r0, r3
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 80010c0:	2240      	movs	r2, #64	; 0x40
 80010c2:	609a      	str	r2, [r3, #8]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80010c4:	f004 f880 	bl	80051c8 <HAL_COMP_Init>
 80010c8:	b108      	cbz	r0, 80010ce <main+0x27e>
 80010ca:	b672      	cpsid	i
  while (1)
 80010cc:	e7fe      	b.n	80010cc <main+0x27c>
  hcomp2.Instance = COMP2;
 80010ce:	4823      	ldr	r0, [pc, #140]	; (800115c <main+0x30c>)
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80010d0:	4d23      	ldr	r5, [pc, #140]	; (8001160 <main+0x310>)
 80010d2:	2300      	movs	r3, #0
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 80010d4:	2440      	movs	r4, #64	; 0x40
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80010d6:	e9c0 5300 	strd	r5, r3, [r0]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80010da:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80010de:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 80010e2:	6084      	str	r4, [r0, #8]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80010e4:	f004 f870 	bl	80051c8 <HAL_COMP_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	b108      	cbz	r0, 80010f0 <main+0x2a0>
 80010ec:	b672      	cpsid	i
  while (1)
 80010ee:	e7fe      	b.n	80010ee <main+0x29e>
  hcomp4.Instance = COMP4;
 80010f0:	481c      	ldr	r0, [pc, #112]	; (8001164 <main+0x314>)
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 80010f2:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80010f6:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80010fa:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp4.Instance = COMP4;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <main+0x318>)
 8001100:	6003      	str	r3, [r0, #0]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8001102:	f004 f861 	bl	80051c8 <HAL_COMP_Init>
 8001106:	b108      	cbz	r0, 800110c <main+0x2bc>
 8001108:	b672      	cpsid	i
  while (1)
 800110a:	e7fe      	b.n	800110a <main+0x2ba>
  hcordic.Instance = CORDIC;
 800110c:	4817      	ldr	r0, [pc, #92]	; (800116c <main+0x31c>)
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <main+0x320>)
 8001110:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001112:	f004 f901 	bl	8005318 <HAL_CORDIC_Init>
 8001116:	4601      	mov	r1, r0
 8001118:	b370      	cbz	r0, 8001178 <main+0x328>
 800111a:	b672      	cpsid	i
  while (1)
 800111c:	e7fe      	b.n	800111c <main+0x2cc>
 800111e:	bf00      	nop
 8001120:	00000084 	.word	0x00000084
 8001124:	00000080 	.word	0x00000080
 8001128:	32601000 	.word	0x32601000
 800112c:	0000010f 	.word	0x0000010f
 8001130:	14f00020 	.word	0x14f00020
 8001134:	0000000c 	.word	0x0000000c
 8001138:	40021000 	.word	0x40021000
 800113c:	48000800 	.word	0x48000800
 8001140:	200008a0 	.word	0x200008a0
 8001144:	04300002 	.word	0x04300002
 8001148:	2000090c 	.word	0x2000090c
 800114c:	50000100 	.word	0x50000100
 8001150:	cb8c0000 	.word	0xcb8c0000
 8001154:	20000978 	.word	0x20000978
 8001158:	40010200 	.word	0x40010200
 800115c:	2000099c 	.word	0x2000099c
 8001160:	40010204 	.word	0x40010204
 8001164:	200009c0 	.word	0x200009c0
 8001168:	4001020c 	.word	0x4001020c
 800116c:	200009e4 	.word	0x200009e4
 8001170:	40020c00 	.word	0x40020c00
 8001174:	0c900008 	.word	0x0c900008
  hdac3.Instance = DAC3;
 8001178:	4da2      	ldr	r5, [pc, #648]	; (8001404 <main+0x5b4>)
  DAC_ChannelConfTypeDef sConfig = {0};
 800117a:	2230      	movs	r2, #48	; 0x30
 800117c:	a81e      	add	r0, sp, #120	; 0x78
 800117e:	f008 fe17 	bl	8009db0 <memset>
  hdac3.Instance = DAC3;
 8001182:	4ba1      	ldr	r3, [pc, #644]	; (8001408 <main+0x5b8>)
 8001184:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001186:	4628      	mov	r0, r5
 8001188:	f004 f95e 	bl	8005448 <HAL_DAC_Init>
 800118c:	4602      	mov	r2, r0
 800118e:	b108      	cbz	r0, 8001194 <main+0x344>
 8001190:	b672      	cpsid	i
  while (1)
 8001192:	e7fe      	b.n	8001192 <main+0x342>
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001194:	2302      	movs	r3, #2
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001196:	e9cd 0020 	strd	r0, r0, [sp, #128]	; 0x80
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800119a:	f8ad 007c 	strh.w	r0, [sp, #124]	; 0x7c
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800119e:	9022      	str	r0, [sp, #136]	; 0x88
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80011a0:	9025      	str	r0, [sp, #148]	; 0x94
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011a2:	a91e      	add	r1, sp, #120	; 0x78
 80011a4:	4628      	mov	r0, r5
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80011a6:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80011aa:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011ac:	f004 f962 	bl	8005474 <HAL_DAC_ConfigChannel>
 80011b0:	b108      	cbz	r0, 80011b6 <main+0x366>
 80011b2:	b672      	cpsid	i
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <main+0x364>
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80011b6:	4628      	mov	r0, r5
 80011b8:	2210      	movs	r2, #16
 80011ba:	a91e      	add	r1, sp, #120	; 0x78
 80011bc:	f004 f95a 	bl	8005474 <HAL_DAC_ConfigChannel>
 80011c0:	4603      	mov	r3, r0
 80011c2:	b108      	cbz	r0, 80011c8 <main+0x378>
 80011c4:	b672      	cpsid	i
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <main+0x376>
  hopamp1.Instance = OPAMP1;
 80011c8:	4890      	ldr	r0, [pc, #576]	; (800140c <main+0x5bc>)
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80011ca:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 80011ce:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80011d2:	6103      	str	r3, [r0, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 80011d4:	7503      	strb	r3, [r0, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80011d6:	6183      	str	r3, [r0, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80011d8:	62c3      	str	r3, [r0, #44]	; 0x2c
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80011da:	f44f 4540 	mov.w	r5, #49152	; 0xc000
  hopamp1.Instance = OPAMP1;
 80011de:	4b8c      	ldr	r3, [pc, #560]	; (8001410 <main+0x5c0>)
 80011e0:	6003      	str	r3, [r0, #0]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80011e2:	e9c0 6509 	strd	r6, r5, [r0, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80011e6:	f004 fe11 	bl	8005e0c <HAL_OPAMP_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	b108      	cbz	r0, 80011f2 <main+0x3a2>
 80011ee:	b672      	cpsid	i
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <main+0x3a0>
  hopamp2.Instance = OPAMP2;
 80011f2:	4888      	ldr	r0, [pc, #544]	; (8001414 <main+0x5c4>)
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80011f4:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80011f8:	6103      	str	r3, [r0, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 80011fa:	7503      	strb	r3, [r0, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80011fc:	6183      	str	r3, [r0, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80011fe:	62c3      	str	r3, [r0, #44]	; 0x2c
  hopamp2.Instance = OPAMP2;
 8001200:	4b85      	ldr	r3, [pc, #532]	; (8001418 <main+0x5c8>)
 8001202:	6003      	str	r3, [r0, #0]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001204:	e9c0 6509 	strd	r6, r5, [r0, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001208:	f004 fe00 	bl	8005e0c <HAL_OPAMP_Init>
 800120c:	b108      	cbz	r0, 8001212 <main+0x3c2>
 800120e:	b672      	cpsid	i
  while (1)
 8001210:	e7fe      	b.n	8001210 <main+0x3c0>
  hopamp3.Instance = OPAMP3;
 8001212:	4b82      	ldr	r3, [pc, #520]	; (800141c <main+0x5cc>)
 8001214:	4a82      	ldr	r2, [pc, #520]	; (8001420 <main+0x5d0>)
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001216:	6058      	str	r0, [r3, #4]
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001218:	e9c3 6509 	strd	r6, r5, [r3, #36]	; 0x24
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800121c:	6118      	str	r0, [r3, #16]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800121e:	6198      	str	r0, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001220:	62d8      	str	r0, [r3, #44]	; 0x2c
  hopamp3.Init.InternalOutput = ENABLE;
 8001222:	2501      	movs	r5, #1
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001224:	4618      	mov	r0, r3
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8001226:	609c      	str	r4, [r3, #8]
  hopamp3.Instance = OPAMP3;
 8001228:	601a      	str	r2, [r3, #0]
  hopamp3.Init.InternalOutput = ENABLE;
 800122a:	751d      	strb	r5, [r3, #20]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 800122c:	f004 fdee 	bl	8005e0c <HAL_OPAMP_Init>
 8001230:	4604      	mov	r4, r0
 8001232:	b108      	cbz	r0, 8001238 <main+0x3e8>
 8001234:	b672      	cpsid	i
  while (1)
 8001236:	e7fe      	b.n	8001236 <main+0x3e6>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001238:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 800123c:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001240:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
 8001244:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
 8001248:	e9cd 001a 	strd	r0, r0, [sp, #104]	; 0x68
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001250:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001254:	9014      	str	r0, [sp, #80]	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001256:	9008      	str	r0, [sp, #32]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001258:	900c      	str	r0, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 800125a:	901c      	str	r0, [sp, #112]	; 0x70
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800125c:	4601      	mov	r1, r0
 800125e:	2234      	movs	r2, #52	; 0x34
 8001260:	a81e      	add	r0, sp, #120	; 0x78
 8001262:	f008 fda5 	bl	8009db0 <memset>
  htim1.Instance = TIM1;
 8001266:	486f      	ldr	r0, [pc, #444]	; (8001424 <main+0x5d4>)
 8001268:	4b6f      	ldr	r3, [pc, #444]	; (8001428 <main+0x5d8>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 800126a:	6044      	str	r4, [r0, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126c:	6184      	str	r4, [r0, #24]
  htim1.Instance = TIM1;
 800126e:	6003      	str	r3, [r0, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8001270:	2420      	movs	r4, #32
 8001272:	f44f 53a6 	mov.w	r3, #5312	; 0x14c0
 8001276:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800127a:	f44f 7380 	mov.w	r3, #256	; 0x100
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 800127e:	6145      	str	r5, [r0, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001280:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001282:	f005 fc99 	bl	8006bb8 <HAL_TIM_Base_Init>
 8001286:	b108      	cbz	r0, 800128c <main+0x43c>
 8001288:	b672      	cpsid	i
  while (1)
 800128a:	e7fe      	b.n	800128a <main+0x43a>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800128c:	4865      	ldr	r0, [pc, #404]	; (8001424 <main+0x5d4>)
 800128e:	f005 fd57 	bl	8006d40 <HAL_TIM_PWM_Init>
 8001292:	b108      	cbz	r0, 8001298 <main+0x448>
 8001294:	b672      	cpsid	i
  while (1)
 8001296:	e7fe      	b.n	8001296 <main+0x446>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001298:	2206      	movs	r2, #6
 800129a:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800129c:	4861      	ldr	r0, [pc, #388]	; (8001424 <main+0x5d4>)
 800129e:	a910      	add	r1, sp, #64	; 0x40
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80012a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80012a4:	f005 ff46 	bl	8007134 <HAL_TIM_SlaveConfigSynchro>
 80012a8:	b108      	cbz	r0, 80012ae <main+0x45e>
 80012aa:	b672      	cpsid	i
  while (1)
 80012ac:	e7fe      	b.n	80012ac <main+0x45c>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	900a      	str	r0, [sp, #40]	; 0x28
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80012b0:	2270      	movs	r2, #112	; 0x70
 80012b2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012b4:	485b      	ldr	r0, [pc, #364]	; (8001424 <main+0x5d4>)
 80012b6:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80012b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012bc:	f006 fa20 	bl	8007700 <HAL_TIMEx_MasterConfigSynchronization>
 80012c0:	b108      	cbz	r0, 80012c6 <main+0x476>
 80012c2:	b672      	cpsid	i
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <main+0x474>
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80012c6:	900e      	str	r0, [sp, #56]	; 0x38
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80012c8:	2402      	movs	r4, #2
 80012ca:	2501      	movs	r5, #1
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80012cc:	4855      	ldr	r0, [pc, #340]	; (8001424 <main+0x5d4>)
 80012ce:	aa0c      	add	r2, sp, #48	; 0x30
 80012d0:	2102      	movs	r1, #2
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80012d2:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80012d6:	f006 faab 	bl	8007830 <HAL_TIMEx_ConfigBreakInput>
 80012da:	b108      	cbz	r0, 80012e0 <main+0x490>
 80012dc:	b672      	cpsid	i
  while (1)
 80012de:	e7fe      	b.n	80012de <main+0x48e>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 80012e0:	2404      	movs	r4, #4
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80012e2:	4850      	ldr	r0, [pc, #320]	; (8001424 <main+0x5d4>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 80012e4:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80012e6:	aa0c      	add	r2, sp, #48	; 0x30
 80012e8:	2102      	movs	r1, #2
 80012ea:	f006 faa1 	bl	8007830 <HAL_TIMEx_ConfigBreakInput>
 80012ee:	b108      	cbz	r0, 80012f4 <main+0x4a4>
 80012f0:	b672      	cpsid	i
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <main+0x4a2>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 80012f4:	2310      	movs	r3, #16
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80012f6:	aa0c      	add	r2, sp, #48	; 0x30
 80012f8:	484a      	ldr	r0, [pc, #296]	; (8001424 <main+0x5d4>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 80012fa:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80012fc:	2102      	movs	r1, #2
 80012fe:	f006 fa97 	bl	8007830 <HAL_TIMEx_ConfigBreakInput>
 8001302:	4602      	mov	r2, r0
 8001304:	b108      	cbz	r0, 800130a <main+0x4ba>
 8001306:	b672      	cpsid	i
  while (1)
 8001308:	e7fe      	b.n	8001308 <main+0x4b8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800130a:	2660      	movs	r6, #96	; 0x60
 800130c:	f44f 6726 	mov.w	r7, #2656	; 0xa60
 8001310:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001314:	901c      	str	r0, [sp, #112]	; 0x70
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001316:	2600      	movs	r6, #0
 8001318:	2700      	movs	r7, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800131a:	4842      	ldr	r0, [pc, #264]	; (8001424 <main+0x5d4>)
 800131c:	a916      	add	r1, sp, #88	; 0x58
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800131e:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 8001322:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001326:	f006 f8ed 	bl	8007504 <HAL_TIM_PWM_ConfigChannel>
 800132a:	b108      	cbz	r0, 8001330 <main+0x4e0>
 800132c:	b672      	cpsid	i
  while (1)
 800132e:	e7fe      	b.n	800132e <main+0x4de>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001330:	483c      	ldr	r0, [pc, #240]	; (8001424 <main+0x5d4>)
 8001332:	4622      	mov	r2, r4
 8001334:	a916      	add	r1, sp, #88	; 0x58
 8001336:	f006 f8e5 	bl	8007504 <HAL_TIM_PWM_ConfigChannel>
 800133a:	b108      	cbz	r0, 8001340 <main+0x4f0>
 800133c:	b672      	cpsid	i
  while (1)
 800133e:	e7fe      	b.n	800133e <main+0x4ee>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001340:	4838      	ldr	r0, [pc, #224]	; (8001424 <main+0x5d4>)
 8001342:	2208      	movs	r2, #8
 8001344:	a916      	add	r1, sp, #88	; 0x58
 8001346:	f006 f8dd 	bl	8007504 <HAL_TIM_PWM_ConfigChannel>
 800134a:	b108      	cbz	r0, 8001350 <main+0x500>
 800134c:	b672      	cpsid	i
  while (1)
 800134e:	e7fe      	b.n	800134e <main+0x4fe>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001350:	2270      	movs	r2, #112	; 0x70
 8001352:	f241 43bf 	movw	r3, #5311	; 0x14bf
 8001356:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800135a:	4832      	ldr	r0, [pc, #200]	; (8001424 <main+0x5d4>)
 800135c:	220c      	movs	r2, #12
 800135e:	a916      	add	r1, sp, #88	; 0x58
 8001360:	f006 f8d0 	bl	8007504 <HAL_TIM_PWM_ConfigChannel>
 8001364:	b108      	cbz	r0, 800136a <main+0x51a>
 8001366:	b672      	cpsid	i
  while (1)
 8001368:	e7fe      	b.n	8001368 <main+0x518>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800136a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800136e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001372:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8001376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800137a:	233f      	movs	r3, #63	; 0x3f
 800137c:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001386:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 800138a:	2200      	movs	r2, #0
 800138c:	2300      	movs	r3, #0
 800138e:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 8001392:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001396:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800139a:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 800139e:	2203      	movs	r2, #3
 80013a0:	2300      	movs	r3, #0
 80013a2:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013a6:	481f      	ldr	r0, [pc, #124]	; (8001424 <main+0x5d4>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013a8:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013aa:	a91e      	add	r1, sp, #120	; 0x78
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013ac:	932a      	str	r3, [sp, #168]	; 0xa8
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013ae:	f006 f9f1 	bl	8007794 <HAL_TIMEx_ConfigBreakDeadTime>
 80013b2:	4604      	mov	r4, r0
 80013b4:	b108      	cbz	r0, 80013ba <main+0x56a>
 80013b6:	b672      	cpsid	i
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <main+0x568>
  htim4.Instance = TIM4;
 80013ba:	4e1c      	ldr	r6, [pc, #112]	; (800142c <main+0x5dc>)
  HAL_TIM_MspPostInit(&htim1);
 80013bc:	4819      	ldr	r0, [pc, #100]	; (8001424 <main+0x5d4>)
 80013be:	f002 fd6b 	bl	8003e98 <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 80013c2:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <main+0x5e0>)
 80013c4:	6033      	str	r3, [r6, #0]
  htim4.Init.Period = M1_PULSE_NBR;
 80013c6:	f640 73ff 	movw	r3, #4095	; 0xfff
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013ca:	2501      	movs	r5, #1
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 80013cc:	270c      	movs	r7, #12
  htim4.Init.Period = M1_PULSE_NBR;
 80013ce:	60f3      	str	r3, [r6, #12]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80013d0:	a91e      	add	r1, sp, #120	; 0x78
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013d2:	2303      	movs	r3, #3
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80013d4:	4630      	mov	r0, r6
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013d6:	931e      	str	r3, [sp, #120]	; 0x78
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d8:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013dc:	e9c6 4401 	strd	r4, r4, [r6, #4]
  TIM_Encoder_InitTypeDef sConfig = {0};
 80013e0:	941f      	str	r4, [sp, #124]	; 0x7c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e2:	9418      	str	r4, [sp, #96]	; 0x60
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e4:	6134      	str	r4, [r6, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e6:	61b4      	str	r4, [r6, #24]
  TIM_Encoder_InitTypeDef sConfig = {0};
 80013e8:	9421      	str	r4, [sp, #132]	; 0x84
 80013ea:	9423      	str	r4, [sp, #140]	; 0x8c
 80013ec:	9425      	str	r4, [sp, #148]	; 0x94
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013ee:	9520      	str	r5, [sp, #128]	; 0x80
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 80013f0:	9722      	str	r7, [sp, #136]	; 0x88
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013f2:	9524      	str	r5, [sp, #144]	; 0x90
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 80013f4:	9726      	str	r7, [sp, #152]	; 0x98
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80013f6:	f005 fd2b 	bl	8006e50 <HAL_TIM_Encoder_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	b1d0      	cbz	r0, 8001434 <main+0x5e4>
 80013fe:	b672      	cpsid	i
  while (1)
 8001400:	e7fe      	b.n	8001400 <main+0x5b0>
 8001402:	bf00      	nop
 8001404:	20000a0c 	.word	0x20000a0c
 8001408:	50001000 	.word	0x50001000
 800140c:	20000b44 	.word	0x20000b44
 8001410:	40010300 	.word	0x40010300
 8001414:	20000b80 	.word	0x20000b80
 8001418:	40010304 	.word	0x40010304
 800141c:	20000bbc 	.word	0x20000bbc
 8001420:	40010308 	.word	0x40010308
 8001424:	20000bf8 	.word	0x20000bf8
 8001428:	40012c00 	.word	0x40012c00
 800142c:	20000c90 	.word	0x20000c90
 8001430:	40000800 	.word	0x40000800
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001434:	4630      	mov	r0, r6
 8001436:	a916      	add	r1, sp, #88	; 0x58
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001438:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800143c:	f006 f960 	bl	8007700 <HAL_TIMEx_MasterConfigSynchronization>
 8001440:	b108      	cbz	r0, 8001446 <main+0x5f6>
 8001442:	b672      	cpsid	i
  while (1)
 8001444:	e7fe      	b.n	8001444 <main+0x5f4>
  huart2.Instance = USART2;
 8001446:	4c73      	ldr	r4, [pc, #460]	; (8001614 <main+0x7c4>)
  huart2.Init.BaudRate = 1843200;
 8001448:	4a73      	ldr	r2, [pc, #460]	; (8001618 <main+0x7c8>)
  huart2.Init.Parity = UART_PARITY_NONE;
 800144a:	6120      	str	r0, [r4, #16]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800144c:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001450:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001454:	e9c4 0008 	strd	r0, r0, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001458:	62a0      	str	r0, [r4, #40]	; 0x28
  huart2.Init.BaudRate = 1843200;
 800145a:	f44f 13e1 	mov.w	r3, #1843200	; 0x1c2000
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800145e:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 1843200;
 8001460:	e9c4 2300 	strd	r2, r3, [r4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001464:	6167      	str	r7, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001466:	f006 fc8d 	bl	8007d84 <HAL_UART_Init>
 800146a:	4601      	mov	r1, r0
 800146c:	b108      	cbz	r0, 8001472 <main+0x622>
 800146e:	b672      	cpsid	i
  while (1)
 8001470:	e7fe      	b.n	8001470 <main+0x620>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001472:	4620      	mov	r0, r4
 8001474:	f006 fd10 	bl	8007e98 <HAL_UARTEx_SetTxFifoThreshold>
 8001478:	4601      	mov	r1, r0
 800147a:	b108      	cbz	r0, 8001480 <main+0x630>
 800147c:	b672      	cpsid	i
  while (1)
 800147e:	e7fe      	b.n	800147e <main+0x62e>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001480:	4620      	mov	r0, r4
 8001482:	f006 fd4b 	bl	8007f1c <HAL_UARTEx_SetRxFifoThreshold>
 8001486:	b108      	cbz	r0, 800148c <main+0x63c>
 8001488:	b672      	cpsid	i
  while (1)
 800148a:	e7fe      	b.n	800148a <main+0x63a>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800148c:	4620      	mov	r0, r4
 800148e:	f006 fce5 	bl	8007e5c <HAL_UARTEx_DisableFifoMode>
 8001492:	4604      	mov	r4, r0
 8001494:	b108      	cbz	r0, 800149a <main+0x64a>
 8001496:	b672      	cpsid	i
  while (1)
 8001498:	e7fe      	b.n	8001498 <main+0x648>
  MX_MotorControl_Init();
 800149a:	f000 ff4f 	bl	800233c <MX_MotorControl_Init>
  hfdcan1.Instance = FDCAN1;
 800149e:	485f      	ldr	r0, [pc, #380]	; (800161c <main+0x7cc>)
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80014a0:	2202      	movs	r2, #2
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80014a2:	e9c0 2207 	strd	r2, r2, [r0, #28]
  hfdcan1.Instance = FDCAN1;
 80014a6:	4a5e      	ldr	r2, [pc, #376]	; (8001620 <main+0x7d0>)
 80014a8:	6002      	str	r2, [r0, #0]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80014aa:	8204      	strh	r4, [r0, #16]
  hfdcan1.Init.NominalPrescaler = 17;
 80014ac:	2211      	movs	r2, #17
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80014ae:	e9c0 5401 	strd	r5, r4, [r0, #4]
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80014b2:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
  hfdcan1.Init.DataTimeSeg2 = 1;
 80014b6:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
  hfdcan1.Init.ExtFiltersNbr = 0;
 80014ba:	e9c0 540d 	strd	r5, r4, [r0, #52]	; 0x34
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80014be:	60c4      	str	r4, [r0, #12]
  hfdcan1.Init.ProtocolException = DISABLE;
 80014c0:	7484      	strb	r4, [r0, #18]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80014c2:	6185      	str	r5, [r0, #24]
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80014c4:	63c4      	str	r4, [r0, #60]	; 0x3c
  hfdcan1.Init.NominalPrescaler = 17;
 80014c6:	6142      	str	r2, [r0, #20]
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80014c8:	f004 f94e 	bl	8005768 <HAL_FDCAN_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	b108      	cbz	r0, 80014d4 <main+0x684>
 80014d0:	b672      	cpsid	i
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <main+0x682>
  htim2.Instance = TIM2;
 80014d4:	4c53      	ldr	r4, [pc, #332]	; (8001624 <main+0x7d4>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d6:	9018      	str	r0, [sp, #96]	; 0x60
  htim2.Instance = TIM2;
 80014d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014dc:	6022      	str	r2, [r4, #0]
  htim2.Init.Prescaler = 169;
 80014de:	22a9      	movs	r2, #169	; 0xa9
 80014e0:	6062      	str	r2, [r4, #4]
  htim2.Init.Period = 199;
 80014e2:	22c7      	movs	r2, #199	; 0xc7
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e4:	e9cd 001e 	strd	r0, r0, [sp, #120]	; 0x78
 80014e8:	e9cd 0020 	strd	r0, r0, [sp, #128]	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ec:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
  htim2.Init.Period = 199;
 80014f0:	e9c4 0202 	strd	r0, r2, [r4, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014f4:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f6:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f8:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014fa:	f005 fb5d 	bl	8006bb8 <HAL_TIM_Base_Init>
 80014fe:	b108      	cbz	r0, 8001504 <main+0x6b4>
 8001500:	b672      	cpsid	i
  while (1)
 8001502:	e7fe      	b.n	8001502 <main+0x6b2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001508:	a91e      	add	r1, sp, #120	; 0x78
 800150a:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150c:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800150e:	f005 fd3d 	bl	8006f8c <HAL_TIM_ConfigClockSource>
 8001512:	b108      	cbz	r0, 8001518 <main+0x6c8>
 8001514:	b672      	cpsid	i
  while (1)
 8001516:	e7fe      	b.n	8001516 <main+0x6c6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001518:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800151a:	4842      	ldr	r0, [pc, #264]	; (8001624 <main+0x7d4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151c:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800151e:	a916      	add	r1, sp, #88	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001520:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001522:	f006 f8ed 	bl	8007700 <HAL_TIMEx_MasterConfigSynchronization>
 8001526:	4604      	mov	r4, r0
 8001528:	b108      	cbz	r0, 800152e <main+0x6de>
 800152a:	b672      	cpsid	i
  while (1)
 800152c:	e7fe      	b.n	800152c <main+0x6dc>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 800152e:	2103      	movs	r1, #3
 8001530:	2201      	movs	r2, #1
 8001532:	2026      	movs	r0, #38	; 0x26
 8001534:	f003 ff1c 	bl	8005370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001538:	2026      	movs	r0, #38	; 0x26
 800153a:	f003 ff57 	bl	80053ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800153e:	4622      	mov	r2, r4
 8001540:	2103      	movs	r1, #3
 8001542:	200b      	movs	r0, #11
 8001544:	f003 ff14 	bl	8005370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001548:	200b      	movs	r0, #11
 800154a:	f003 ff4f 	bl	80053ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 800154e:	2201      	movs	r2, #1
 8001550:	2104      	movs	r1, #4
 8001552:	2018      	movs	r0, #24
 8001554:	f003 ff0c 	bl	8005370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001558:	2018      	movs	r0, #24
 800155a:	f003 ff47 	bl	80053ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800155e:	4622      	mov	r2, r4
 8001560:	4621      	mov	r1, r4
 8001562:	2019      	movs	r0, #25
 8001564:	f003 ff04 	bl	8005370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001568:	2019      	movs	r0, #25
 800156a:	f003 ff3f 	bl	80053ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 800156e:	4622      	mov	r2, r4
 8001570:	2102      	movs	r1, #2
 8001572:	2012      	movs	r0, #18
 8001574:	f003 fefc 	bl	8005370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001578:	2012      	movs	r0, #18
 800157a:	f003 ff37 	bl	80053ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 800157e:	4622      	mov	r2, r4
 8001580:	2103      	movs	r1, #3
 8001582:	201e      	movs	r0, #30
 8001584:	f003 fef4 	bl	8005370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001588:	201e      	movs	r0, #30
 800158a:	f003 ff2f 	bl	80053ec <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim2);
 800158e:	4825      	ldr	r0, [pc, #148]	; (8001624 <main+0x7d4>)
  q_d = get_encoder_position();
 8001590:	4d25      	ldr	r5, [pc, #148]	; (8001628 <main+0x7d8>)
 8001592:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8001640 <main+0x7f0>
 8001596:	4f25      	ldr	r7, [pc, #148]	; (800162c <main+0x7dc>)
  HAL_TIM_Base_Start_IT(&htim2);
 8001598:	f005 fb96 	bl	8006cc8 <HAL_TIM_Base_Start_IT>
  cmd.q = 1500;
 800159c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80015a0:	901e      	str	r0, [sp, #120]	; 0x78
  MC_SetCurrentReferenceMotor1(cmd);
 80015a2:	f000 f857 	bl	8001654 <MC_SetCurrentReferenceMotor1>
  MC_StartMotor1();
 80015a6:	f000 f84f 	bl	8001648 <MC_StartMotor1>
	return (enc_index*M1_PULSE_NBR + (int32_t) TIM4->CNT);
 80015aa:	4921      	ldr	r1, [pc, #132]	; (8001630 <main+0x7e0>)
 80015ac:	4a21      	ldr	r2, [pc, #132]	; (8001634 <main+0x7e4>)
 80015ae:	680b      	ldr	r3, [r1, #0]
 80015b0:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80015b2:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 80015b6:	4403      	add	r3, r0
  old_position = get_encoder_position();
 80015b8:	481f      	ldr	r0, [pc, #124]	; (8001638 <main+0x7e8>)
 80015ba:	6003      	str	r3, [r0, #0]
	return (enc_index*M1_PULSE_NBR + (int32_t) TIM4->CNT);
 80015bc:	680b      	ldr	r3, [r1, #0]
 80015be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015c0:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 80015c4:	4413      	add	r3, r2
  q_d = get_encoder_position();
 80015c6:	602b      	str	r3, [r5, #0]
  int32_t start = HAL_GetTick();
 80015c8:	f002 ff16 	bl	80043f8 <HAL_GetTick>
  memset(compensation,0,sizeof(compensation));
 80015cc:	481b      	ldr	r0, [pc, #108]	; (800163c <main+0x7ec>)
 80015ce:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80015d2:	4621      	mov	r1, r4
 80015d4:	f008 fbec 	bl	8009db0 <memset>
		  cmd.q = 0;
 80015d8:	4626      	mov	r6, r4
	  if(MC_GetOccurredFaultsMotor1())
 80015da:	f000 f84b 	bl	8001674 <MC_GetOccurredFaultsMotor1>
 80015de:	b170      	cbz	r0, 80015fe <main+0x7ae>
		  MC_AcknowledgeFaultMotor1();
 80015e0:	f000 f842 	bl	8001668 <MC_AcknowledgeFaultMotor1>
		  HAL_Delay(100);
 80015e4:	2064      	movs	r0, #100	; 0x64
 80015e6:	f002 ff0d 	bl	8004404 <HAL_Delay>
		  MC_SetCurrentReferenceMotor1(cmd);
 80015ea:	2000      	movs	r0, #0
		  cmd.q = 0;
 80015ec:	961e      	str	r6, [sp, #120]	; 0x78
		  MC_SetCurrentReferenceMotor1(cmd);
 80015ee:	f000 f831 	bl	8001654 <MC_SetCurrentReferenceMotor1>
		  MC_StartMotor1();
 80015f2:	f000 f829 	bl	8001648 <MC_StartMotor1>
		  HAL_Delay(2000);
 80015f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015fa:	f002 ff03 	bl	8004404 <HAL_Delay>
	  vel_gain = 5;
 80015fe:	2305      	movs	r3, #5
 8001600:	f8c8 3000 	str.w	r3, [r8]
	  HAL_Delay(100);
 8001604:	2064      	movs	r0, #100	; 0x64
	  pos_gain = 6;
 8001606:	2306      	movs	r3, #6
 8001608:	603b      	str	r3, [r7, #0]
	  q_d = cnt;
 800160a:	602c      	str	r4, [r5, #0]
	  cnt++;
 800160c:	3401      	adds	r4, #1
	  HAL_Delay(100);
 800160e:	f002 fef9 	bl	8004404 <HAL_Delay>
	  if(MC_GetOccurredFaultsMotor1())
 8001612:	e7e2      	b.n	80015da <main+0x78a>
 8001614:	20000cdc 	.word	0x20000cdc
 8001618:	40004400 	.word	0x40004400
 800161c:	20000ae0 	.word	0x20000ae0
 8001620:	40006400 	.word	0x40006400
 8001624:	20000c44 	.word	0x20000c44
 8001628:	20000d78 	.word	0x20000d78
 800162c:	20000d70 	.word	0x20000d70
 8001630:	20001fdc 	.word	0x20001fdc
 8001634:	40000800 	.word	0x40000800
 8001638:	20000d6c 	.word	0x20000d6c
 800163c:	200004a0 	.word	0x200004a0
 8001640:	20000d8c 	.word	0x20000d8c

08001644 <Error_Handler>:
 8001644:	b672      	cpsid	i
  while (1)
 8001646:	e7fe      	b.n	8001646 <Error_Handler+0x2>

08001648 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8001648:	4b01      	ldr	r3, [pc, #4]	; (8001650 <MC_StartMotor1+0x8>)
 800164a:	6818      	ldr	r0, [r3, #0]
 800164c:	f000 b89a 	b.w	8001784 <MCI_StartMotor>
 8001650:	20001f80 	.word	0x20001f80

08001654 <MC_SetCurrentReferenceMotor1>:
  *
  * @param  Iqdref current reference in the Direct-Quadratic reference frame. Expressed
  *         in the qd_t format.
  */
__weak void MC_SetCurrentReferenceMotor1( qd_t Iqdref )
{
 8001654:	b082      	sub	sp, #8
	MCI_SetCurrentReferences( pMCI[M1], Iqdref );
 8001656:	4b03      	ldr	r3, [pc, #12]	; (8001664 <MC_SetCurrentReferenceMotor1+0x10>)
{
 8001658:	9001      	str	r0, [sp, #4]
	MCI_SetCurrentReferences( pMCI[M1], Iqdref );
 800165a:	4601      	mov	r1, r0
 800165c:	6818      	ldr	r0, [r3, #0]
}
 800165e:	b002      	add	sp, #8
	MCI_SetCurrentReferences( pMCI[M1], Iqdref );
 8001660:	f000 b83a 	b.w	80016d8 <MCI_SetCurrentReferences>
 8001664:	20001f80 	.word	0x20001f80

08001668 <MC_AcknowledgeFaultMotor1>:
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1( void )
{
	return MCI_FaultAcknowledged( pMCI[M1] );
 8001668:	4b01      	ldr	r3, [pc, #4]	; (8001670 <MC_AcknowledgeFaultMotor1+0x8>)
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	f000 b8c0 	b.w	80017f0 <MCI_FaultAcknowledged>
 8001670:	20001f80 	.word	0x20001f80

08001674 <MC_GetOccurredFaultsMotor1>:
 * See @ref fault_codes "Motor Control Faults" for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
	return MCI_GetOccurredFaults( pMCI[M1] );
 8001674:	4b01      	ldr	r3, [pc, #4]	; (800167c <MC_GetOccurredFaultsMotor1+0x8>)
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	f000 b880 	b.w	800177c <MCI_GetOccurredFaults>
 800167c:	20001f80 	.word	0x20001f80

08001680 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */
__weak uint8_t MC_ProfilerCommand (uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return MCP_CMD_UNKNOWN;
}
 8001680:	2002      	movs	r0, #2
 8001682:	4770      	bx	lr

08001684 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop

08001688 <MC_APP_PostMediumFrequencyHook_M1>:
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop

0800168c <MCI_Init>:
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 800168c:	f04f 0c00 	mov.w	ip, #0
    pHandle->pFOCVars = pFOCVars;
 8001690:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pPWM = pPWMHandle;
 8001694:	6083      	str	r3, [r0, #8]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001696:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = 0;
 800169a:	f8c0 c00e 	str.w	ip, [r0, #14]
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
 800169e:	f8a0 c016 	strh.w	ip, [r0, #22]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 80016a2:	f880 c01e 	strb.w	ip, [r0, #30]
    pHandle->DirectCommand = MCI_NO_COMMAND;
 80016a6:	f8a0 c018 	strh.w	ip, [r0, #24]
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 80016aa:	f8c0 c01a 	str.w	ip, [r0, #26]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80016ae:	4770      	bx	lr

080016b0 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80016b0:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80016b4:	f240 3301 	movw	r3, #769	; 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80016b8:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 80016bc:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 80016be:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80016c0:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80016c2:	4770      	bx	lr

080016c4 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 80016c4:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80016c8:	f240 4301 	movw	r3, #1025	; 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 80016cc:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 80016d0:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 80016d2:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80016d4:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80016d6:	4770      	bx	lr

080016d8 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 80016d8:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 80016da:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80016dc:	f240 4301 	movw	r3, #1025	; 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 80016e0:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 80016e2:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80016e6:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80016e8:	b002      	add	sp, #8
 80016ea:	4770      	bx	lr

080016ec <MCI_FaultProcessing>:
 * @retval State_t New state machine state after fault processing
 */
__weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
{
  /* Set current errors */
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80016ec:	8b43      	ldrh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 80016ee:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80016f2:	430b      	orrs	r3, r1
 80016f4:	ea23 0302 	bic.w	r3, r3, r2
  pHandle->PastFaults |= hSetErrors;
 80016f8:	ea41 010c 	orr.w	r1, r1, ip
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80016fc:	8343      	strh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 80016fe:	8381      	strh	r1, [r0, #28]

  return;
}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop

08001704 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001704:	7f83      	ldrb	r3, [r0, #30]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d000      	beq.n	800170c <MCI_ExecBufferedCommands+0x8>
 800170a:	4770      	bx	lr
{
 800170c:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 800170e:	7b02      	ldrb	r2, [r0, #12]
 8001710:	2a02      	cmp	r2, #2
 8001712:	4604      	mov	r4, r0
 8001714:	d006      	beq.n	8001724 <MCI_ExecBufferedCommands+0x20>
 8001716:	2a03      	cmp	r2, #3
 8001718:	d026      	beq.n	8001768 <MCI_ExecBufferedCommands+0x64>
 800171a:	2a01      	cmp	r2, #1
 800171c:	d015      	beq.n	800174a <MCI_ExecBufferedCommands+0x46>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 800171e:	2303      	movs	r3, #3
 8001720:	77a3      	strb	r3, [r4, #30]
      }
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001722:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001724:	6843      	ldr	r3, [r0, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 800172c:	6800      	ldr	r0, [r0, #0]
 800172e:	2104      	movs	r1, #4
 8001730:	f008 fa1e 	bl	8009b70 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8001734:	8ae2      	ldrh	r2, [r4, #22]
 8001736:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 800173a:	6820      	ldr	r0, [r4, #0]
 800173c:	f008 fa1c 	bl	8009b78 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8001740:	2800      	cmp	r0, #0
 8001742:	d0ec      	beq.n	800171e <MCI_ExecBufferedCommands+0x1a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8001744:	2302      	movs	r3, #2
 8001746:	77a3      	strb	r3, [r4, #30]
}
 8001748:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800174a:	6843      	ldr	r3, [r0, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8001752:	6800      	ldr	r0, [r0, #0]
 8001754:	2103      	movs	r1, #3
 8001756:	f008 fa0b 	bl	8009b70 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 800175a:	8ae2      	ldrh	r2, [r4, #22]
 800175c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001760:	6820      	ldr	r0, [r4, #0]
 8001762:	f008 fa09 	bl	8009b78 <STC_ExecRamp>
          break;
 8001766:	e7eb      	b.n	8001740 <MCI_ExecBufferedCommands+0x3c>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001768:	6842      	ldr	r2, [r0, #4]
 800176a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 800176e:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8001772:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 8001774:	e7e6      	b.n	8001744 <MCI_ExecBufferedCommands+0x40>
 8001776:	bf00      	nop

08001778 <MCI_GetSTMState>:
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak MCI_State_t  MCI_GetSTMState(MCI_Handle_t *pHandle)
{
  return (pHandle->State);
}
 8001778:	7e40      	ldrb	r0, [r0, #25]
 800177a:	4770      	bx	lr

0800177c <MCI_GetOccurredFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->PastFaults);
}
 800177c:	8b80      	ldrh	r0, [r0, #28]
 800177e:	4770      	bx	lr

08001780 <MCI_GetCurrentFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->CurrentFaults);
}
 8001780:	8b40      	ldrh	r0, [r0, #26]
 8001782:	4770      	bx	lr

08001784 <MCI_StartMotor>:
{
 8001784:	b510      	push	{r4, lr}
 8001786:	4604      	mov	r4, r0
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001788:	f7ff fff6 	bl	8001778 <MCI_GetSTMState>
 800178c:	b108      	cbz	r0, 8001792 <MCI_StartMotor+0xe>
    RetVal = false;
 800178e:	2000      	movs	r0, #0
}
 8001790:	bd10      	pop	{r4, pc}
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001792:	4620      	mov	r0, r4
 8001794:	f7ff fff2 	bl	800177c <MCI_GetOccurredFaults>
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001798:	2800      	cmp	r0, #0
 800179a:	d1f8      	bne.n	800178e <MCI_StartMotor+0xa>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 800179c:	4620      	mov	r0, r4
 800179e:	f7ff ffef 	bl	8001780 <MCI_GetCurrentFaults>
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80017a2:	2800      	cmp	r0, #0
 80017a4:	d1f3      	bne.n	800178e <MCI_StartMotor+0xa>
    pHandle->DirectCommand = MCI_START;
 80017a6:	2001      	movs	r0, #1
 80017a8:	7620      	strb	r0, [r4, #24]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80017aa:	77a0      	strb	r0, [r4, #30]
}
 80017ac:	bd10      	pop	{r4, pc}
 80017ae:	bf00      	nop

080017b0 <MCI_StopMotor>:
{
 80017b0:	b538      	push	{r3, r4, r5, lr}
 80017b2:	4605      	mov	r5, r0
  State = MCI_GetSTMState(pHandle);
 80017b4:	f7ff ffe0 	bl	8001778 <MCI_GetSTMState>
  if (IDLE == State  || ICLWAIT == State)
 80017b8:	b150      	cbz	r0, 80017d0 <MCI_StopMotor+0x20>
 80017ba:	f1b0 040c 	subs.w	r4, r0, #12
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80017be:	4628      	mov	r0, r5
  if (IDLE == State  || ICLWAIT == State)
 80017c0:	bf18      	it	ne
 80017c2:	2401      	movne	r4, #1
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80017c4:	f7ff ffda 	bl	800177c <MCI_GetOccurredFaults>
 80017c8:	b140      	cbz	r0, 80017dc <MCI_StopMotor+0x2c>
    RetVal = false;
 80017ca:	2400      	movs	r4, #0
}
 80017cc:	4620      	mov	r0, r4
 80017ce:	bd38      	pop	{r3, r4, r5, pc}
    status = false;
 80017d0:	4604      	mov	r4, r0
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80017d2:	4628      	mov	r0, r5
 80017d4:	f7ff ffd2 	bl	800177c <MCI_GetOccurredFaults>
 80017d8:	2800      	cmp	r0, #0
 80017da:	d1f6      	bne.n	80017ca <MCI_StopMotor+0x1a>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80017dc:	4628      	mov	r0, r5
 80017de:	f7ff ffcf 	bl	8001780 <MCI_GetCurrentFaults>
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80017e2:	2800      	cmp	r0, #0
 80017e4:	d1f1      	bne.n	80017ca <MCI_StopMotor+0x1a>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80017e6:	2c00      	cmp	r4, #0
 80017e8:	d0ef      	beq.n	80017ca <MCI_StopMotor+0x1a>
    pHandle->DirectCommand = MCI_STOP;
 80017ea:	2305      	movs	r3, #5
 80017ec:	762b      	strb	r3, [r5, #24]
    RetVal = true;
 80017ee:	e7ed      	b.n	80017cc <MCI_StopMotor+0x1c>

080017f0 <MCI_FaultAcknowledged>:
{
 80017f0:	b510      	push	{r4, lr}
 80017f2:	4604      	mov	r4, r0
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80017f4:	f7ff ffc0 	bl	8001778 <MCI_GetSTMState>
 80017f8:	280b      	cmp	r0, #11
 80017fa:	d001      	beq.n	8001800 <MCI_FaultAcknowledged+0x10>
    RetVal = false;
 80017fc:	2000      	movs	r0, #0
}
 80017fe:	bd10      	pop	{r4, pc}
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001800:	4620      	mov	r0, r4
 8001802:	f7ff ffbd 	bl	8001780 <MCI_GetCurrentFaults>
 8001806:	2800      	cmp	r0, #0
 8001808:	d1f8      	bne.n	80017fc <MCI_FaultAcknowledged+0xc>
    pHandle->DirectCommand = MCI_ACK_FAULTS;
 800180a:	2302      	movs	r3, #2
 800180c:	7623      	strb	r3, [r4, #24]
    pHandle->PastFaults = MC_NO_FAULTS;
 800180e:	83a0      	strh	r0, [r4, #28]
    RetVal = true;
 8001810:	2001      	movs	r0, #1
}
 8001812:	bd10      	pop	{r4, pc}

08001814 <MCI_GetFaultState>:
  */
__weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle)
{
  uint32_t LocalFaultState;

  LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8001814:	8b83      	ldrh	r3, [r0, #28]
  LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8001816:	8b40      	ldrh	r0, [r0, #26]

  return (LocalFaultState);
}
 8001818:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop

08001820 <MCI_GetControlMode>:
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 8001820:	7fc0      	ldrb	r0, [r0, #31]
 8001822:	4770      	bx	lr

08001824 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8001824:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop

0800182c <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 800182c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop

08001834 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8001834:	8ac0      	ldrh	r0, [r0, #22]
 8001836:	4770      	bx	lr

08001838 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8001838:	6800      	ldr	r0, [r0, #0]
 800183a:	f008 b9e1 	b.w	8009c00 <STC_StopRamp>
 800183e:	bf00      	nop

08001840 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 8001840:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 8001842:	6800      	ldr	r0, [r0, #0]
 8001844:	f008 f982 	bl	8009b4c <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (temp_speed);
}
 8001848:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 800184c:	f008 b91e 	b.w	8009a8c <SPD_GetAvrgMecSpeedUnit>

08001850 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8001850:	6800      	ldr	r0, [r0, #0]
 8001852:	f008 b985 	b.w	8009b60 <STC_GetMecSpeedRefUnit>
 8001856:	bf00      	nop

08001858 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 8001858:	6842      	ldr	r2, [r0, #4]
 800185a:	6810      	ldr	r0, [r2, #0]
 800185c:	2300      	movs	r3, #0
 800185e:	b282      	uxth	r2, r0
 8001860:	f362 030f 	bfi	r3, r2, #0, #16
 8001864:	0c00      	lsrs	r0, r0, #16
 8001866:	f360 431f 	bfi	r3, r0, #16, #16
{
 800186a:	b082      	sub	sp, #8
#endif
}
 800186c:	4618      	mov	r0, r3
 800186e:	b002      	add	sp, #8
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop

08001874 <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 8001874:	6842      	ldr	r2, [r0, #4]
 8001876:	6850      	ldr	r0, [r2, #4]
 8001878:	2300      	movs	r3, #0
 800187a:	b282      	uxth	r2, r0
 800187c:	f362 030f 	bfi	r3, r2, #0, #16
 8001880:	0c00      	lsrs	r0, r0, #16
 8001882:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001886:	b082      	sub	sp, #8
#endif
}
 8001888:	4618      	mov	r0, r3
 800188a:	b002      	add	sp, #8
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop

08001890 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 8001890:	6842      	ldr	r2, [r0, #4]
 8001892:	68d0      	ldr	r0, [r2, #12]
 8001894:	2300      	movs	r3, #0
 8001896:	b282      	uxth	r2, r0
 8001898:	f362 030f 	bfi	r3, r2, #0, #16
 800189c:	0c00      	lsrs	r0, r0, #16
 800189e:	f360 431f 	bfi	r3, r0, #16, #16
{
 80018a2:	b082      	sub	sp, #8
#endif
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	b002      	add	sp, #8
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop

080018ac <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 80018ac:	6842      	ldr	r2, [r0, #4]
 80018ae:	6910      	ldr	r0, [r2, #16]
 80018b0:	2300      	movs	r3, #0
 80018b2:	b282      	uxth	r2, r0
 80018b4:	f362 030f 	bfi	r3, r2, #0, #16
 80018b8:	0c00      	lsrs	r0, r0, #16
 80018ba:	f360 431f 	bfi	r3, r0, #16, #16
{
 80018be:	b082      	sub	sp, #8
#endif
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	b002      	add	sp, #8
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop

080018c8 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 80018c8:	6842      	ldr	r2, [r0, #4]
 80018ca:	f8d2 0016 	ldr.w	r0, [r2, #22]
 80018ce:	2300      	movs	r3, #0
 80018d0:	b282      	uxth	r2, r0
 80018d2:	f362 030f 	bfi	r3, r2, #0, #16
 80018d6:	0c00      	lsrs	r0, r0, #16
 80018d8:	f360 431f 	bfi	r3, r0, #16, #16
{
 80018dc:	b082      	sub	sp, #8
#endif
}
 80018de:	4618      	mov	r0, r3
 80018e0:	b002      	add	sp, #8
 80018e2:	4770      	bx	lr

080018e4 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 80018e4:	6842      	ldr	r2, [r0, #4]
 80018e6:	f8d2 001a 	ldr.w	r0, [r2, #26]
 80018ea:	2300      	movs	r3, #0
 80018ec:	b282      	uxth	r2, r0
 80018ee:	f362 030f 	bfi	r3, r2, #0, #16
 80018f2:	0c00      	lsrs	r0, r0, #16
 80018f4:	f360 431f 	bfi	r3, r0, #16, #16
{
 80018f8:	b082      	sub	sp, #8
#endif
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	b002      	add	sp, #8
 80018fe:	4770      	bx	lr

08001900 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8001900:	6843      	ldr	r3, [r0, #4]
#endif
}
 8001902:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8001906:	4770      	bx	lr

08001908 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 8001908:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 800190a:	e9d0 0400 	ldrd	r0, r4, [r0]
 800190e:	f008 f9a5 	bl	8009c5c <STC_GetDefaultIqdref>
 8001912:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8001916:	8220      	strh	r0, [r4, #16]
 8001918:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800191a:	bd10      	pop	{r4, pc}

0800191c <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 800191c:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8001920:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 8001922:	fb13 f201 	smulbb	r2, r3, r1
{
 8001926:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 800192a:	fb10 f101 	smulbb	r1, r0, r1
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 800192e:	4250      	negs	r0, r2
 8001930:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8001934:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8001938:	b084      	sub	sp, #16
  if (wbeta_tmp > INT16_MAX)
 800193a:	da05      	bge.n	8001948 <MCM_Clarke+0x2c>
 800193c:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 800193e:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8001942:	da0c      	bge.n	800195e <MCM_Clarke+0x42>
 8001944:	4a09      	ldr	r2, [pc, #36]	; (800196c <MCM_Clarke+0x50>)
 8001946:	e001      	b.n	800194c <MCM_Clarke+0x30>
 8001948:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if (((int16_t )-32768) == Output.beta)
  {
    Output.beta = -32767;
  }

  return (Output);
 800194c:	b29b      	uxth	r3, r3
 800194e:	2000      	movs	r0, #0
 8001950:	f363 000f 	bfi	r0, r3, #0, #16
 8001954:	b293      	uxth	r3, r2
 8001956:	f363 401f 	bfi	r0, r3, #16, #16
}
 800195a:	b004      	add	sp, #16
 800195c:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 800195e:	4803      	ldr	r0, [pc, #12]	; (800196c <MCM_Clarke+0x50>)
 8001960:	b20a      	sxth	r2, r1
 8001962:	4282      	cmp	r2, r0
 8001964:	bfb8      	it	lt
 8001966:	4602      	movlt	r2, r0
 8001968:	e7f0      	b.n	800194c <MCM_Clarke+0x30>
 800196a:	bf00      	nop
 800196c:	ffff8001 	.word	0xffff8001

08001970 <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MCM_Trig_Functions+0x28>)
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8001972:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001976:	f04f 1260 	mov.w	r2, #6291552	; 0x600060
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 800197a:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 800197e:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8001980:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001982:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
 8001984:	2000      	movs	r0, #0
 8001986:	b29a      	uxth	r2, r3
 8001988:	f362 000f 	bfi	r0, r2, #0, #16
 800198c:	0c1b      	lsrs	r3, r3, #16
{
 800198e:	b082      	sub	sp, #8
  return (CosSin.Components); //cstat !UNION-type-punning
 8001990:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001994:	b002      	add	sp, #8
 8001996:	4770      	bx	lr
 8001998:	40020c00 	.word	0x40020c00

0800199c <MCM_Park>:
{
 800199c:	b530      	push	{r4, r5, lr}
 800199e:	b085      	sub	sp, #20
 80019a0:	4603      	mov	r3, r0
 80019a2:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80019a4:	4608      	mov	r0, r1
 80019a6:	141c      	asrs	r4, r3, #16
{
 80019a8:	9301      	str	r3, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80019aa:	f7ff ffe1 	bl	8001970 <MCM_Trig_Functions>
 80019ae:	b22d      	sxth	r5, r5
 80019b0:	fa0f fc80 	sxth.w	ip, r0
 80019b4:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 80019b6:	fb05 f10c 	mul.w	r1, r5, ip
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80019ba:	fb04 1113 	mls	r1, r4, r3, r1
  if (wqd_tmp > INT16_MAX)
 80019be:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80019c2:	da05      	bge.n	80019d0 <MCM_Park+0x34>
 80019c4:	13ca      	asrs	r2, r1, #15
  else if (wqd_tmp < (-32768))
 80019c6:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 80019ca:	da22      	bge.n	8001a12 <MCM_Park+0x76>
 80019cc:	4914      	ldr	r1, [pc, #80]	; (8001a20 <MCM_Park+0x84>)
 80019ce:	e001      	b.n	80019d4 <MCM_Park+0x38>
 80019d0:	f647 71ff 	movw	r1, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 80019d4:	fb0c f404 	mul.w	r4, ip, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80019d8:	fb05 4403 	mla	r4, r5, r3, r4
  if (wqd_tmp > INT16_MAX)
 80019dc:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80019e0:	ea4f 32e4 	mov.w	r2, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 80019e4:	da04      	bge.n	80019f0 <MCM_Park+0x54>
  else if (wqd_tmp < (-32768))
 80019e6:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 80019ea:	da0c      	bge.n	8001a06 <MCM_Park+0x6a>
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MCM_Park+0x84>)
 80019ee:	e001      	b.n	80019f4 <MCM_Park+0x58>
 80019f0:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return (Output);
 80019f4:	b28a      	uxth	r2, r1
 80019f6:	2000      	movs	r0, #0
 80019f8:	f362 000f 	bfi	r0, r2, #0, #16
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001a02:	b005      	add	sp, #20
 8001a04:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 8001a06:	4806      	ldr	r0, [pc, #24]	; (8001a20 <MCM_Park+0x84>)
 8001a08:	b213      	sxth	r3, r2
 8001a0a:	4283      	cmp	r3, r0
 8001a0c:	bfb8      	it	lt
 8001a0e:	4603      	movlt	r3, r0
 8001a10:	e7f0      	b.n	80019f4 <MCM_Park+0x58>
    hqd_tmp = ((int16_t)wqd_tmp);
 8001a12:	4903      	ldr	r1, [pc, #12]	; (8001a20 <MCM_Park+0x84>)
 8001a14:	b212      	sxth	r2, r2
 8001a16:	4291      	cmp	r1, r2
 8001a18:	bfb8      	it	lt
 8001a1a:	4611      	movlt	r1, r2
 8001a1c:	e7da      	b.n	80019d4 <MCM_Park+0x38>
 8001a1e:	bf00      	nop
 8001a20:	ffff8001 	.word	0xffff8001

08001a24 <MCM_Rev_Park>:
{
 8001a24:	b530      	push	{r4, r5, lr}
 8001a26:	b085      	sub	sp, #20
 8001a28:	4604      	mov	r4, r0
 8001a2a:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001a2c:	4608      	mov	r0, r1
{
 8001a2e:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001a30:	f7ff ff9e 	bl	8001970 <MCM_Trig_Functions>
 8001a34:	1424      	asrs	r4, r4, #16
 8001a36:	1402      	asrs	r2, r0, #16
 8001a38:	b22d      	sxth	r5, r5
 8001a3a:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8001a3c:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8001a40:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8001a44:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8001a48:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 8001a4c:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8001a50:	2000      	movs	r0, #0
 8001a52:	f363 000f 	bfi	r0, r3, #0, #16
 8001a56:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8001a5a:	f364 401f 	bfi	r0, r4, #16, #16
}
 8001a5e:	b005      	add	sp, #20
 8001a60:	bd30      	pop	{r4, r5, pc}
 8001a62:	bf00      	nop

08001a64 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8001a64:	2800      	cmp	r0, #0
 8001a66:	dd09      	ble.n	8001a7c <MCM_Sqrt+0x18>
 8001a68:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <MCM_Sqrt+0x1c>)
 8001a6c:	f240 1269 	movw	r2, #361	; 0x169
 8001a70:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8001a72:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001a74:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001a76:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 8001a78:	b662      	cpsie	i
}
 8001a7a:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8001a7c:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8001a7e:	4770      	bx	lr
 8001a80:	40020c00 	.word	0x40020c00

08001a84 <FOC_Clear>:
  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001a84:	2226      	movs	r2, #38	; 0x26
{
 8001a86:	b538      	push	{r3, r4, r5, lr}
 8001a88:	fb00 f202 	mul.w	r2, r0, r2
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001a8e:	2400      	movs	r4, #0
 8001a90:	509c      	str	r4, [r3, r2]
{
 8001a92:	4605      	mov	r5, r0
 8001a94:	f102 0108 	add.w	r1, r2, #8
 8001a98:	1898      	adds	r0, r3, r2
 8001a9a:	3210      	adds	r2, #16
 8001a9c:	4419      	add	r1, r3
 8001a9e:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001aa0:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001aa2:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001aa4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001aa8:	604c      	str	r4, [r1, #4]
 8001aaa:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001aac:	f8c3 4006 	str.w	r4, [r3, #6]
 8001ab0:	f8c3 400a 	str.w	r4, [r3, #10]
 8001ab4:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001ab8:	4621      	mov	r1, r4
 8001aba:	f006 fee3 	bl	8008884 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <FOC_Clear+0x68>)
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001ac6:	f006 fedd 	bl	8008884 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <FOC_Clear+0x6c>)
 8001acc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001ad0:	f008 f83e 	bl	8009b50 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001ad4:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <FOC_Clear+0x70>)
 8001ad6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001ade:	f000 bd95 	b.w	800260c <PWMC_SwitchOffPWM>
 8001ae2:	bf00      	nop
 8001ae4:	20000dbc 	.word	0x20000dbc
 8001ae8:	20000350 	.word	0x20000350
 8001aec:	2000034c 	.word	0x2000034c
 8001af0:	20000354 	.word	0x20000354
 8001af4:	20000df0 	.word	0x20000df0

08001af8 <MCboot>:
  if (MC_NULL == pMCIList)
 8001af8:	2800      	cmp	r0, #0
 8001afa:	d06b      	beq.n	8001bd4 <MCboot+0xdc>
{
 8001afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bMCBootCompleted = (uint8_t )0;
 8001b00:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8001c18 <MCboot+0x120>
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001b04:	f8df b114 	ldr.w	fp, [pc, #276]	; 8001c1c <MCboot+0x124>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8001b08:	4d33      	ldr	r5, [pc, #204]	; (8001bd8 <MCboot+0xe0>)
 8001b0a:	4e34      	ldr	r6, [pc, #208]	; (8001bdc <MCboot+0xe4>)
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001b0c:	4f34      	ldr	r7, [pc, #208]	; (8001be0 <MCboot+0xe8>)
{
 8001b0e:	b083      	sub	sp, #12
    bMCBootCompleted = (uint8_t )0;
 8001b10:	f04f 0800 	mov.w	r8, #0
 8001b14:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001b16:	4833      	ldr	r0, [pc, #204]	; (8001be4 <MCboot+0xec>)
 8001b18:	f8cb 0000 	str.w	r0, [fp]
    bMCBootCompleted = (uint8_t )0;
 8001b1c:	f889 8000 	strb.w	r8, [r9]
    R3_2_Init(&PWM_Handle_M1);
 8001b20:	f007 faec 	bl	80090fc <R3_2_Init>
    ASPEP_start(&aspepOverUartA);
 8001b24:	4830      	ldr	r0, [pc, #192]	; (8001be8 <MCboot+0xf0>)
 8001b26:	f7fe fd23 	bl	8000570 <ASPEP_start>
    startTimers();
 8001b2a:	f006 ff53 	bl	80089d4 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001b2e:	482f      	ldr	r0, [pc, #188]	; (8001bec <MCboot+0xf4>)
 8001b30:	f006 fe94 	bl	800885c <PID_HandleInit>
    ENC_Init (&ENCODER_M1);
 8001b34:	482e      	ldr	r0, [pc, #184]	; (8001bf0 <MCboot+0xf8>)
 8001b36:	f006 fab5 	bl	80080a4 <ENC_Init>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8001b3a:	6829      	ldr	r1, [r5, #0]
 8001b3c:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <MCboot+0xf8>)
 8001b3e:	4a2d      	ldr	r2, [pc, #180]	; (8001bf4 <MCboot+0xfc>)
 8001b40:	4630      	mov	r0, r6
 8001b42:	f006 fa63 	bl	800800c <EAC_Init>
    pEAC[M1] = &EncAlignCtrlM1;
 8001b46:	4b2c      	ldr	r3, [pc, #176]	; (8001bf8 <MCboot+0x100>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 8001b48:	4a29      	ldr	r2, [pc, #164]	; (8001bf0 <MCboot+0xf8>)
 8001b4a:	4928      	ldr	r1, [pc, #160]	; (8001bec <MCboot+0xf4>)
    pEAC[M1] = &EncAlignCtrlM1;
 8001b4c:	601e      	str	r6, [r3, #0]
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 8001b4e:	6828      	ldr	r0, [r5, #0]
    RVBS_Init(&BusVoltageSensor_M1);
 8001b50:	4e2a      	ldr	r6, [pc, #168]	; (8001bfc <MCboot+0x104>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 8001b52:	f007 ffe3 	bl	8009b1c <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 8001b56:	4827      	ldr	r0, [pc, #156]	; (8001bf4 <MCboot+0xfc>)
 8001b58:	f008 f8a4 	bl	8009ca4 <VSS_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8001b5c:	4828      	ldr	r0, [pc, #160]	; (8001c00 <MCboot+0x108>)
 8001b5e:	f006 fe7d 	bl	800885c <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8001b62:	4828      	ldr	r0, [pc, #160]	; (8001c04 <MCboot+0x10c>)
 8001b64:	f006 fe7a 	bl	800885c <PID_HandleInit>
    RVBS_Init(&BusVoltageSensor_M1);
 8001b68:	4630      	mov	r0, r6
 8001b6a:	f007 ff1d 	bl	80099a8 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001b6e:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <MCboot+0x110>)
    NTC_Init(&TempSensor_M1);
 8001b70:	4826      	ldr	r0, [pc, #152]	; (8001c0c <MCboot+0x114>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60de      	str	r6, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001b76:	4e26      	ldr	r6, [pc, #152]	; (8001c10 <MCboot+0x118>)
 8001b78:	609e      	str	r6, [r3, #8]
    NTC_Init(&TempSensor_M1);
 8001b7a:	f006 fe2f 	bl	80087dc <NTC_Init>
    REMNG_Init(pREMNG[M1]);
 8001b7e:	4825      	ldr	r0, [pc, #148]	; (8001c14 <MCboot+0x11c>)
 8001b80:	f007 ff78 	bl	8009a74 <REMNG_Init>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001b84:	f04f 0a01 	mov.w	sl, #1
    FOC_Clear(M1);
 8001b88:	4640      	mov	r0, r8
 8001b8a:	f7ff ff7b 	bl	8001a84 <FOC_Clear>
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001b8e:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001b90:	f886 a024 	strb.w	sl, [r6, #36]	; 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001b94:	f008 f862 	bl	8009c5c <STC_GetDefaultIqdref>
 8001b98:	6130      	str	r0, [r6, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001b9a:	6828      	ldr	r0, [r5, #0]
 8001b9c:	f008 f85e 	bl	8009c5c <STC_GetDefaultIqdref>
 8001ba0:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001ba4:	f8db 3000 	ldr.w	r3, [fp]
 8001ba8:	6829      	ldr	r1, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001baa:	82b0      	strh	r0, [r6, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001bac:	4632      	mov	r2, r6
 8001bae:	4638      	mov	r0, r7
 8001bb0:	f7ff fd6c 	bl	800168c <MCI_Init>
    MCI_ExecTorqueRamp(&Mci[M1], STC_GetDefaultIqdref(pSTC[M1]).q, 0);
 8001bb4:	6828      	ldr	r0, [r5, #0]
 8001bb6:	f008 f851 	bl	8009c5c <STC_GetDefaultIqdref>
 8001bba:	4642      	mov	r2, r8
 8001bbc:	b201      	sxth	r1, r0
 8001bbe:	4638      	mov	r0, r7
 8001bc0:	f7ff fd80 	bl	80016c4 <MCI_ExecTorqueRamp>
    pMCIList[M1] = &Mci[M1];
 8001bc4:	6027      	str	r7, [r4, #0]
    MC_APP_BootHook();
 8001bc6:	f7ff fd5d 	bl	8001684 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 8001bca:	f889 a000 	strb.w	sl, [r9]
}
 8001bce:	b003      	add	sp, #12
 8001bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000354 	.word	0x20000354
 8001bdc:	2000015c 	.word	0x2000015c
 8001be0:	20000d90 	.word	0x20000d90
 8001be4:	2000020c 	.word	0x2000020c
 8001be8:	200003bc 	.word	0x200003bc
 8001bec:	200001d0 	.word	0x200001d0
 8001bf0:	200000e0 	.word	0x200000e0
 8001bf4:	20000310 	.word	0x20000310
 8001bf8:	20000dec 	.word	0x20000dec
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	200001a4 	.word	0x200001a4
 8001c04:	20000178 	.word	0x20000178
 8001c08:	20000348 	.word	0x20000348
 8001c0c:	200002e8 	.word	0x200002e8
 8001c10:	20000dbc 	.word	0x20000dbc
 8001c14:	2000029c 	.word	0x2000029c
 8001c18:	20000de2 	.word	0x20000de2
 8001c1c:	20000df0 	.word	0x20000df0

08001c20 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop

08001c24 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001c24:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8001c26:	4c08      	ldr	r4, [pc, #32]	; (8001c48 <FOC_CalcCurrRef+0x24>)
 8001c28:	2326      	movs	r3, #38	; 0x26
 8001c2a:	fb03 4400 	mla	r4, r3, r0, r4
 8001c2e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001c32:	b103      	cbz	r3, 8001c36 <FOC_CalcCurrRef+0x12>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001c34:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <FOC_CalcCurrRef+0x28>)
 8001c38:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001c3c:	f007 ffe4 	bl	8009c08 <STC_CalcTorqueReference>
 8001c40:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001c42:	8220      	strh	r0, [r4, #16]
}
 8001c44:	bd10      	pop	{r4, pc}
 8001c46:	bf00      	nop
 8001c48:	20000dbc 	.word	0x20000dbc
 8001c4c:	20000354 	.word	0x20000354

08001c50 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001c50:	4b01      	ldr	r3, [pc, #4]	; (8001c58 <TSK_SetChargeBootCapDelayM1+0x8>)
 8001c52:	8018      	strh	r0, [r3, #0]
}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000de4 	.word	0x20000de4

08001c5c <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001c5e:	8818      	ldrh	r0, [r3, #0]
 8001c60:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001c62:	fab0 f080 	clz	r0, r0
 8001c66:	0940      	lsrs	r0, r0, #5
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000de4 	.word	0x20000de4

08001c70 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001c70:	4b01      	ldr	r3, [pc, #4]	; (8001c78 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001c72:	8018      	strh	r0, [r3, #0]
}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000de8 	.word	0x20000de8

08001c7c <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001c7e:	8818      	ldrh	r0, [r3, #0]
 8001c80:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001c82:	fab0 f080 	clz	r0, r0
 8001c86:	0940      	lsrs	r0, r0, #5
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000de8 	.word	0x20000de8

08001c90 <TSK_MediumFrequencyTaskM1>:
{
 8001c90:	b570      	push	{r4, r5, r6, lr}
  PQD_CalcElMotorPower(pMPM[M1]);
 8001c92:	4d9d      	ldr	r5, [pc, #628]	; (8001f08 <TSK_MediumFrequencyTaskM1+0x278>)
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 8001c94:	489d      	ldr	r0, [pc, #628]	; (8001f0c <TSK_MediumFrequencyTaskM1+0x27c>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001c96:	4c9e      	ldr	r4, [pc, #632]	; (8001f10 <TSK_MediumFrequencyTaskM1+0x280>)
{
 8001c98:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8001c9a:	2300      	movs	r3, #0
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 8001c9c:	f10d 0106 	add.w	r1, sp, #6
  int16_t wAux = 0;
 8001ca0:	f8ad 3006 	strh.w	r3, [sp, #6]
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 8001ca4:	f006 fa60 	bl	8008168 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8001ca8:	6828      	ldr	r0, [r5, #0]
 8001caa:	f006 fe63 	bl	8008974 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f7ff fd66 	bl	8001780 <MCI_GetCurrentFaults>
 8001cb4:	b118      	cbz	r0, 8001cbe <TSK_MediumFrequencyTaskM1+0x2e>
    Mci[M1].State = FAULT_NOW;
 8001cb6:	230a      	movs	r3, #10
 8001cb8:	7663      	strb	r3, [r4, #25]
}
 8001cba:	b002      	add	sp, #8
 8001cbc:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f7ff fd5c 	bl	800177c <MCI_GetOccurredFaults>
 8001cc4:	bb80      	cbnz	r0, 8001d28 <TSK_MediumFrequencyTaskM1+0x98>
      switch (Mci[M1].State)
 8001cc6:	7e63      	ldrb	r3, [r4, #25]
 8001cc8:	2b14      	cmp	r3, #20
 8001cca:	d8f6      	bhi.n	8001cba <TSK_MediumFrequencyTaskM1+0x2a>
 8001ccc:	a201      	add	r2, pc, #4	; (adr r2, 8001cd4 <TSK_MediumFrequencyTaskM1+0x44>)
 8001cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd2:	bf00      	nop
 8001cd4:	08001e69 	.word	0x08001e69
 8001cd8:	08001cbb 	.word	0x08001cbb
 8001cdc:	08001e1f 	.word	0x08001e1f
 8001ce0:	08001cbb 	.word	0x08001cbb
 8001ce4:	08001cbb 	.word	0x08001cbb
 8001ce8:	08001cbb 	.word	0x08001cbb
 8001cec:	08001e0b 	.word	0x08001e0b
 8001cf0:	08001cbb 	.word	0x08001cbb
 8001cf4:	08001dff 	.word	0x08001dff
 8001cf8:	08001cbb 	.word	0x08001cbb
 8001cfc:	08001d29 	.word	0x08001d29
 8001d00:	08001df1 	.word	0x08001df1
 8001d04:	08001cbb 	.word	0x08001cbb
 8001d08:	08001cbb 	.word	0x08001cbb
 8001d0c:	08001cbb 	.word	0x08001cbb
 8001d10:	08001cbb 	.word	0x08001cbb
 8001d14:	08001da1 	.word	0x08001da1
 8001d18:	08001d6f 	.word	0x08001d6f
 8001d1c:	08001cbb 	.word	0x08001cbb
 8001d20:	08001cbb 	.word	0x08001cbb
 8001d24:	08001d31 	.word	0x08001d31
      Mci[M1].State = FAULT_OVER;
 8001d28:	230b      	movs	r3, #11
 8001d2a:	7663      	strb	r3, [r4, #25]
}
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001d30:	7e23      	ldrb	r3, [r4, #24]
 8001d32:	2b05      	cmp	r3, #5
 8001d34:	f000 80a8 	beq.w	8001e88 <TSK_MediumFrequencyTaskM1+0x1f8>
            if (TSK_StopPermanencyTimeHasElapsedM1())
 8001d38:	f7ff ffa0 	bl	8001c7c <TSK_StopPermanencyTimeHasElapsedM1>
 8001d3c:	2800      	cmp	r0, #0
 8001d3e:	d0bc      	beq.n	8001cba <TSK_MediumFrequencyTaskM1+0x2a>
              ENC_Clear(&ENCODER_M1);
 8001d40:	4872      	ldr	r0, [pc, #456]	; (8001f0c <TSK_MediumFrequencyTaskM1+0x27c>)
 8001d42:	f006 f9e9 	bl	8008118 <ENC_Clear>
              R3_2_SwitchOnPWM( pwmcHandle[M1] );
 8001d46:	4b73      	ldr	r3, [pc, #460]	; (8001f14 <TSK_MediumFrequencyTaskM1+0x284>)
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	f007 f84f 	bl	8008dec <R3_2_SwitchOnPWM>
              FOC_InitAdditionalMethods(M1);
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f7ff ff66 	bl	8001c20 <FOC_InitAdditionalMethods>
              STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001d54:	4b70      	ldr	r3, [pc, #448]	; (8001f18 <TSK_MediumFrequencyTaskM1+0x288>)
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	f007 ff8e 	bl	8009c78 <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands( &Mci[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8001d5c:	486c      	ldr	r0, [pc, #432]	; (8001f10 <TSK_MediumFrequencyTaskM1+0x280>)
 8001d5e:	f7ff fcd1 	bl	8001704 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8001d62:	2000      	movs	r0, #0
 8001d64:	f7ff ff5e 	bl	8001c24 <FOC_CalcCurrRef>
              Mci[M1].State = RUN;
 8001d68:	2306      	movs	r3, #6
 8001d6a:	7663      	strb	r3, [r4, #25]
 8001d6c:	e7a5      	b.n	8001cba <TSK_MediumFrequencyTaskM1+0x2a>
            if (MCI_STOP == Mci[M1].DirectCommand)
 8001d6e:	7e23      	ldrb	r3, [r4, #24]
 8001d70:	2b05      	cmp	r3, #5
 8001d72:	f000 8089 	beq.w	8001e88 <TSK_MediumFrequencyTaskM1+0x1f8>
              if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8001d76:	4e67      	ldr	r6, [pc, #412]	; (8001f14 <TSK_MediumFrequencyTaskM1+0x284>)
 8001d78:	2101      	movs	r1, #1
 8001d7a:	6830      	ldr	r0, [r6, #0]
 8001d7c:	f000 fc4a 	bl	8002614 <PWMC_CurrentReadingCalibr>
 8001d80:	2800      	cmp	r0, #0
 8001d82:	d09a      	beq.n	8001cba <TSK_MediumFrequencyTaskM1+0x2a>
                if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8001d84:	7e23      	ldrb	r3, [r4, #24]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	f000 809e 	beq.w	8001ec8 <TSK_MediumFrequencyTaskM1+0x238>
                  R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001d8c:	6830      	ldr	r0, [r6, #0]
 8001d8e:	2100      	movs	r1, #0
 8001d90:	f007 f804 	bl	8008d9c <R3_2_TurnOnLowSides>
                  TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 8001d94:	2014      	movs	r0, #20
 8001d96:	f7ff ff5b 	bl	8001c50 <TSK_SetChargeBootCapDelayM1>
                  Mci[M1].State = CHARGE_BOOT_CAP;
 8001d9a:	2310      	movs	r3, #16
 8001d9c:	7663      	strb	r3, [r4, #25]
 8001d9e:	e78c      	b.n	8001cba <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001da0:	7e23      	ldrb	r3, [r4, #24]
 8001da2:	2b05      	cmp	r3, #5
 8001da4:	d070      	beq.n	8001e88 <TSK_MediumFrequencyTaskM1+0x1f8>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8001da6:	f7ff ff59 	bl	8001c5c <TSK_ChargeBootCapDelayHasElapsedM1>
 8001daa:	2800      	cmp	r0, #0
 8001dac:	d085      	beq.n	8001cba <TSK_MediumFrequencyTaskM1+0x2a>
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8001dae:	4d59      	ldr	r5, [pc, #356]	; (8001f14 <TSK_MediumFrequencyTaskM1+0x284>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001db0:	4e59      	ldr	r6, [pc, #356]	; (8001f18 <TSK_MediumFrequencyTaskM1+0x288>)
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8001db2:	6828      	ldr	r0, [r5, #0]
 8001db4:	f007 f866 	bl	8008e84 <R3_2_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001db8:	4b58      	ldr	r3, [pc, #352]	; (8001f1c <TSK_MediumFrequencyTaskM1+0x28c>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001dba:	4959      	ldr	r1, [pc, #356]	; (8001f20 <TSK_MediumFrequencyTaskM1+0x290>)
 8001dbc:	6830      	ldr	r0, [r6, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001dc4:	f007 fec0 	bl	8009b48 <STC_SetSpeedSensor>
              ENC_Clear(&ENCODER_M1);
 8001dc8:	4850      	ldr	r0, [pc, #320]	; (8001f0c <TSK_MediumFrequencyTaskM1+0x27c>)
 8001dca:	f006 f9a5 	bl	8008118 <ENC_Clear>
              FOC_Clear( M1 );
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f7ff fe58 	bl	8001a84 <FOC_Clear>
              if (EAC_IsAligned(&EncAlignCtrlM1) == false )
 8001dd4:	4853      	ldr	r0, [pc, #332]	; (8001f24 <TSK_MediumFrequencyTaskM1+0x294>)
 8001dd6:	f006 f961 	bl	800809c <EAC_IsAligned>
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	d17d      	bne.n	8001eda <TSK_MediumFrequencyTaskM1+0x24a>
                EAC_StartAlignment(&EncAlignCtrlM1);
 8001dde:	4851      	ldr	r0, [pc, #324]	; (8001f24 <TSK_MediumFrequencyTaskM1+0x294>)
 8001de0:	f006 f91c 	bl	800801c <EAC_StartAlignment>
                Mci[M1].State = ALIGNMENT;
 8001de4:	2302      	movs	r3, #2
 8001de6:	7663      	strb	r3, [r4, #25]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001de8:	6828      	ldr	r0, [r5, #0]
 8001dea:	f000 fc11 	bl	8002610 <PWMC_SwitchOnPWM>
 8001dee:	e764      	b.n	8001cba <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8001df0:	7e23      	ldrb	r3, [r4, #24]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	f47f af61 	bne.w	8001cba <TSK_MediumFrequencyTaskM1+0x2a>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	8323      	strh	r3, [r4, #24]
 8001dfc:	e75d      	b.n	8001cba <TSK_MediumFrequencyTaskM1+0x2a>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8001dfe:	f7ff ff3d 	bl	8001c7c <TSK_StopPermanencyTimeHasElapsedM1>
 8001e02:	2800      	cmp	r0, #0
 8001e04:	f43f af59 	beq.w	8001cba <TSK_MediumFrequencyTaskM1+0x2a>
 8001e08:	e7f6      	b.n	8001df8 <TSK_MediumFrequencyTaskM1+0x168>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001e0a:	7e23      	ldrb	r3, [r4, #24]
 8001e0c:	2b05      	cmp	r3, #5
 8001e0e:	d03b      	beq.n	8001e88 <TSK_MediumFrequencyTaskM1+0x1f8>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001e10:	483f      	ldr	r0, [pc, #252]	; (8001f10 <TSK_MediumFrequencyTaskM1+0x280>)
 8001e12:	f7ff fc77 	bl	8001704 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8001e16:	2000      	movs	r0, #0
 8001e18:	f7ff ff04 	bl	8001c24 <FOC_CalcCurrRef>
 8001e1c:	e74d      	b.n	8001cba <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001e1e:	7e23      	ldrb	r3, [r4, #24]
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d031      	beq.n	8001e88 <TSK_MediumFrequencyTaskM1+0x1f8>
            bool isAligned = EAC_IsAligned(&EncAlignCtrlM1);
 8001e24:	483f      	ldr	r0, [pc, #252]	; (8001f24 <TSK_MediumFrequencyTaskM1+0x294>)
 8001e26:	f006 f939 	bl	800809c <EAC_IsAligned>
 8001e2a:	4605      	mov	r5, r0
            bool EACDone = EAC_Exec(&EncAlignCtrlM1);
 8001e2c:	483d      	ldr	r0, [pc, #244]	; (8001f24 <TSK_MediumFrequencyTaskM1+0x294>)
 8001e2e:	f006 f91d 	bl	800806c <EAC_Exec>
 8001e32:	4606      	mov	r6, r0
            if ((isAligned == false)  && (EACDone == false))
 8001e34:	b90d      	cbnz	r5, 8001e3a <TSK_MediumFrequencyTaskM1+0x1aa>
 8001e36:	2800      	cmp	r0, #0
 8001e38:	d03e      	beq.n	8001eb8 <TSK_MediumFrequencyTaskM1+0x228>
              R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8001e3a:	4b36      	ldr	r3, [pc, #216]	; (8001f14 <TSK_MediumFrequencyTaskM1+0x284>)
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8001e3c:	4d36      	ldr	r5, [pc, #216]	; (8001f18 <TSK_MediumFrequencyTaskM1+0x288>)
              R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	f007 f820 	bl	8008e84 <R3_2_SwitchOffPWM>
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8001e44:	6828      	ldr	r0, [r5, #0]
 8001e46:	2103      	movs	r1, #3
 8001e48:	f007 fe92 	bl	8009b70 <STC_SetControlMode>
              STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8001e4c:	492f      	ldr	r1, [pc, #188]	; (8001f0c <TSK_MediumFrequencyTaskM1+0x27c>)
 8001e4e:	6828      	ldr	r0, [r5, #0]
 8001e50:	f007 fe7a 	bl	8009b48 <STC_SetSpeedSensor>
              FOC_Clear(M1);
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7ff fe15 	bl	8001a84 <FOC_Clear>
              TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001e5a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001e5e:	f7ff ff07 	bl	8001c70 <TSK_SetStopPermanencyTimeM1>
              Mci[M1].State = WAIT_STOP_MOTOR;
 8001e62:	2314      	movs	r3, #20
 8001e64:	7663      	strb	r3, [r4, #25]
 8001e66:	e728      	b.n	8001cba <TSK_MediumFrequencyTaskM1+0x2a>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001e68:	7e23      	ldrb	r3, [r4, #24]
 8001e6a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	f47f af23 	bne.w	8001cba <TSK_MediumFrequencyTaskM1+0x2a>
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001e74:	4d27      	ldr	r5, [pc, #156]	; (8001f14 <TSK_MediumFrequencyTaskM1+0x284>)
 8001e76:	6828      	ldr	r0, [r5, #0]
 8001e78:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
 8001e7c:	b9a9      	cbnz	r1, 8001eaa <TSK_MediumFrequencyTaskM1+0x21a>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8001e7e:	f000 fbc9 	bl	8002614 <PWMC_CurrentReadingCalibr>
             Mci[M1].State = OFFSET_CALIB;
 8001e82:	2311      	movs	r3, #17
 8001e84:	7663      	strb	r3, [r4, #25]
 8001e86:	e718      	b.n	8001cba <TSK_MediumFrequencyTaskM1+0x2a>
  R3_2_SwitchOffPWM(pwmcHandle[motor]);
 8001e88:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <TSK_MediumFrequencyTaskM1+0x284>)
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	f006 fffa 	bl	8008e84 <R3_2_SwitchOffPWM>
  FOC_Clear(motor);
 8001e90:	2000      	movs	r0, #0
 8001e92:	f7ff fdf7 	bl	8001a84 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8001e96:	6828      	ldr	r0, [r5, #0]
 8001e98:	f006 fd86 	bl	80089a8 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001e9c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001ea0:	f7ff fee6 	bl	8001c70 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001ea4:	2308      	movs	r3, #8
 8001ea6:	7663      	strb	r3, [r4, #25]
  return;
 8001ea8:	e707      	b.n	8001cba <TSK_MediumFrequencyTaskM1+0x2a>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001eaa:	4619      	mov	r1, r3
             pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001eac:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001eb0:	f000 fbb0 	bl	8002614 <PWMC_CurrentReadingCalibr>
             R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001eb4:	6828      	ldr	r0, [r5, #0]
 8001eb6:	e76a      	b.n	8001d8e <TSK_MediumFrequencyTaskM1+0xfe>
                IqdRef.d = STC_CalcTorqueReference(pSTC[M1]);
 8001eb8:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <TSK_MediumFrequencyTaskM1+0x288>)
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	f007 fea4 	bl	8009c08 <STC_CalcTorqueReference>
                FOCVars[M1].Iqdref = IqdRef;
 8001ec0:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <TSK_MediumFrequencyTaskM1+0x28c>)
 8001ec2:	821e      	strh	r6, [r3, #16]
 8001ec4:	8258      	strh	r0, [r3, #18]
            {
 8001ec6:	e6f8      	b.n	8001cba <TSK_MediumFrequencyTaskM1+0x2a>
                  FOC_Clear(M1);
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f7ff fddb 	bl	8001a84 <FOC_Clear>
                  PQD_Clear(pMPM[M1]);
 8001ece:	6828      	ldr	r0, [r5, #0]
 8001ed0:	f006 fd6a 	bl	80089a8 <PQD_Clear>
                  Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	8323      	strh	r3, [r4, #24]
 8001ed8:	e6ef      	b.n	8001cba <TSK_MediumFrequencyTaskM1+0x2a>
                STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8001eda:	6830      	ldr	r0, [r6, #0]
 8001edc:	2103      	movs	r1, #3
 8001ede:	f007 fe47 	bl	8009b70 <STC_SetControlMode>
                STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8001ee2:	490a      	ldr	r1, [pc, #40]	; (8001f0c <TSK_MediumFrequencyTaskM1+0x27c>)
 8001ee4:	6830      	ldr	r0, [r6, #0]
 8001ee6:	f007 fe2f 	bl	8009b48 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8001eea:	2000      	movs	r0, #0
 8001eec:	f7ff fe98 	bl	8001c20 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef( M1 );
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7ff fe97 	bl	8001c24 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001ef6:	6830      	ldr	r0, [r6, #0]
 8001ef8:	f007 febe 	bl	8009c78 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands( &Mci[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8001efc:	4804      	ldr	r0, [pc, #16]	; (8001f10 <TSK_MediumFrequencyTaskM1+0x280>)
 8001efe:	f7ff fc01 	bl	8001704 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8001f02:	2306      	movs	r3, #6
 8001f04:	7663      	strb	r3, [r4, #25]
 8001f06:	e76f      	b.n	8001de8 <TSK_MediumFrequencyTaskM1+0x158>
 8001f08:	20000348 	.word	0x20000348
 8001f0c:	200000e0 	.word	0x200000e0
 8001f10:	20000d90 	.word	0x20000d90
 8001f14:	20000df0 	.word	0x20000df0
 8001f18:	20000354 	.word	0x20000354
 8001f1c:	20000dbc 	.word	0x20000dbc
 8001f20:	20000310 	.word	0x20000310
 8001f24:	2000015c 	.word	0x2000015c

08001f28 <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 8001f28:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <MC_Scheduler+0x78>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d000      	beq.n	8001f32 <MC_Scheduler+0xa>
 8001f30:	4770      	bx	lr
{
 8001f32:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8001f34:	4c1b      	ldr	r4, [pc, #108]	; (8001fa4 <MC_Scheduler+0x7c>)
 8001f36:	8823      	ldrh	r3, [r4, #0]
 8001f38:	b193      	cbz	r3, 8001f60 <MC_Scheduler+0x38>
      hMFTaskCounterM1--;
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8001f3e:	4a1a      	ldr	r2, [pc, #104]	; (8001fa8 <MC_Scheduler+0x80>)
 8001f40:	8813      	ldrh	r3, [r2, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	b11b      	cbz	r3, 8001f4e <MC_Scheduler+0x26>
      hBootCapDelayCounterM1--;
 8001f46:	8813      	ldrh	r3, [r2, #0]
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8001f4e:	4a17      	ldr	r2, [pc, #92]	; (8001fac <MC_Scheduler+0x84>)
 8001f50:	8813      	ldrh	r3, [r2, #0]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	b11b      	cbz	r3, 8001f5e <MC_Scheduler+0x36>
      hStopPermanencyCounterM1--;
 8001f56:	8813      	ldrh	r3, [r2, #0]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	8013      	strh	r3, [r2, #0]
}
 8001f5e:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001f60:	4d13      	ldr	r5, [pc, #76]	; (8001fb0 <MC_Scheduler+0x88>)
      TSK_MediumFrequencyTaskM1();
 8001f62:	f7ff fe95 	bl	8001c90 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001f66:	f7ff fb8f 	bl	8001688 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	f851 0b0c 	ldr.w	r0, [r1], #12
 8001f70:	6883      	ldr	r3, [r0, #8]
 8001f72:	4798      	blx	r3
 8001f74:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8001f76:	b130      	cbz	r0, 8001f86 <MC_Scheduler+0x5e>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8001f78:	4629      	mov	r1, r5
 8001f7a:	220a      	movs	r2, #10
 8001f7c:	f851 0b08 	ldr.w	r0, [r1], #8
 8001f80:	6803      	ldr	r3, [r0, #0]
 8001f82:	4798      	blx	r3
 8001f84:	b910      	cbnz	r0, 8001f8c <MC_Scheduler+0x64>
      hMFTaskCounterM1 = (uint16_t)MF_TASK_OCCURENCE_TICKS;
 8001f86:	2301      	movs	r3, #1
 8001f88:	8023      	strh	r3, [r4, #0]
 8001f8a:	e7d8      	b.n	8001f3e <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8001f8c:	4628      	mov	r0, r5
 8001f8e:	f006 f9e7 	bl	8008360 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8001f92:	6828      	ldr	r0, [r5, #0]
 8001f94:	89ea      	ldrh	r2, [r5, #14]
 8001f96:	6846      	ldr	r6, [r0, #4]
 8001f98:	68a9      	ldr	r1, [r5, #8]
 8001f9a:	230a      	movs	r3, #10
 8001f9c:	47b0      	blx	r6
 8001f9e:	e7f2      	b.n	8001f86 <MC_Scheduler+0x5e>
 8001fa0:	20000de2 	.word	0x20000de2
 8001fa4:	20000de6 	.word	0x20000de6
 8001fa8:	20000de4 	.word	0x20000de4
 8001fac:	20000de8 	.word	0x20000de8
 8001fb0:	20000398 	.word	0x20000398

08001fb4 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint16_t hFOCreturn;
  uint8_t bMotorNbr = 0;

  (void)ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 8001fb8:	4837      	ldr	r0, [pc, #220]	; (8002098 <TSK_HighFrequencyTask+0xe4>)
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001fba:	4f38      	ldr	r7, [pc, #224]	; (800209c <TSK_HighFrequencyTask+0xe8>)
  RCM_ReadOngoingConv();
  RCM_ExecNextConv();
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001fbc:	4c38      	ldr	r4, [pc, #224]	; (80020a0 <TSK_HighFrequencyTask+0xec>)
{
 8001fbe:	b086      	sub	sp, #24
  (void)ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 8001fc0:	f006 f8b8 	bl	8008134 <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001fc4:	4b37      	ldr	r3, [pc, #220]	; (80020a4 <TSK_HighFrequencyTask+0xf0>)
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	f007 fdc0 	bl	8009b4c <STC_GetSpeedSensor>
 8001fcc:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001fce:	f007 fd59 	bl	8009a84 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001fd2:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8001fd4:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001fd6:	6838      	ldr	r0, [r7, #0]
 8001fd8:	f000 f9ce 	bl	8002378 <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 8001fdc:	f001 fc70 	bl	80038c0 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8001fe0:	f001 fc1e 	bl	8003820 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8001fe4:	9803      	ldr	r0, [sp, #12]
 8001fe6:	f7ff fc99 	bl	800191c <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001fea:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8001fec:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001fee:	f7ff fcd5 	bl	800199c <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001ff2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001ff6:	9001      	str	r0, [sp, #4]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001ff8:	b203      	sxth	r3, r0
 8001ffa:	1ac9      	subs	r1, r1, r3
 8001ffc:	4b2a      	ldr	r3, [pc, #168]	; (80020a8 <TSK_HighFrequencyTask+0xf4>)
 8001ffe:	6818      	ldr	r0, [r3, #0]
 8002000:	f006 fc72 	bl	80088e8 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002004:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8002008:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 800200c:	1ac9      	subs	r1, r1, r3
 800200e:	4b27      	ldr	r3, [pc, #156]	; (80020ac <TSK_HighFrequencyTask+0xf8>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002010:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	f006 fc68 	bl	80088e8 <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8002018:	f8ad 8008 	strh.w	r8, [sp, #8]
 800201c:	f8ad 000a 	strh.w	r0, [sp, #10]
 8002020:	9902      	ldr	r1, [sp, #8]
 8002022:	4823      	ldr	r0, [pc, #140]	; (80020b0 <TSK_HighFrequencyTask+0xfc>)
 8002024:	f005 ffc2 	bl	8007fac <Circle_Limitation>
 8002028:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800202a:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 800202c:	fa0f f883 	sxth.w	r8, r3
 8002030:	141d      	asrs	r5, r3, #16
 8002032:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002034:	f007 fd2e 	bl	8009a94 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002038:	4631      	mov	r1, r6
 800203a:	9802      	ldr	r0, [sp, #8]
 800203c:	f7ff fcf2 	bl	8001a24 <MCM_Rev_Park>
 8002040:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002042:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002044:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002046:	f000 f999 	bl	800237c <PWMC_SetPhaseVoltage>

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 800204a:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800204c:	9a04      	ldr	r2, [sp, #16]
  FOCVars[M1].Iab = Iab;
 800204e:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002050:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 8002052:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002054:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 8002056:	f8a4 8016 	strh.w	r8, [r4, #22]
  if(hFOCreturn == MC_DURATION)
 800205a:	2901      	cmp	r1, #1
  FOCVars[M1].Vqd = Vqd;
 800205c:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800205e:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8002060:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002062:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 8002066:	8426      	strh	r6, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 8002068:	d011      	beq.n	800208e <TSK_HighFrequencyTask+0xda>
  GLOBAL_TIMESTAMP++;
 800206a:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <TSK_HighFrequencyTask+0x100>)
  if (0U == MCPA_UART_A.Mark)
 800206c:	4812      	ldr	r0, [pc, #72]	; (80020b8 <TSK_HighFrequencyTask+0x104>)
  GLOBAL_TIMESTAMP++;
 800206e:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8002070:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
  GLOBAL_TIMESTAMP++;
 8002074:	3301      	adds	r3, #1
 8002076:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8002078:	b919      	cbnz	r1, 8002082 <TSK_HighFrequencyTask+0xce>
}
 800207a:	2000      	movs	r0, #0
 800207c:	b006      	add	sp, #24
 800207e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MCPA_dataLog (&MCPA_UART_A);
 8002082:	f006 fa31 	bl	80084e8 <MCPA_dataLog>
}
 8002086:	2000      	movs	r0, #0
 8002088:	b006      	add	sp, #24
 800208a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 800208e:	480b      	ldr	r0, [pc, #44]	; (80020bc <TSK_HighFrequencyTask+0x108>)
 8002090:	2200      	movs	r2, #0
 8002092:	f7ff fb2b 	bl	80016ec <MCI_FaultProcessing>
 8002096:	e7e8      	b.n	800206a <TSK_HighFrequencyTask+0xb6>
 8002098:	200000e0 	.word	0x200000e0
 800209c:	20000df0 	.word	0x20000df0
 80020a0:	20000dbc 	.word	0x20000dbc
 80020a4:	20000354 	.word	0x20000354
 80020a8:	20000350 	.word	0x20000350
 80020ac:	2000034c 	.word	0x2000034c
 80020b0:	2000002c 	.word	0x2000002c
 80020b4:	20001fe4 	.word	0x20001fe4
 80020b8:	2000036c 	.word	0x2000036c
 80020bc:	20000d90 	.word	0x20000d90

080020c0 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80020c0:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80020c2:	4b22      	ldr	r3, [pc, #136]	; (800214c <TSK_SafetyTask_PWMOFF+0x8c>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80020c4:	4e22      	ldr	r6, [pc, #136]	; (8002150 <TSK_SafetyTask_PWMOFF+0x90>)
{
 80020c6:	b082      	sub	sp, #8
 80020c8:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80020ca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80020ce:	f006 fb97 	bl	8008800 <NTC_CalcAvTemp>
 80020d2:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80020d4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80020d8:	f000 fac0 	bl	800265c <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80020dc:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80020e0:	4328      	orrs	r0, r5
 80020e2:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(M1 == bMotor)
 80020e4:	b344      	cbz	r4, 8002138 <TSK_SafetyTask_PWMOFF+0x78>
  {
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 80020e6:	481b      	ldr	r0, [pc, #108]	; (8002154 <TSK_SafetyTask_PWMOFF+0x94>)
 80020e8:	43ea      	mvns	r2, r5
 80020ea:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 80020ee:	b292      	uxth	r2, r2
 80020f0:	4629      	mov	r1, r5
 80020f2:	9001      	str	r0, [sp, #4]
 80020f4:	f7ff fafa 	bl	80016ec <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 80020f8:	9801      	ldr	r0, [sp, #4]
 80020fa:	f7ff fb8b 	bl	8001814 <MCI_GetFaultState>
 80020fe:	b1c8      	cbz	r0, 8002134 <TSK_SafetyTask_PWMOFF+0x74>
  {
    /* reset Encoder state */
    if (pEAC[bMotor] != MC_NULL)
 8002100:	4b15      	ldr	r3, [pc, #84]	; (8002158 <TSK_SafetyTask_PWMOFF+0x98>)
 8002102:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002106:	b110      	cbz	r0, 800210e <TSK_SafetyTask_PWMOFF+0x4e>
    {
      EAC_SetRestartState(pEAC[bMotor], false);
 8002108:	2100      	movs	r1, #0
 800210a:	f005 ffc9 	bl	80080a0 <EAC_SetRestartState>
    }
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800210e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002112:	f000 fa7b 	bl	800260c <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 8002116:	4811      	ldr	r0, [pc, #68]	; (800215c <TSK_SafetyTask_PWMOFF+0x9c>)
 8002118:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800211c:	b99b      	cbnz	r3, 8002146 <TSK_SafetyTask_PWMOFF+0x86>
    {
      MCPA_flushDataLog (&MCPA_UART_A);
    }
    FOC_Clear(bMotor);
 800211e:	4620      	mov	r0, r4
 8002120:	f7ff fcb0 	bl	8001a84 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8002124:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <TSK_SafetyTask_PWMOFF+0xa0>)
 8002126:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 800212a:	b002      	add	sp, #8
 800212c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8002130:	f006 bc3a 	b.w	80089a8 <PQD_Clear>
}
 8002134:	b002      	add	sp, #8
 8002136:	bd70      	pop	{r4, r5, r6, pc}
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 8002138:	480a      	ldr	r0, [pc, #40]	; (8002164 <TSK_SafetyTask_PWMOFF+0xa4>)
 800213a:	f007 fc67 	bl	8009a0c <RVBS_CalcAvVbus>
 800213e:	f000 000e 	and.w	r0, r0, #14
 8002142:	4305      	orrs	r5, r0
 8002144:	e7cf      	b.n	80020e6 <TSK_SafetyTask_PWMOFF+0x26>
      MCPA_flushDataLog (&MCPA_UART_A);
 8002146:	f006 fa93 	bl	8008670 <MCPA_flushDataLog>
 800214a:	e7e8      	b.n	800211e <TSK_SafetyTask_PWMOFF+0x5e>
 800214c:	20000358 	.word	0x20000358
 8002150:	20000df0 	.word	0x20000df0
 8002154:	20000d90 	.word	0x20000d90
 8002158:	20000dec 	.word	0x20000dec
 800215c:	2000036c 	.word	0x2000036c
 8002160:	20000348 	.word	0x20000348
 8002164:	20000000 	.word	0x20000000

08002168 <TSK_SafetyTask>:
{
 8002168:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <TSK_SafetyTask+0x1c>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d000      	beq.n	8002174 <TSK_SafetyTask+0xc>
}
 8002172:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8002174:	2000      	movs	r0, #0
 8002176:	f7ff ffa3 	bl	80020c0 <TSK_SafetyTask_PWMOFF>
}
 800217a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 800217e:	f001 bb1f 	b.w	80037c0 <RCM_ExecUserConv>
 8002182:	bf00      	nop
 8002184:	20000de2 	.word	0x20000de2

08002188 <MC_RunMotorControlTasks>:
{
 8002188:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <MC_RunMotorControlTasks+0x14>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	b903      	cbnz	r3, 8002192 <MC_RunMotorControlTasks+0xa>
}
 8002190:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8002192:	f7ff fec9 	bl	8001f28 <MC_Scheduler>
    TSK_SafetyTask();
 8002196:	f7ff ffe7 	bl	8002168 <TSK_SafetyTask>
}
 800219a:	bd08      	pop	{r3, pc}
 800219c:	20000de2 	.word	0x20000de2

080021a0 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80021a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 80021a2:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <TSK_HardwareFaultTask+0x18>)
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	f006 fe6d 	bl	8008e84 <R3_2_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80021aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 80021ae:	4803      	ldr	r0, [pc, #12]	; (80021bc <TSK_HardwareFaultTask+0x1c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	2180      	movs	r1, #128	; 0x80
 80021b4:	f7ff ba9a 	b.w	80016ec <MCI_FaultProcessing>
 80021b8:	20000df0 	.word	0x20000df0
 80021bc:	20000d90 	.word	0x20000d90

080021c0 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 80021c0:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021c2:	4a55      	ldr	r2, [pc, #340]	; (8002318 <mc_lock_pins+0x158>)
 80021c4:	4855      	ldr	r0, [pc, #340]	; (800231c <mc_lock_pins+0x15c>)
 80021c6:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80021c8:	2604      	movs	r6, #4
 80021ca:	b094      	sub	sp, #80	; 0x50
 80021cc:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021ce:	61d0      	str	r0, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 80021d0:	69d3      	ldr	r3, [r2, #28]
 80021d2:	9313      	str	r3, [sp, #76]	; 0x4c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021d4:	4c52      	ldr	r4, [pc, #328]	; (8002320 <mc_lock_pins+0x160>)
  (void) temp;
 80021d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021d8:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80021da:	2702      	movs	r7, #2
 80021dc:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021de:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80021e0:	69d3      	ldr	r3, [r2, #28]
 80021e2:	9312      	str	r3, [sp, #72]	; 0x48
  (void) temp;
 80021e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  WRITE_REG(GPIOx->LCKR, PinMask);
 80021e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021ea:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
 80021ee:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80021f0:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021f2:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80021f4:	69d1      	ldr	r1, [r2, #28]
 80021f6:	9111      	str	r1, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80021f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
  (void) temp;
 80021fc:	9911      	ldr	r1, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, PinMask);
 80021fe:	2501      	movs	r5, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002200:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002204:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002206:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002208:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800220a:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 800220e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  (void) temp;
 8002212:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002216:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002218:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800221a:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800221c:	69d1      	ldr	r1, [r2, #28]
 800221e:	910f      	str	r1, [sp, #60]	; 0x3c
  (void) temp;
 8002220:	990f      	ldr	r1, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002222:	4940      	ldr	r1, [pc, #256]	; (8002324 <mc_lock_pins+0x164>)
 8002224:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002226:	2580      	movs	r5, #128	; 0x80
 8002228:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800222a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800222c:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8002230:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  (void) temp;
 8002234:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002238:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800223a:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800223c:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800223e:	69dc      	ldr	r4, [r3, #28]
 8002240:	940d      	str	r4, [sp, #52]	; 0x34
  (void) temp;
 8002242:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002244:	4c38      	ldr	r4, [pc, #224]	; (8002328 <mc_lock_pins+0x168>)
 8002246:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002248:	2708      	movs	r7, #8
 800224a:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800224c:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800224e:	69dc      	ldr	r4, [r3, #28]
 8002250:	940c      	str	r4, [sp, #48]	; 0x30
  (void) temp;
 8002252:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002254:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002256:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002258:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800225a:	69d8      	ldr	r0, [r3, #28]
 800225c:	900b      	str	r0, [sp, #44]	; 0x2c
  (void) temp;
 800225e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002260:	4832      	ldr	r0, [pc, #200]	; (800232c <mc_lock_pins+0x16c>)
 8002262:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002264:	2440      	movs	r4, #64	; 0x40
 8002266:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002268:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800226a:	69de      	ldr	r6, [r3, #28]
 800226c:	960a      	str	r6, [sp, #40]	; 0x28
  (void) temp;
 800226e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002270:	4e2f      	ldr	r6, [pc, #188]	; (8002330 <mc_lock_pins+0x170>)
 8002272:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002274:	2720      	movs	r7, #32
 8002276:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002278:	61de      	str	r6, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800227a:	69de      	ldr	r6, [r3, #28]
 800227c:	9609      	str	r6, [sp, #36]	; 0x24
  (void) temp;
 800227e:	9e09      	ldr	r6, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002280:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002282:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002284:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002286:	69d0      	ldr	r0, [r2, #28]
 8002288:	9008      	str	r0, [sp, #32]
  (void) temp;
 800228a:	9808      	ldr	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800228c:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800228e:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002290:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002292:	69d1      	ldr	r1, [r2, #28]
 8002294:	9107      	str	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002296:	f44f 7080 	mov.w	r0, #256	; 0x100
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800229a:	4926      	ldr	r1, [pc, #152]	; (8002334 <mc_lock_pins+0x174>)
  (void) temp;
 800229c:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800229e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80022a0:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022a2:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80022a4:	69d9      	ldr	r1, [r3, #28]
 80022a6:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80022a8:	f44f 7000 	mov.w	r0, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022ac:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  (void) temp;
 80022b0:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022b2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80022b4:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022b6:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80022b8:	69d9      	ldr	r1, [r3, #28]
 80022ba:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80022bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022c0:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  (void) temp;
 80022c4:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022c6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80022c8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022ca:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80022cc:	69d9      	ldr	r1, [r3, #28]
 80022ce:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80022d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022d4:	f44f 3188 	mov.w	r1, #69632	; 0x11000
  (void) temp;
 80022d8:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022da:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80022dc:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022de:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	9303      	str	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80022e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022e8:	f44f 33c0 	mov.w	r3, #98304	; 0x18000
  (void) temp;
 80022ec:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022ee:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80022f0:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022f2:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80022f4:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022f6:	4b10      	ldr	r3, [pc, #64]	; (8002338 <mc_lock_pins+0x178>)
  temp = READ_REG(GPIOx->LCKR);
 80022f8:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80022fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80022fe:	f44f 3290 	mov.w	r2, #73728	; 0x12000
  (void) temp;
 8002302:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002304:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002306:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002308:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	9301      	str	r3, [sp, #4]
  (void) temp;
 800230e:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8002310:	b014      	add	sp, #80	; 0x50
 8002312:	bcf0      	pop	{r4, r5, r6, r7}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	48000400 	.word	0x48000400
 800231c:	00010004 	.word	0x00010004
 8002320:	00010002 	.word	0x00010002
 8002324:	00010080 	.word	0x00010080
 8002328:	00010008 	.word	0x00010008
 800232c:	00010040 	.word	0x00010040
 8002330:	00010020 	.word	0x00010020
 8002334:	00010100 	.word	0x00010100
 8002338:	48000800 	.word	0x48000800

0800233c <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 800233c:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 800233e:	f004 fa09 	bl	8006754 <HAL_RCC_GetHCLKFreq>
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <MX_MotorControl_Init+0x30>)
 8002344:	fba3 3000 	umull	r3, r0, r3, r0
 8002348:	09c0      	lsrs	r0, r0, #7
 800234a:	f003 f85d 	bl	8005408 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <MX_MotorControl_Init+0x34>)
 8002350:	2200      	movs	r2, #0
 8002352:	6819      	ldr	r1, [r3, #0]
 8002354:	f04f 30ff 	mov.w	r0, #4294967295
 8002358:	f003 f80a 	bl	8005370 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 800235c:	4805      	ldr	r0, [pc, #20]	; (8002374 <MX_MotorControl_Init+0x38>)
 800235e:	f7ff fbcb 	bl	8001af8 <MCboot>
  mc_lock_pins();
}
 8002362:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8002366:	f7ff bf2b 	b.w	80021c0 <mc_lock_pins>
 800236a:	bf00      	nop
 800236c:	10624dd3 	.word	0x10624dd3
 8002370:	2000043c 	.word	0x2000043c
 8002374:	20001f80 	.word	0x20001f80

08002378 <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8002378:	6803      	ldr	r3, [r0, #0]
 800237a:	4718      	bx	r3

0800237c <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 800237c:	b510      	push	{r4, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800237e:	f8b0 4060 	ldrh.w	r4, [r0, #96]	; 0x60
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002382:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
{
 8002384:	b082      	sub	sp, #8
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002386:	ea4f 4c21 	mov.w	ip, r1, asr #16
{
 800238a:	9101      	str	r1, [sp, #4]
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800238c:	fb04 fc0c 	mul.w	ip, r4, ip
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002390:	b209      	sxth	r1, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002392:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002396:	fb03 f101 	mul.w	r1, r3, r1

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 800239a:	eb01 034c 	add.w	r3, r1, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 800239e:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 80023a2:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 80023a6:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 80023aa:	f1b3 3fff 	cmp.w	r3, #4294967295
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80023ae:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 80023b2:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 80023b6:	ea4f 0262 	mov.w	r2, r2, asr #1
    if (wY < 0)
 80023ba:	f2c0 8086 	blt.w	80024ca <PWMC_SetPhaseVoltage+0x14e>
          pHandle->highDuty = (uint16_t)wTimePhA;
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 80023be:	f1b1 3fff 	cmp.w	r1, #4294967295
 80023c2:	db57      	blt.n	8002474 <PWMC_SetPhaseVoltage+0xf8>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80023c4:	ebbe 0e02 	subs.w	lr, lr, r2
 80023c8:	bf44      	itt	mi
 80023ca:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 80023ce:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 80023d2:	2900      	cmp	r1, #0
 80023d4:	bfbc      	itt	lt
 80023d6:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 80023da:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 80023de:	2b00      	cmp	r3, #0
 80023e0:	bfb8      	it	lt
 80023e2:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80023e6:	ea4f 0294 	mov.w	r2, r4, lsr #2
 80023ea:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 80023ee:	bfb8      	it	lt
 80023f0:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_2;
 80023f4:	f04f 0c01 	mov.w	ip, #1
        wTimePhB = wTimePhA + (wZ / 131072);
 80023f8:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 80023fc:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        pHandle->Sector = SECTOR_2;
 8002400:	f880 c06a 	strb.w	ip, [r0, #106]	; 0x6a

        pHandle->lowDuty = (uint16_t)wTimePhB;
 8002404:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
        pHandle->midDuty = (uint16_t)wTimePhA;
 8002408:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
        pHandle->highDuty = (uint16_t)wTimePhC;
 800240c:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    if (1U == pHandle->DTTest)
 8002410:	f8b0 405e 	ldrh.w	r4, [r0, #94]	; 0x5e
 8002414:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002418:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800241c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002420:	b292      	uxth	r2, r2
 8002422:	b289      	uxth	r1, r1
 8002424:	b29b      	uxth	r3, r3
 8002426:	2c01      	cmp	r4, #1
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8002428:	87c2      	strh	r2, [r0, #62]	; 0x3e
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 800242a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 800242e:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
    if (1U == pHandle->DTTest)
 8002432:	d11a      	bne.n	800246a <PWMC_SetPhaseVoltage+0xee>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 8002434:	f9b0 4050 	ldrsh.w	r4, [r0, #80]	; 0x50
 8002438:	2c00      	cmp	r4, #0
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 800243a:	f8b0 4062 	ldrh.w	r4, [r0, #98]	; 0x62
 800243e:	bfcc      	ite	gt
 8002440:	1912      	addgt	r2, r2, r4
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 8002442:	1b12      	suble	r2, r2, r4
 8002444:	b292      	uxth	r2, r2
 8002446:	87c2      	strh	r2, [r0, #62]	; 0x3e
      }

      if (pHandle->Ib > 0)
 8002448:	f9b0 2052 	ldrsh.w	r2, [r0, #82]	; 0x52
 800244c:	2a00      	cmp	r2, #0
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 800244e:	f9b0 2054 	ldrsh.w	r2, [r0, #84]	; 0x54
        pHandle->CntPhB += pHandle->DTCompCnt;
 8002452:	bfcc      	ite	gt
 8002454:	1909      	addgt	r1, r1, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8002456:	1b09      	suble	r1, r1, r4
      if (pHandle->Ic > 0)
 8002458:	2a00      	cmp	r2, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 800245a:	b289      	uxth	r1, r1
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 800245c:	bfcc      	ite	gt
 800245e:	191b      	addgt	r3, r3, r4
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8002460:	1b1b      	suble	r3, r3, r4
 8002462:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8002466:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 800246a:	6943      	ldr	r3, [r0, #20]
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 800246c:	b002      	add	sp, #8
 800246e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002472:	4718      	bx	r3
        if ( wX <= 0 )
 8002474:	f1bc 0f00 	cmp.w	ip, #0
 8002478:	dd4f      	ble.n	800251a <PWMC_SetPhaseVoltage+0x19e>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800247a:	ebbc 0e02 	subs.w	lr, ip, r2
 800247e:	bf44      	itt	mi
 8002480:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8002484:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8002488:	2900      	cmp	r1, #0
 800248a:	bfb8      	it	lt
 800248c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_1;
 8002490:	f04f 0300 	mov.w	r3, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 8002494:	bfb8      	it	lt
 8002496:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          pHandle->Sector = SECTOR_1;
 800249a:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800249e:	08a2      	lsrs	r2, r4, #2
          wTimePhC = wTimePhB - (wX / 131072);
 80024a0:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 80024a4:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80024a8:	bfb8      	it	lt
 80024aa:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 80024ae:	eb02 41a1 	add.w	r1, r2, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80024b2:	bfb8      	it	lt
 80024b4:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 80024b8:	eba1 4363 	sub.w	r3, r1, r3, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 80024bc:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhB;
 80024c0:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhC;
 80024c4:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
 80024c8:	e7a2      	b.n	8002410 <PWMC_SetPhaseVoltage+0x94>
      if (wZ < 0)
 80024ca:	f1b1 3fff 	cmp.w	r1, #4294967295
 80024ce:	db75      	blt.n	80025bc <PWMC_SetPhaseVoltage+0x240>
        if (wX <= 0)
 80024d0:	f1bc 0f00 	cmp.w	ip, #0
 80024d4:	dd4a      	ble.n	800256c <PWMC_SetPhaseVoltage+0x1f0>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80024d6:	ebbe 0e0c 	subs.w	lr, lr, ip
 80024da:	bf48      	it	mi
 80024dc:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_3;
 80024e0:	f04f 0202 	mov.w	r2, #2
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80024e4:	bf48      	it	mi
 80024e6:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	bfb8      	it	lt
 80024ee:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_3;
 80024f2:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80024f6:	ea4f 0294 	mov.w	r2, r4, lsr #2
 80024fa:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 80024fe:	bfb8      	it	lt
 8002500:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8002504:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002508:	eb03 416c 	add.w	r1, r3, ip, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhB;
 800250c:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhC;
 8002510:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002514:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 8002518:	e77a      	b.n	8002410 <PWMC_SetPhaseVoltage+0x94>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 800251a:	ebbe 0e0c 	subs.w	lr, lr, ip
 800251e:	bf44      	itt	mi
 8002520:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8002524:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8002528:	2b00      	cmp	r3, #0
 800252a:	bfb8      	it	lt
 800252c:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_6;
 8002530:	f04f 0205 	mov.w	r2, #5
          wTimePhC = wTimePhA - (wY / 131072);
 8002534:	bfb8      	it	lt
 8002536:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
          pHandle->Sector = SECTOR_6;
 800253a:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
          wTimePhB = wTimePhC + (wX / 131072);
 800253e:	f1bc 0100 	subs.w	r1, ip, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002542:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8002546:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 800254a:	bfb8      	it	lt
 800254c:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
          wTimePhC = wTimePhA - (wY / 131072);
 8002550:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002554:	bfb8      	it	lt
 8002556:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 800255a:	eb03 4161 	add.w	r1, r3, r1, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 800255e:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhC;
 8002562:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhB;
 8002566:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
 800256a:	e751      	b.n	8002410 <PWMC_SetPhaseVoltage+0x94>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800256c:	ebbc 0e02 	subs.w	lr, ip, r2
 8002570:	bf44      	itt	mi
 8002572:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8002576:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 800257a:	2900      	cmp	r1, #0
 800257c:	bfb8      	it	lt
 800257e:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_4;
 8002582:	f04f 0303 	mov.w	r3, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 8002586:	bfb8      	it	lt
 8002588:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          pHandle->Sector = SECTOR_4;
 800258c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002590:	08a2      	lsrs	r2, r4, #2
          wTimePhC = wTimePhB - (wX / 131072);
 8002592:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002596:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 800259a:	bfb8      	it	lt
 800259c:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 80025a0:	eb02 41a1 	add.w	r1, r2, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80025a4:	bfb8      	it	lt
 80025a6:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 80025aa:	eba1 4363 	sub.w	r3, r1, r3, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80025ae:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhB;
 80025b2:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhA;
 80025b6:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 80025ba:	e729      	b.n	8002410 <PWMC_SetPhaseVoltage+0x94>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80025bc:	ebbe 0e02 	subs.w	lr, lr, r2
 80025c0:	bf44      	itt	mi
 80025c2:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 80025c6:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 80025ca:	2900      	cmp	r1, #0
 80025cc:	bfbc      	itt	lt
 80025ce:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 80025d2:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	bfb8      	it	lt
 80025da:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80025de:	ea4f 0294 	mov.w	r2, r4, lsr #2
 80025e2:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 80025e6:	bfb8      	it	lt
 80025e8:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_5;
 80025ec:	f04f 0c04 	mov.w	ip, #4
        wTimePhB = wTimePhA + (wZ / 131072);
 80025f0:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 80025f4:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        pHandle->Sector = SECTOR_5;
 80025f8:	f880 c06a 	strb.w	ip, [r0, #106]	; 0x6a
        pHandle->lowDuty = (uint16_t)wTimePhC;
 80025fc:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
        pHandle->midDuty = (uint16_t)wTimePhA;
 8002600:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
        pHandle->highDuty = (uint16_t)wTimePhB;
 8002604:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
 8002608:	e702      	b.n	8002410 <PWMC_SetPhaseVoltage+0x94>
 800260a:	bf00      	nop

0800260c <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 800260c:	6843      	ldr	r3, [r0, #4]
 800260e:	4718      	bx	r3

08002610 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8002610:	6883      	ldr	r3, [r0, #8]
 8002612:	4718      	bx	r3

08002614 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8002614:	b510      	push	{r4, lr}
 8002616:	4604      	mov	r4, r0
 8002618:	b082      	sub	sp, #8
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 800261a:	b199      	cbz	r1, 8002644 <PWMC_CurrentReadingCalibr+0x30>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 800261c:	2901      	cmp	r1, #1
 800261e:	d002      	beq.n	8002626 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8002620:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8002622:	b002      	add	sp, #8
 8002624:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8002626:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
 800262a:	b19b      	cbz	r3, 8002654 <PWMC_CurrentReadingCalibr+0x40>
        pHandle->OffCalibrWaitTimeCounter--;
 800262c:	3b01      	subs	r3, #1
 800262e:	b29b      	uxth	r3, r3
 8002630:	9101      	str	r1, [sp, #4]
 8002632:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f2      	bne.n	8002620 <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 800263a:	68c3      	ldr	r3, [r0, #12]
 800263c:	4798      	blx	r3
          retVal = true;
 800263e:	9901      	ldr	r1, [sp, #4]
 8002640:	4608      	mov	r0, r1
 8002642:	e7ee      	b.n	8002622 <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 8002644:	f7ff ffe2 	bl	800260c <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8002648:	4620      	mov	r0, r4
 800264a:	68e3      	ldr	r3, [r4, #12]
 800264c:	4798      	blx	r3
      retVal = true;
 800264e:	2001      	movs	r0, #1
}
 8002650:	b002      	add	sp, #8
 8002652:	bd10      	pop	{r4, pc}
        retVal = true;
 8002654:	4608      	mov	r0, r1
}
 8002656:	b002      	add	sp, #8
 8002658:	bd10      	pop	{r4, pc}
 800265a:	bf00      	nop

0800265c <PWMC_CheckOverCurrent>:
__weak uint16_t PWMC_CheckOverCurrent(PWMC_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_PWR_CUR_FDB
  return ((MC_NULL == pHandle) ? MC_NO_FAULTS : (uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
#else
  return ((uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
 800265c:	6983      	ldr	r3, [r0, #24]
 800265e:	4718      	bx	r3

08002660 <RI_SetRegCommandParser>:

static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t maxSize);
static uint8_t RI_MovString(const char_t * srcString, char_t * destString, uint16_t *size, int16_t maxSize);
__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 8002664:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    uint16_t size = 0U;
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8002668:	2300      	movs	r3, #0
    uint8_t accessResult;
    while (rxLength > 0)
 800266a:	429a      	cmp	r2, r3
    uint8_t * txData = pHandle->txBuffer;
 800266c:	e9d0 c501 	ldrd	ip, r5, [r0, #4]
{
 8002670:	b085      	sub	sp, #20
 8002672:	4607      	mov	r7, r0
    pHandle->txLength = 0;
 8002674:	81c3      	strh	r3, [r0, #14]
    while (rxLength > 0)
 8002676:	dd65      	ble.n	8002744 <RI_SetRegCommandParser+0xe4>
              uint32_t torque;
              uint16_t duration;

              torque = *(uint32_t *)rawData; //cstat !MISRAC2012-Rule-11.3
              duration = *(uint16_t *)&rawData[4]; //cstat !MISRAC2012-Rule-11.3
              MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8002678:	f8df a378 	ldr.w	sl, [pc, #888]	; 80029f4 <RI_SetRegCommandParser+0x394>
  uint8_t retVal = MCP_CMD_OK;
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	eb05 0901 	add.w	r9, r5, r1
 8002682:	f1c5 0b01 	rsb	fp, r5, #1
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8002686:	4664      	mov	r4, ip
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002688:	b296      	uxth	r6, r2
      accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 800268a:	f834 0b02 	ldrh.w	r0, [r4], #2
    switch (typeID)
 800268e:	f000 0138 	and.w	r1, r0, #56	; 0x38
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002692:	1eb2      	subs	r2, r6, #2
    uint16_t regID = dataID & REG_MASK;
 8002694:	f020 0307 	bic.w	r3, r0, #7
    switch (typeID)
 8002698:	3908      	subs	r1, #8
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800269a:	fa1f f882 	uxth.w	r8, r2
    uint16_t regID = dataID & REG_MASK;
 800269e:	b29b      	uxth	r3, r3
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80026a0:	b212      	sxth	r2, r2
    switch (typeID)
 80026a2:	2920      	cmp	r1, #32
 80026a4:	d812      	bhi.n	80026cc <RI_SetRegCommandParser+0x6c>
 80026a6:	e8df f001 	tbb	[pc, r1]
 80026aa:	11b1      	.short	0x11b1
 80026ac:	11111111 	.word	0x11111111
 80026b0:	11861111 	.word	0x11861111
 80026b4:	11111111 	.word	0x11111111
 80026b8:	11bd1111 	.word	0x11bd1111
 80026bc:	11111111 	.word	0x11111111
 80026c0:	11651111 	.word	0x11651111
 80026c4:	11111111 	.word	0x11111111
 80026c8:	1111      	.short	0x1111
 80026ca:	27          	.byte	0x27
 80026cb:	00          	.byte	0x00
 80026cc:	2007      	movs	r0, #7
        if ((1U == number_of_item) && (0 == rxLength))
 80026ce:	eb05 030b 	add.w	r3, r5, fp
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d031      	beq.n	800273c <RI_SetRegCommandParser+0xdc>
        if (txSyncFreeSpace !=0 )
 80026d8:	454d      	cmp	r5, r9
 80026da:	f000 80b2 	beq.w	8002842 <RI_SetRegCommandParser+0x1e2>
          *txData = accessResult;
 80026de:	f805 0b01 	strb.w	r0, [r5], #1
          pHandle->txLength++;
 80026e2:	89fb      	ldrh	r3, [r7, #14]
 80026e4:	3301      	adds	r3, #1
 80026e6:	81fb      	strh	r3, [r7, #14]
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80026e8:	2800      	cmp	r0, #0
 80026ea:	f040 80ae 	bne.w	800284a <RI_SetRegCommandParser+0x1ea>
    while (rxLength > 0)
 80026ee:	2a00      	cmp	r2, #0
 80026f0:	f340 8283 	ble.w	8002bfa <RI_SetRegCommandParser+0x59a>
 80026f4:	46a4      	mov	ip, r4
 80026f6:	e7c6      	b.n	8002686 <RI_SetRegCommandParser+0x26>
        *size = rawSize + 2U;
 80026f8:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 80026fc:	3602      	adds	r6, #2
 80026fe:	b2b6      	uxth	r6, r6
        if (*size > dataAvailable )
 8002700:	4296      	cmp	r6, r2
 8002702:	f300 81a1 	bgt.w	8002a48 <RI_SetRegCommandParser+0x3e8>
          switch (regID)
 8002706:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 800270a:	f000 81d6 	beq.w	8002aba <RI_SetRegCommandParser+0x45a>
 800270e:	d91e      	bls.n	800274e <RI_SetRegCommandParser+0xee>
 8002710:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8002714:	f000 81de 	beq.w	8002ad4 <RI_SetRegCommandParser+0x474>
 8002718:	f5b3 6fa5 	cmp.w	r3, #1320	; 0x528
 800271c:	f040 817c 	bne.w	8002a18 <RI_SetRegCommandParser+0x3b8>
              break;
            }

            case MC_REG_ASYNC_UARTA:
            {
              retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8002720:	48b0      	ldr	r0, [pc, #704]	; (80029e4 <RI_SetRegCommandParser+0x384>)
 8002722:	f10c 0104 	add.w	r1, ip, #4
 8002726:	f005 ffd1 	bl	80086cc <MCPA_cfgLog>
        if ((1U == number_of_item) && (0 == rxLength))
 800272a:	eb05 030b 	add.w	r3, r5, fp
 800272e:	b2db      	uxtb	r3, r3
      rxLength = (int16_t) (rxLength - size);
 8002730:	eba8 0206 	sub.w	r2, r8, r6
        if ((1U == number_of_item) && (0 == rxLength))
 8002734:	2b01      	cmp	r3, #1
      rxData = rxData+size;
 8002736:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 8002738:	b212      	sxth	r2, r2
        if ((1U == number_of_item) && (0 == rxLength))
 800273a:	d1cd      	bne.n	80026d8 <RI_SetRegCommandParser+0x78>
 800273c:	2a00      	cmp	r2, #0
 800273e:	d1cb      	bne.n	80026d8 <RI_SetRegCommandParser+0x78>
      if (MCP_CMD_OK == retVal)
 8002740:	2800      	cmp	r0, #0
 8002742:	d17f      	bne.n	8002844 <RI_SetRegCommandParser+0x1e4>
      pHandle->txLength = 0;
 8002744:	2000      	movs	r0, #0
 8002746:	81f8      	strh	r0, [r7, #14]
}
 8002748:	b005      	add	sp, #20
 800274a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800274e:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8002752:	f000 819f 	beq.w	8002a94 <RI_SetRegCommandParser+0x434>
 8002756:	f200 815f 	bhi.w	8002a18 <RI_SetRegCommandParser+0x3b8>
 800275a:	2ba8      	cmp	r3, #168	; 0xa8
 800275c:	d004      	beq.n	8002768 <RI_SetRegCommandParser+0x108>
 800275e:	f240 8156 	bls.w	8002a0e <RI_SetRegCommandParser+0x3ae>
 8002762:	2be8      	cmp	r3, #232	; 0xe8
 8002764:	f040 8158 	bne.w	8002a18 <RI_SetRegCommandParser+0x3b8>
      rxLength = (int16_t) (rxLength - size);
 8002768:	eba8 0206 	sub.w	r2, r8, r6
      rxData = rxData+size;
 800276c:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 800276e:	b212      	sxth	r2, r2
              retVal = MCP_ERROR_RO_REG;
 8002770:	2004      	movs	r0, #4
 8002772:	e7ac      	b.n	80026ce <RI_SetRegCommandParser+0x6e>

  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */

  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002774:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 81d3 	beq.w	8002b24 <RI_SetRegCommandParser+0x4c4>
 800277e:	2a01      	cmp	r2, #1
 8002780:	f340 815c 	ble.w	8002a3c <RI_SetRegCommandParser+0x3dc>
 8002784:	f10c 0003 	add.w	r0, ip, #3
 8002788:	ea6f 0c0c 	mvn.w	ip, ip
 800278c:	e002      	b.n	8002794 <RI_SetRegCommandParser+0x134>
 800278e:	429a      	cmp	r2, r3
 8002790:	f340 814e 	ble.w	8002a30 <RI_SetRegCommandParser+0x3d0>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
 8002794:	eb0c 0300 	add.w	r3, ip, r0
 8002798:	4606      	mov	r6, r0
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800279a:	f910 1b01 	ldrsb.w	r1, [r0], #1
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2900      	cmp	r1, #0
 80027a2:	d1f4      	bne.n	800278e <RI_SetRegCommandParser+0x12e>
      rxData = rxData+size;
 80027a4:	461a      	mov	r2, r3
      rxLength = (int16_t) (rxLength - size);
 80027a6:	eba8 0303 	sub.w	r3, r8, r3
      rxData = rxData+size;
 80027aa:	4414      	add	r4, r2
      rxLength = (int16_t) (rxLength - size);
 80027ac:	b21a      	sxth	r2, r3
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	7033      	strb	r3, [r6, #0]
        retVal = MCP_ERROR_RO_REG;
 80027b2:	2004      	movs	r0, #4
 80027b4:	e78b      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
        uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 80027b6:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 80027ba:	f8bc 1002 	ldrh.w	r1, [ip, #2]
        switch (regID)
 80027be:	f000 820c 	beq.w	8002bda <RI_SetRegCommandParser+0x57a>
 80027c2:	f200 808e 	bhi.w	80028e2 <RI_SetRegCommandParser+0x282>
 80027c6:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 80027ca:	f000 8211 	beq.w	8002bf0 <RI_SetRegCommandParser+0x590>
 80027ce:	d95b      	bls.n	8002888 <RI_SetRegCommandParser+0x228>
 80027d0:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80027d4:	f000 81c8 	beq.w	8002b68 <RI_SetRegCommandParser+0x508>
 80027d8:	d977      	bls.n	80028ca <RI_SetRegCommandParser+0x26a>
 80027da:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 80027de:	d046      	beq.n	800286e <RI_SetRegCommandParser+0x20e>
 80027e0:	d93a      	bls.n	8002858 <RI_SetRegCommandParser+0x1f8>
 80027e2:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 80027e6:	d148      	bne.n	800287a <RI_SetRegCommandParser+0x21a>
            currComp = MCI_GetIqdref(pMCIN);
 80027e8:	4650      	mov	r0, sl
 80027ea:	9101      	str	r1, [sp, #4]
      rxData = rxData+size;
 80027ec:	f10c 0404 	add.w	r4, ip, #4
            currComp = MCI_GetIqdref(pMCIN);
 80027f0:	f7ff f85c 	bl	80018ac <MCI_GetIqdref>
            currComp.q = (int16_t)regdata16;
 80027f4:	9901      	ldr	r1, [sp, #4]
            currComp = MCI_GetIqdref(pMCIN);
 80027f6:	9003      	str	r0, [sp, #12]
            currComp.q = (int16_t)regdata16;
 80027f8:	f8ad 100c 	strh.w	r1, [sp, #12]
            MCI_SetCurrentReferences(pMCIN,currComp);
 80027fc:	4650      	mov	r0, sl
 80027fe:	9903      	ldr	r1, [sp, #12]
 8002800:	f7fe ff6a 	bl	80016d8 <MCI_SetCurrentReferences>
      rxLength = (int16_t) (rxLength - size);
 8002804:	1f32      	subs	r2, r6, #4
 8002806:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002808:	2000      	movs	r0, #0
 800280a:	e760      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
        switch (regID)
 800280c:	2b48      	cmp	r3, #72	; 0x48
 800280e:	f000 8115 	beq.w	8002a3c <RI_SetRegCommandParser+0x3dc>
 8002812:	2b88      	cmp	r3, #136	; 0x88
 8002814:	f000 8120 	beq.w	8002a58 <RI_SetRegCommandParser+0x3f8>
      rxLength = (int16_t) (rxLength - size);
 8002818:	1ef2      	subs	r2, r6, #3
 800281a:	b212      	sxth	r2, r2
      rxData = rxData+size;
 800281c:	f10c 0403 	add.w	r4, ip, #3
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002820:	2005      	movs	r0, #5
            break;
 8002822:	e754      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
        switch (regID)
 8002824:	2b58      	cmp	r3, #88	; 0x58
 8002826:	f000 8111 	beq.w	8002a4c <RI_SetRegCommandParser+0x3ec>
 800282a:	2b98      	cmp	r3, #152	; 0x98
 800282c:	f000 8120 	beq.w	8002a70 <RI_SetRegCommandParser+0x410>
 8002830:	2b18      	cmp	r3, #24
 8002832:	f000 810b 	beq.w	8002a4c <RI_SetRegCommandParser+0x3ec>
      rxLength = (int16_t) (rxLength - size);
 8002836:	1fb2      	subs	r2, r6, #6
 8002838:	b212      	sxth	r2, r2
      rxData = rxData+size;
 800283a:	f10c 0406 	add.w	r4, ip, #6
            retVal = MCP_ERROR_UNKNOWN_REG;
 800283e:	2005      	movs	r0, #5
            break;
 8002840:	e745      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002842:	2008      	movs	r0, #8
}
 8002844:	b005      	add	sp, #20
 8002846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 800284a:	2807      	cmp	r0, #7
 800284c:	f040 80ea 	bne.w	8002a24 <RI_SetRegCommandParser+0x3c4>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002850:	2001      	movs	r0, #1
}
 8002852:	b005      	add	sp, #20
 8002854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002858:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 800285c:	d007      	beq.n	800286e <RI_SetRegCommandParser+0x20e>
 800285e:	d930      	bls.n	80028c2 <RI_SetRegCommandParser+0x262>
 8002860:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8002864:	d003      	beq.n	800286e <RI_SetRegCommandParser+0x20e>
 8002866:	d926      	bls.n	80028b6 <RI_SetRegCommandParser+0x256>
 8002868:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 800286c:	d106      	bne.n	800287c <RI_SetRegCommandParser+0x21c>
      rxLength = (int16_t) (rxLength - size);
 800286e:	1f32      	subs	r2, r6, #4
 8002870:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002872:	f10c 0404 	add.w	r4, ip, #4
            retVal = MCP_ERROR_RO_REG;
 8002876:	2004      	movs	r0, #4
            break;
 8002878:	e729      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
 800287a:	d964      	bls.n	8002946 <RI_SetRegCommandParser+0x2e6>
      rxLength = (int16_t) (rxLength - size);
 800287c:	1f32      	subs	r2, r6, #4
 800287e:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002880:	f10c 0404 	add.w	r4, ip, #4
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002884:	2005      	movs	r0, #5
            break;
 8002886:	e722      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
 8002888:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800288c:	f000 8177 	beq.w	8002b7e <RI_SetRegCommandParser+0x51e>
 8002890:	d94a      	bls.n	8002928 <RI_SetRegCommandParser+0x2c8>
 8002892:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002896:	f000 8193 	beq.w	8002bc0 <RI_SetRegCommandParser+0x560>
 800289a:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 800289e:	d1ed      	bne.n	800287c <RI_SetRegCommandParser+0x21c>
            PID_SetKI(pPIDIq[motorID], (int16_t)regdata16);
 80028a0:	4b51      	ldr	r3, [pc, #324]	; (80029e8 <RI_SetRegCommandParser+0x388>)
 80028a2:	b209      	sxth	r1, r1
      rxData = rxData+size;
 80028a4:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	f005 ffe1 	bl	8008870 <PID_SetKI>
      rxLength = (int16_t) (rxLength - size);
 80028ae:	1f32      	subs	r2, r6, #4
 80028b0:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 80028b2:	2000      	movs	r0, #0
            break;
 80028b4:	e70b      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
 80028b6:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 80028ba:	f5b0 6ff2 	cmp.w	r0, #1936	; 0x790
 80028be:	d1dd      	bne.n	800287c <RI_SetRegCommandParser+0x21c>
 80028c0:	e7d5      	b.n	800286e <RI_SetRegCommandParser+0x20e>
 80028c2:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 80028c6:	d0d2      	beq.n	800286e <RI_SetRegCommandParser+0x20e>
 80028c8:	e7d8      	b.n	800287c <RI_SetRegCommandParser+0x21c>
 80028ca:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 80028ce:	f000 8140 	beq.w	8002b52 <RI_SetRegCommandParser+0x4f2>
 80028d2:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 80028d6:	d1d1      	bne.n	800287c <RI_SetRegCommandParser+0x21c>
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 80028d8:	4b44      	ldr	r3, [pc, #272]	; (80029ec <RI_SetRegCommandParser+0x38c>)
 80028da:	b209      	sxth	r1, r1
      rxData = rxData+size;
 80028dc:	f10c 0404 	add.w	r4, ip, #4
 80028e0:	e7e2      	b.n	80028a8 <RI_SetRegCommandParser+0x248>
 80028e2:	f241 5210 	movw	r2, #5392	; 0x1510
 80028e6:	4293      	cmp	r3, r2
 80028e8:	f000 8120 	beq.w	8002b2c <RI_SetRegCommandParser+0x4cc>
 80028ec:	d945      	bls.n	800297a <RI_SetRegCommandParser+0x31a>
 80028ee:	f241 52d0 	movw	r2, #5584	; 0x15d0
 80028f2:	4293      	cmp	r3, r2
 80028f4:	f000 814d 	beq.w	8002b92 <RI_SetRegCommandParser+0x532>
 80028f8:	d92c      	bls.n	8002954 <RI_SetRegCommandParser+0x2f4>
 80028fa:	f241 6250 	movw	r2, #5712	; 0x1650
 80028fe:	4293      	cmp	r3, r2
 8002900:	f000 8163 	beq.w	8002bca <RI_SetRegCommandParser+0x56a>
 8002904:	f641 3258 	movw	r2, #7000	; 0x1b58
 8002908:	4293      	cmp	r3, r2
 800290a:	d0b0      	beq.n	800286e <RI_SetRegCommandParser+0x20e>
 800290c:	f241 6210 	movw	r2, #5648	; 0x1610
 8002910:	4293      	cmp	r3, r2
 8002912:	d1b3      	bne.n	800287c <RI_SetRegCommandParser+0x21c>
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 8002914:	4b34      	ldr	r3, [pc, #208]	; (80029e8 <RI_SetRegCommandParser+0x388>)
      rxData = rxData+size;
 8002916:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	f005 ffc2 	bl	80088a4 <PID_SetKIDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002920:	1f32      	subs	r2, r6, #4
 8002922:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002924:	2000      	movs	r0, #0
            break;
 8002926:	e6d2      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
 8002928:	2b90      	cmp	r3, #144	; 0x90
 800292a:	f000 813f 	beq.w	8002bac <RI_SetRegCommandParser+0x54c>
 800292e:	2bd0      	cmp	r3, #208	; 0xd0
 8002930:	d1a4      	bne.n	800287c <RI_SetRegCommandParser+0x21c>
            PID_SetKI(pPIDSpeed[motorID], (int16_t)regdata16);
 8002932:	482f      	ldr	r0, [pc, #188]	; (80029f0 <RI_SetRegCommandParser+0x390>)
 8002934:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002936:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKI(pPIDSpeed[motorID], (int16_t)regdata16);
 800293a:	f005 ff99 	bl	8008870 <PID_SetKI>
      rxLength = (int16_t) (rxLength - size);
 800293e:	1f32      	subs	r2, r6, #4
 8002940:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002942:	2000      	movs	r0, #0
            break;
 8002944:	e6c3      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
 8002946:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 800294a:	d090      	beq.n	800286e <RI_SetRegCommandParser+0x20e>
 800294c:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8002950:	d08d      	beq.n	800286e <RI_SetRegCommandParser+0x20e>
 8002952:	e793      	b.n	800287c <RI_SetRegCommandParser+0x21c>
 8002954:	f241 5250 	movw	r2, #5456	; 0x1550
 8002958:	4293      	cmp	r3, r2
 800295a:	f000 813a 	beq.w	8002bd2 <RI_SetRegCommandParser+0x572>
 800295e:	f241 5290 	movw	r2, #5520	; 0x1590
 8002962:	4293      	cmp	r3, r2
 8002964:	d18a      	bne.n	800287c <RI_SetRegCommandParser+0x21c>
            PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 8002966:	4b21      	ldr	r3, [pc, #132]	; (80029ec <RI_SetRegCommandParser+0x38c>)
      rxData = rxData+size;
 8002968:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	f005 ffb5 	bl	80088dc <PID_SetKDDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002972:	1f32      	subs	r2, r6, #4
 8002974:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002976:	2000      	movs	r0, #0
            break;
 8002978:	e6a9      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
 800297a:	f241 4250 	movw	r2, #5200	; 0x1450
 800297e:	4293      	cmp	r3, r2
 8002980:	f000 810b 	beq.w	8002b9a <RI_SetRegCommandParser+0x53a>
 8002984:	d912      	bls.n	80029ac <RI_SetRegCommandParser+0x34c>
 8002986:	f241 4290 	movw	r2, #5264	; 0x1490
 800298a:	4293      	cmp	r3, r2
 800298c:	f000 80d8 	beq.w	8002b40 <RI_SetRegCommandParser+0x4e0>
 8002990:	f241 42d0 	movw	r2, #5328	; 0x14d0
 8002994:	4293      	cmp	r3, r2
 8002996:	f47f af71 	bne.w	800287c <RI_SetRegCommandParser+0x21c>
            PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 800299a:	4815      	ldr	r0, [pc, #84]	; (80029f0 <RI_SetRegCommandParser+0x390>)
      rxData = rxData+size;
 800299c:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 80029a0:	f005 ff9c 	bl	80088dc <PID_SetKDDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 80029a4:	1f32      	subs	r2, r6, #4
 80029a6:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 80029a8:	2000      	movs	r0, #0
            break;
 80029aa:	e690      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
 80029ac:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 80029b0:	d004      	beq.n	80029bc <RI_SetRegCommandParser+0x35c>
 80029b2:	d909      	bls.n	80029c8 <RI_SetRegCommandParser+0x368>
 80029b4:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 80029b8:	f47f af60 	bne.w	800287c <RI_SetRegCommandParser+0x21c>
      rxLength = (int16_t) (rxLength - size);
 80029bc:	1f32      	subs	r2, r6, #4
 80029be:	b212      	sxth	r2, r2
      rxData = rxData+size;
 80029c0:	f10c 0404 	add.w	r4, ip, #4
  uint8_t retVal = MCP_CMD_OK;
 80029c4:	2000      	movs	r0, #0
 80029c6:	e682      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
 80029c8:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 80029cc:	f43f af4f 	beq.w	800286e <RI_SetRegCommandParser+0x20e>
 80029d0:	d912      	bls.n	80029f8 <RI_SetRegCommandParser+0x398>
 80029d2:	f5b3 6f2d 	cmp.w	r3, #2768	; 0xad0
 80029d6:	f43f af4a 	beq.w	800286e <RI_SetRegCommandParser+0x20e>
 80029da:	f5b3 6f31 	cmp.w	r3, #2832	; 0xb10
 80029de:	f43f af46 	beq.w	800286e <RI_SetRegCommandParser+0x20e>
 80029e2:	e74b      	b.n	800287c <RI_SetRegCommandParser+0x21c>
 80029e4:	2000036c 	.word	0x2000036c
 80029e8:	20000350 	.word	0x20000350
 80029ec:	2000034c 	.word	0x2000034c
 80029f0:	200001d0 	.word	0x200001d0
 80029f4:	20000d90 	.word	0x20000d90
 80029f8:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 80029fc:	f5b0 6f21 	cmp.w	r0, #2576	; 0xa10
 8002a00:	f43f af35 	beq.w	800286e <RI_SetRegCommandParser+0x20e>
 8002a04:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8002a08:	f43f af31 	beq.w	800286e <RI_SetRegCommandParser+0x20e>
 8002a0c:	e736      	b.n	800287c <RI_SetRegCommandParser+0x21c>
 8002a0e:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8002a12:	2828      	cmp	r0, #40	; 0x28
 8002a14:	f43f aea8 	beq.w	8002768 <RI_SetRegCommandParser+0x108>
      rxLength = (int16_t) (rxLength - size);
 8002a18:	eba8 0206 	sub.w	r2, r8, r6
      rxData = rxData+size;
 8002a1c:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 8002a1e:	b212      	sxth	r2, r2
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002a20:	2005      	movs	r0, #5
              break;
 8002a22:	e654      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8002a24:	280a      	cmp	r0, #10
 8002a26:	f43f af13 	beq.w	8002850 <RI_SetRegCommandParser+0x1f0>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	e65e      	b.n	80026ee <RI_SetRegCommandParser+0x8e>
      rxLength = (int16_t) (rxLength - size);
 8002a30:	eba8 0203 	sub.w	r2, r8, r3
      rxData = rxData+size;
 8002a34:	441c      	add	r4, r3
      rxLength = (int16_t) (rxLength - size);
 8002a36:	b212      	sxth	r2, r2
        retVal = MCP_ERROR_RO_REG;
 8002a38:	2004      	movs	r0, #4
 8002a3a:	e648      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
      rxLength = (int16_t) (rxLength - size);
 8002a3c:	1ef2      	subs	r2, r6, #3
 8002a3e:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002a40:	f10c 0403 	add.w	r4, ip, #3
            retVal = MCP_ERROR_RO_REG;
 8002a44:	2004      	movs	r0, #4
 8002a46:	e642      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
          retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 8002a48:	200a      	movs	r0, #10
 8002a4a:	e640      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
      rxLength = (int16_t) (rxLength - size);
 8002a4c:	1fb2      	subs	r2, r6, #6
 8002a4e:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002a50:	f10c 0406 	add.w	r4, ip, #6
            retVal = MCP_ERROR_RO_REG;
 8002a54:	2004      	movs	r0, #4
 8002a56:	e63a      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
            uint8_t regdata8 = *data;
 8002a58:	f89c 3002 	ldrb.w	r3, [ip, #2]
            if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d045      	beq.n	8002aec <RI_SetRegCommandParser+0x48c>
            if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d051      	beq.n	8002b08 <RI_SetRegCommandParser+0x4a8>
      rxLength = (int16_t) (rxLength - size);
 8002a64:	1ef2      	subs	r2, r6, #3
 8002a66:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002a68:	f10c 0403 	add.w	r4, ip, #3
  uint8_t retVal = MCP_CMD_OK;
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	e62e      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
            MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8002a70:	f9bc 3002 	ldrsh.w	r3, [ip, #2]
 8002a74:	4a62      	ldr	r2, [pc, #392]	; (8002c00 <RI_SetRegCommandParser+0x5a0>)
 8002a76:	fb82 2103 	smull	r2, r1, r2, r3
 8002a7a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002a7e:	2200      	movs	r2, #0
 8002a80:	4650      	mov	r0, sl
 8002a82:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002a84:	f10c 0406 	add.w	r4, ip, #6
            MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8002a88:	f7fe fe12 	bl	80016b0 <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8002a8c:	1fb2      	subs	r2, r6, #6
 8002a8e:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002a90:	2000      	movs	r0, #0
            break;
 8002a92:	e61c      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
              MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8002a94:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8002a98:	4959      	ldr	r1, [pc, #356]	; (8002c00 <RI_SetRegCommandParser+0x5a0>)
 8002a9a:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 8002a9e:	fb81 0103 	smull	r0, r1, r1, r3
 8002aa2:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002aa6:	4650      	mov	r0, sl
 8002aa8:	b209      	sxth	r1, r1
 8002aaa:	f7fe fe01 	bl	80016b0 <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8002aae:	eba8 0206 	sub.w	r2, r8, r6
      rxData = rxData+size;
 8002ab2:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 8002ab4:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002ab6:	2000      	movs	r0, #0
              break;
 8002ab8:	e609      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
              MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8002aba:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 8002abe:	f9bc 1004 	ldrsh.w	r1, [ip, #4]
 8002ac2:	4650      	mov	r0, sl
 8002ac4:	f7fe fdfe 	bl	80016c4 <MCI_ExecTorqueRamp>
      rxLength = (int16_t) (rxLength - size);
 8002ac8:	eba8 0206 	sub.w	r2, r8, r6
      rxData = rxData+size;
 8002acc:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 8002ace:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002ad0:	2000      	movs	r0, #0
              break;
 8002ad2:	e5fc      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002ad4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8002ad8:	9103      	str	r1, [sp, #12]
              MCI_SetCurrentReferences(pMCIN, currComp);
 8002ada:	4650      	mov	r0, sl
 8002adc:	f7fe fdfc 	bl	80016d8 <MCI_SetCurrentReferences>
      rxLength = (int16_t) (rxLength - size);
 8002ae0:	eba8 0206 	sub.w	r2, r8, r6
      rxData = rxData+size;
 8002ae4:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 8002ae6:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002ae8:	2000      	movs	r0, #0
 8002aea:	e5f0      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
              MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8002aec:	4650      	mov	r0, sl
      rxData = rxData+size;
 8002aee:	f10c 0403 	add.w	r4, ip, #3
              MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8002af2:	f7fe ff05 	bl	8001900 <MCI_GetTeref>
 8002af6:	2200      	movs	r2, #0
 8002af8:	4601      	mov	r1, r0
 8002afa:	4650      	mov	r0, sl
 8002afc:	f7fe fde2 	bl	80016c4 <MCI_ExecTorqueRamp>
      rxLength = (int16_t) (rxLength - size);
 8002b00:	1ef2      	subs	r2, r6, #3
 8002b02:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002b04:	2000      	movs	r0, #0
 8002b06:	e5e2      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
              MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8002b08:	4650      	mov	r0, sl
      rxData = rxData+size;
 8002b0a:	f10c 0403 	add.w	r4, ip, #3
              MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8002b0e:	f7fe fe9f 	bl	8001850 <MCI_GetMecSpeedRefUnit>
 8002b12:	2200      	movs	r2, #0
 8002b14:	4601      	mov	r1, r0
 8002b16:	4650      	mov	r0, sl
 8002b18:	f7fe fdca 	bl	80016b0 <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8002b1c:	1ef2      	subs	r2, r6, #3
 8002b1e:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002b20:	2000      	movs	r0, #0
 8002b22:	e5d4      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002b24:	2201      	movs	r2, #1
  const char_t *tempsrcString = srcString;
 8002b26:	4626      	mov	r6, r4
  *size= 1U ; /* /0 is the min String size */
 8002b28:	4613      	mov	r3, r2
 8002b2a:	e63c      	b.n	80027a6 <RI_SetRegCommandParser+0x146>
            PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 8002b2c:	4b35      	ldr	r3, [pc, #212]	; (8002c04 <RI_SetRegCommandParser+0x5a4>)
      rxData = rxData+size;
 8002b2e:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	f005 feaa 	bl	800888c <PID_SetKPDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002b38:	1f32      	subs	r2, r6, #4
 8002b3a:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002b3c:	2000      	movs	r0, #0
            break;
 8002b3e:	e5c6      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002b40:	4831      	ldr	r0, [pc, #196]	; (8002c08 <RI_SetRegCommandParser+0x5a8>)
      rxData = rxData+size;
 8002b42:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002b46:	f005 fead 	bl	80088a4 <PID_SetKIDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002b4a:	1f32      	subs	r2, r6, #4
 8002b4c:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002b4e:	2000      	movs	r0, #0
            break;
 8002b50:	e5bd      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 8002b52:	4b2c      	ldr	r3, [pc, #176]	; (8002c04 <RI_SetRegCommandParser+0x5a4>)
 8002b54:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002b56:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	f005 fe86 	bl	800886c <PID_SetKP>
      rxLength = (int16_t) (rxLength - size);
 8002b60:	1f32      	subs	r2, r6, #4
 8002b62:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002b64:	2000      	movs	r0, #0
            break;
 8002b66:	e5b2      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 8002b68:	4b26      	ldr	r3, [pc, #152]	; (8002c04 <RI_SetRegCommandParser+0x5a4>)
 8002b6a:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002b6c:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	f005 feab 	bl	80088cc <PID_SetKD>
      rxLength = (int16_t) (rxLength - size);
 8002b76:	1f32      	subs	r2, r6, #4
 8002b78:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002b7a:	2000      	movs	r0, #0
            break;
 8002b7c:	e5a7      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
            PID_SetKD(pPIDSpeed[motorID], (int16_t)regdata16);
 8002b7e:	4822      	ldr	r0, [pc, #136]	; (8002c08 <RI_SetRegCommandParser+0x5a8>)
 8002b80:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002b82:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKD(pPIDSpeed[motorID], (int16_t)regdata16);
 8002b86:	f005 fea1 	bl	80088cc <PID_SetKD>
      rxLength = (int16_t) (rxLength - size);
 8002b8a:	1f32      	subs	r2, r6, #4
 8002b8c:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002b8e:	2000      	movs	r0, #0
            break;
 8002b90:	e59d      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8002b92:	4b1e      	ldr	r3, [pc, #120]	; (8002c0c <RI_SetRegCommandParser+0x5ac>)
      rxData = rxData+size;
 8002b94:	f10c 0404 	add.w	r4, ip, #4
 8002b98:	e7cb      	b.n	8002b32 <RI_SetRegCommandParser+0x4d2>
            PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002b9a:	481b      	ldr	r0, [pc, #108]	; (8002c08 <RI_SetRegCommandParser+0x5a8>)
      rxData = rxData+size;
 8002b9c:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002ba0:	f005 fe74 	bl	800888c <PID_SetKPDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002ba4:	1f32      	subs	r2, r6, #4
 8002ba6:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002ba8:	2000      	movs	r0, #0
            break;
 8002baa:	e590      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
            PID_SetKP(pPIDSpeed[motorID], (int16_t)regdata16);
 8002bac:	4816      	ldr	r0, [pc, #88]	; (8002c08 <RI_SetRegCommandParser+0x5a8>)
 8002bae:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002bb0:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKP(pPIDSpeed[motorID], (int16_t)regdata16);
 8002bb4:	f005 fe5a 	bl	800886c <PID_SetKP>
      rxLength = (int16_t) (rxLength - size);
 8002bb8:	1f32      	subs	r2, r6, #4
 8002bba:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002bbc:	2000      	movs	r0, #0
            break;
 8002bbe:	e586      	b.n	80026ce <RI_SetRegCommandParser+0x6e>
            PID_SetKP(pPIDIq[motorID], (int16_t)regdata16);
 8002bc0:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <RI_SetRegCommandParser+0x5ac>)
 8002bc2:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002bc4:	f10c 0404 	add.w	r4, ip, #4
 8002bc8:	e7c7      	b.n	8002b5a <RI_SetRegCommandParser+0x4fa>
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <RI_SetRegCommandParser+0x5ac>)
      rxData = rxData+size;
 8002bcc:	f10c 0404 	add.w	r4, ip, #4
 8002bd0:	e6cc      	b.n	800296c <RI_SetRegCommandParser+0x30c>
            PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 8002bd2:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <RI_SetRegCommandParser+0x5a4>)
      rxData = rxData+size;
 8002bd4:	f10c 0404 	add.w	r4, ip, #4
 8002bd8:	e69f      	b.n	800291a <RI_SetRegCommandParser+0x2ba>
            currComp = MCI_GetIqdref(pMCIN);
 8002bda:	4650      	mov	r0, sl
 8002bdc:	9101      	str	r1, [sp, #4]
      rxData = rxData+size;
 8002bde:	f10c 0404 	add.w	r4, ip, #4
            currComp = MCI_GetIqdref(pMCIN);
 8002be2:	f7fe fe63 	bl	80018ac <MCI_GetIqdref>
            currComp.d = (int16_t)regdata16;
 8002be6:	9901      	ldr	r1, [sp, #4]
            currComp = MCI_GetIqdref(pMCIN);
 8002be8:	9003      	str	r0, [sp, #12]
            currComp.d = (int16_t)regdata16;
 8002bea:	f8ad 100e 	strh.w	r1, [sp, #14]
 8002bee:	e605      	b.n	80027fc <RI_SetRegCommandParser+0x19c>
            PID_SetKD(pPIDIq[motorID], (int16_t)regdata16);
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <RI_SetRegCommandParser+0x5ac>)
 8002bf2:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002bf4:	f10c 0404 	add.w	r4, ip, #4
 8002bf8:	e7ba      	b.n	8002b70 <RI_SetRegCommandParser+0x510>
 8002bfa:	9800      	ldr	r0, [sp, #0]
 8002bfc:	e5a0      	b.n	8002740 <RI_SetRegCommandParser+0xe0>
 8002bfe:	bf00      	nop
 8002c00:	2aaaaaab 	.word	0x2aaaaaab
 8002c04:	2000034c 	.word	0x2000034c
 8002c08:	200001d0 	.word	0x200001d0
 8002c0c:	20000350 	.word	0x20000350

08002c10 <RI_GetRegCommandParser>:
{
 8002c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t rxLength = pHandle->rxLength;
 8002c14:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t * rxData = pHandle->rxBuffer;
 8002c18:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8002c1c:	6885      	ldr	r5, [r0, #8]
    pHandle->txLength = 0;
 8002c1e:	2300      	movs	r3, #0
{
 8002c20:	b091      	sub	sp, #68	; 0x44
    pHandle->txLength = 0;
 8002c22:	81c3      	strh	r3, [r0, #14]
    while (rxLength > 0U)
 8002c24:	f1b8 0f00 	cmp.w	r8, #0
 8002c28:	f000 82fd 	beq.w	8003226 <RI_GetRegCommandParser+0x616>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8002c2c:	4eaa      	ldr	r6, [pc, #680]	; (8002ed8 <RI_GetRegCommandParser+0x2c8>)
 8002c2e:	4607      	mov	r7, r0
 8002c30:	b209      	sxth	r1, r1
    uint8_t * rxData = pHandle->rxBuffer;
 8002c32:	464c      	mov	r4, r9
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8002c34:	f834 3b02 	ldrh.w	r3, [r4], #2
    switch (typeID)
 8002c38:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002c3c:	3a08      	subs	r2, #8
    uint16_t regID = dataID & REG_MASK;
 8002c3e:	f023 0307 	bic.w	r3, r3, #7
 8002c42:	b29b      	uxth	r3, r3
    switch (typeID)
 8002c44:	2a20      	cmp	r2, #32
 8002c46:	d812      	bhi.n	8002c6e <RI_GetRegCommandParser+0x5e>
 8002c48:	e8df f002 	tbb	[pc, r2]
 8002c4c:	111111af 	.word	0x111111af
 8002c50:	11111111 	.word	0x11111111
 8002c54:	11111167 	.word	0x11111167
 8002c58:	11111111 	.word	0x11111111
 8002c5c:	111111ba 	.word	0x111111ba
 8002c60:	11111111 	.word	0x11111111
 8002c64:	1111112b 	.word	0x1111112b
 8002c68:	11111111 	.word	0x11111111
 8002c6c:	15          	.byte	0x15
 8002c6d:	00          	.byte	0x00
 8002c6e:	2007      	movs	r0, #7
}
 8002c70:	b011      	add	sp, #68	; 0x44
 8002c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rawData++;
 8002c76:	2be8      	cmp	r3, #232	; 0xe8
 8002c78:	f105 0202 	add.w	r2, r5, #2
        switch (regID)
 8002c7c:	f000 82ca 	beq.w	8003214 <RI_GetRegCommandParser+0x604>
 8002c80:	f200 80cb 	bhi.w	8002e1a <RI_GetRegCommandParser+0x20a>
 8002c84:	2b68      	cmp	r3, #104	; 0x68
 8002c86:	f000 827c 	beq.w	8003182 <RI_GetRegCommandParser+0x572>
 8002c8a:	2ba8      	cmp	r3, #168	; 0xa8
 8002c8c:	f040 80b2 	bne.w	8002df4 <RI_GetRegCommandParser+0x1e4>
            *rawSize = sizeof(ApplicationConfig_reg_t);
 8002c90:	230e      	movs	r3, #14
            if ((*rawSize) +2  > freeSpace)
 8002c92:	290f      	cmp	r1, #15
            *rawSize = sizeof(ApplicationConfig_reg_t);
 8002c94:	802b      	strh	r3, [r5, #0]
            if ((*rawSize) +2  > freeSpace)
 8002c96:	f300 8252 	bgt.w	800313e <RI_GetRegCommandParser+0x52e>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002c9a:	2008      	movs	r0, #8
}
 8002c9c:	b011      	add	sp, #68	; 0x44
 8002c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (regID)
 8002ca2:	2ba0      	cmp	r3, #160	; 0xa0
 8002ca4:	f000 821b 	beq.w	80030de <RI_GetRegCommandParser+0x4ce>
 8002ca8:	f200 80d3 	bhi.w	8002e52 <RI_GetRegCommandParser+0x242>
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	f000 822f 	beq.w	8003110 <RI_GetRegCommandParser+0x500>
 8002cb2:	2b60      	cmp	r3, #96	; 0x60
 8002cb4:	f040 8082 	bne.w	8002dbc <RI_GetRegCommandParser+0x1ac>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002cb8:	4b88      	ldr	r3, [pc, #544]	; (8002edc <RI_GetRegCommandParser+0x2cc>)
 8002cba:	f993 0000 	ldrsb.w	r0, [r3]
 8002cbe:	2800      	cmp	r0, #0
 8002cc0:	f000 8250 	beq.w	8003164 <RI_GetRegCommandParser+0x554>
 8002cc4:	2901      	cmp	r1, #1
 8002cc6:	f340 81ff 	ble.w	80030c8 <RI_GetRegCommandParser+0x4b8>
 8002cca:	469e      	mov	lr, r3
 8002ccc:	46ac      	mov	ip, r5
 8002cce:	f1c5 0201 	rsb	r2, r5, #1
 8002cd2:	e002      	b.n	8002cda <RI_GetRegCommandParser+0xca>
 8002cd4:	428b      	cmp	r3, r1
 8002cd6:	f280 81f7 	bge.w	80030c8 <RI_GetRegCommandParser+0x4b8>
    *tempdestString = *tempsrcString;
 8002cda:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002cde:	f91e 0f01 	ldrsb.w	r0, [lr, #1]!
 8002ce2:	eb0c 0302 	add.w	r3, ip, r2
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2800      	cmp	r0, #0
 8002cea:	d1f3      	bne.n	8002cd4 <RI_GetRegCommandParser+0xc4>
        txData = txData+size;
 8002cec:	4618      	mov	r0, r3
    *tempdestString = (int8_t)0;
 8002cee:	2200      	movs	r2, #0
        if (freeSpace >= 2U)
 8002cf0:	fa1f fa81 	uxth.w	sl, r1
    *tempdestString = (int8_t)0;
 8002cf4:	f88c 2000 	strb.w	r2, [ip]
        pHandle->txLength += size;
 8002cf8:	f8b7 c00e 	ldrh.w	ip, [r7, #14]
    while (rxLength > 0U)
 8002cfc:	eb09 0208 	add.w	r2, r9, r8
        pHandle->txLength += size;
 8002d00:	449c      	add	ip, r3
        freeSpaceS16 = freeSpaceS16-size;
 8002d02:	ebaa 0103 	sub.w	r1, sl, r3
    while (rxLength > 0U)
 8002d06:	b292      	uxth	r2, r2
 8002d08:	b2a3      	uxth	r3, r4
 8002d0a:	4293      	cmp	r3, r2
        pHandle->txLength += size;
 8002d0c:	f8a7 c00e 	strh.w	ip, [r7, #14]
        txData = txData+size;
 8002d10:	4405      	add	r5, r0
        freeSpaceS16 = freeSpaceS16-size;
 8002d12:	b209      	sxth	r1, r1
    while (rxLength > 0U)
 8002d14:	d18e      	bne.n	8002c34 <RI_GetRegCommandParser+0x24>
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8002d16:	2000      	movs	r0, #0
 8002d18:	e7aa      	b.n	8002c70 <RI_GetRegCommandParser+0x60>
        if (freeSpace >= 2U)
 8002d1a:	fa1f fa81 	uxth.w	sl, r1
 8002d1e:	f1ba 0f01 	cmp.w	sl, #1
 8002d22:	d9ba      	bls.n	8002c9a <RI_GetRegCommandParser+0x8a>
          switch (regID)
 8002d24:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8002d28:	f000 82d5 	beq.w	80032d6 <RI_GetRegCommandParser+0x6c6>
 8002d2c:	d81d      	bhi.n	8002d6a <RI_GetRegCommandParser+0x15a>
 8002d2e:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8002d32:	f000 82ea 	beq.w	800330a <RI_GetRegCommandParser+0x6fa>
 8002d36:	f240 8160 	bls.w	8002ffa <RI_GetRegCommandParser+0x3ea>
 8002d3a:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8002d3e:	f000 8294 	beq.w	800326a <RI_GetRegCommandParser+0x65a>
 8002d42:	f240 8147 	bls.w	8002fd4 <RI_GetRegCommandParser+0x3c4>
 8002d46:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8002d4a:	f000 8286 	beq.w	800325a <RI_GetRegCommandParser+0x64a>
 8002d4e:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8002d52:	f040 8131 	bne.w	8002fb8 <RI_GetRegCommandParser+0x3a8>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 8002d56:	4862      	ldr	r0, [pc, #392]	; (8002ee0 <RI_GetRegCommandParser+0x2d0>)
 8002d58:	f7fe fd9a 	bl	8001890 <MCI_GetIqd>
 8002d5c:	900a      	str	r0, [sp, #40]	; 0x28
 8002d5e:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002d62:	8028      	strh	r0, [r5, #0]
              break;
 8002d64:	2002      	movs	r0, #2
          *size = 2;
 8002d66:	4603      	mov	r3, r0
              break;
 8002d68:	e7c6      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
 8002d6a:	f241 4250 	movw	r2, #5200	; 0x1450
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	f000 82aa 	beq.w	80032c8 <RI_GetRegCommandParser+0x6b8>
 8002d74:	f240 80cf 	bls.w	8002f16 <RI_GetRegCommandParser+0x306>
 8002d78:	f241 5290 	movw	r2, #5520	; 0x1590
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	f000 827e 	beq.w	800327e <RI_GetRegCommandParser+0x66e>
 8002d82:	f240 80b5 	bls.w	8002ef0 <RI_GetRegCommandParser+0x2e0>
 8002d86:	f241 6210 	movw	r2, #5648	; 0x1610
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	f000 8275 	beq.w	800327a <RI_GetRegCommandParser+0x66a>
 8002d90:	f241 6250 	movw	r2, #5712	; 0x1650
 8002d94:	4293      	cmp	r3, r2
 8002d96:	f040 8091 	bne.w	8002ebc <RI_GetRegCommandParser+0x2ac>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 8002d9a:	4b52      	ldr	r3, [pc, #328]	; (8002ee4 <RI_GetRegCommandParser+0x2d4>)
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	f005 fd9b 	bl	80088d8 <PID_GetKDDivisorPOW2>
 8002da2:	8028      	strh	r0, [r5, #0]
 8002da4:	2002      	movs	r0, #2
          *size = 2;
 8002da6:	4603      	mov	r3, r0
 8002da8:	e7a6      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
        if (freeSpace > 0U)
 8002daa:	2900      	cmp	r1, #0
 8002dac:	f43f af75 	beq.w	8002c9a <RI_GetRegCommandParser+0x8a>
          switch (regID)
 8002db0:	2b48      	cmp	r3, #72	; 0x48
 8002db2:	f000 818b 	beq.w	80030cc <RI_GetRegCommandParser+0x4bc>
 8002db6:	2b88      	cmp	r3, #136	; 0x88
 8002db8:	f000 817d 	beq.w	80030b6 <RI_GetRegCommandParser+0x4a6>
 8002dbc:	2005      	movs	r0, #5
 8002dbe:	e757      	b.n	8002c70 <RI_GetRegCommandParser+0x60>
        if (freeSpace >= 4U)
 8002dc0:	fa1f fa81 	uxth.w	sl, r1
 8002dc4:	f1ba 0f03 	cmp.w	sl, #3
 8002dc8:	f67f af67 	bls.w	8002c9a <RI_GetRegCommandParser+0x8a>
          switch (regID)
 8002dcc:	2b98      	cmp	r3, #152	; 0x98
 8002dce:	f000 81d4 	beq.w	800317a <RI_GetRegCommandParser+0x56a>
 8002dd2:	f200 8160 	bhi.w	8003096 <RI_GetRegCommandParser+0x486>
 8002dd6:	2b18      	cmp	r3, #24
 8002dd8:	f000 81c8 	beq.w	800316c <RI_GetRegCommandParser+0x55c>
 8002ddc:	2b58      	cmp	r3, #88	; 0x58
 8002dde:	d1ed      	bne.n	8002dbc <RI_GetRegCommandParser+0x1ac>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002de0:	483f      	ldr	r0, [pc, #252]	; (8002ee0 <RI_GetRegCommandParser+0x2d0>)
 8002de2:	f7fe fd2d 	bl	8001840 <MCI_GetAvrgMecSpeedUnit>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002de6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002dea:	0040      	lsls	r0, r0, #1
 8002dec:	6028      	str	r0, [r5, #0]
 8002dee:	2004      	movs	r0, #4
          *size = 4;
 8002df0:	4603      	mov	r3, r0
 8002df2:	e781      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
 8002df4:	2b28      	cmp	r3, #40	; 0x28
 8002df6:	d1e1      	bne.n	8002dbc <RI_GetRegCommandParser+0x1ac>
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8002df8:	230a      	movs	r3, #10
            if (((*rawSize) + 2U) > freeSpace)
 8002dfa:	290b      	cmp	r1, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8002dfc:	802b      	strh	r3, [r5, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8002dfe:	f67f af4c 	bls.w	8002c9a <RI_GetRegCommandParser+0x8a>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002e02:	4b39      	ldr	r3, [pc, #228]	; (8002ee8 <RI_GetRegCommandParser+0x2d8>)
        if (freeSpace >= 2U)
 8002e04:	fa1f fa81 	uxth.w	sl, r1
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002e08:	6819      	ldr	r1, [r3, #0]
 8002e0a:	6011      	str	r1, [r2, #0]
        if (freeSpace >= 2U)
 8002e0c:	200c      	movs	r0, #12
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	891b      	ldrh	r3, [r3, #8]
 8002e12:	8113      	strh	r3, [r2, #8]
 8002e14:	6051      	str	r1, [r2, #4]
        *size = (*rawSize) + 2U;
 8002e16:	4603      	mov	r3, r0
 8002e18:	e76e      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
 8002e1a:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8002e1e:	f000 81ed 	beq.w	80031fc <RI_GetRegCommandParser+0x5ec>
 8002e22:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8002e26:	d133      	bne.n	8002e90 <RI_GetRegCommandParser+0x280>
            *rawSize = 4;
 8002e28:	2304      	movs	r3, #4
 8002e2a:	802b      	strh	r3, [r5, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8002e2c:	482c      	ldr	r0, [pc, #176]	; (8002ee0 <RI_GetRegCommandParser+0x2d0>)
        if (freeSpace >= 2U)
 8002e2e:	fa1f fa81 	uxth.w	sl, r1
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8002e32:	f7fe fd3b 	bl	80018ac <MCI_GetIqdref>
 8002e36:	8068      	strh	r0, [r5, #2]
 8002e38:	9003      	str	r0, [sp, #12]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002e3a:	4829      	ldr	r0, [pc, #164]	; (8002ee0 <RI_GetRegCommandParser+0x2d0>)
 8002e3c:	f7fe fd36 	bl	80018ac <MCI_GetIqdref>
 8002e40:	9002      	str	r0, [sp, #8]
 8002e42:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 8002e46:	882b      	ldrh	r3, [r5, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002e48:	80a8      	strh	r0, [r5, #4]
        *size = (*rawSize) + 2U;
 8002e4a:	3302      	adds	r3, #2
 8002e4c:	b29b      	uxth	r3, r3
        txData = txData+size;
 8002e4e:	4618      	mov	r0, r3
 8002e50:	e752      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
 8002e52:	2be0      	cmp	r3, #224	; 0xe0
 8002e54:	d1b2      	bne.n	8002dbc <RI_GetRegCommandParser+0x1ac>
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8002e56:	4b25      	ldr	r3, [pc, #148]	; (8002eec <RI_GetRegCommandParser+0x2dc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002e5a:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	f000 8180 	beq.w	8003164 <RI_GetRegCommandParser+0x554>
 8002e64:	2901      	cmp	r1, #1
 8002e66:	f340 812f 	ble.w	80030c8 <RI_GetRegCommandParser+0x4b8>
 8002e6a:	f103 0e24 	add.w	lr, r3, #36	; 0x24
 8002e6e:	46ac      	mov	ip, r5
 8002e70:	f1c5 0201 	rsb	r2, r5, #1
 8002e74:	e002      	b.n	8002e7c <RI_GetRegCommandParser+0x26c>
 8002e76:	428b      	cmp	r3, r1
 8002e78:	f280 8126 	bge.w	80030c8 <RI_GetRegCommandParser+0x4b8>
    *tempdestString = *tempsrcString;
 8002e7c:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002e80:	f91e 0f01 	ldrsb.w	r0, [lr, #1]!
 8002e84:	eb0c 0302 	add.w	r3, ip, r2
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2800      	cmp	r0, #0
 8002e8c:	d1f3      	bne.n	8002e76 <RI_GetRegCommandParser+0x266>
 8002e8e:	e72d      	b.n	8002cec <RI_GetRegCommandParser+0xdc>
 8002e90:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8002e94:	d192      	bne.n	8002dbc <RI_GetRegCommandParser+0x1ac>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8002e96:	4812      	ldr	r0, [pc, #72]	; (8002ee0 <RI_GetRegCommandParser+0x2d0>)
        if (freeSpace >= 2U)
 8002e98:	fa1f fa81 	uxth.w	sl, r1
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8002e9c:	f7fe fcc2 	bl	8001824 <MCI_GetLastRampFinalSpeed>
 8002ea0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002ea4:	0040      	lsls	r0, r0, #1
 8002ea6:	f8c5 0002 	str.w	r0, [r5, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8002eaa:	480d      	ldr	r0, [pc, #52]	; (8002ee0 <RI_GetRegCommandParser+0x2d0>)
 8002eac:	f7fe fcc2 	bl	8001834 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8002eb0:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8002eb2:	80e8      	strh	r0, [r5, #6]
        if (freeSpace >= 2U)
 8002eb4:	2008      	movs	r0, #8
            *rawSize = 6;
 8002eb6:	802b      	strh	r3, [r5, #0]
        *size = (*rawSize) + 2U;
 8002eb8:	4603      	mov	r3, r0
 8002eba:	e71d      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
 8002ebc:	f241 52d0 	movw	r2, #5584	; 0x15d0
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	f47f af7b 	bne.w	8002dbc <RI_GetRegCommandParser+0x1ac>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 8002ec6:	4b07      	ldr	r3, [pc, #28]	; (8002ee4 <RI_GetRegCommandParser+0x2d4>)
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	f005 fcdd 	bl	8008888 <PID_GetKPDivisorPOW2>
 8002ece:	8028      	strh	r0, [r5, #0]
 8002ed0:	2002      	movs	r0, #2
          *size = 2;
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	e710      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
 8002ed6:	bf00      	nop
 8002ed8:	20000360 	.word	0x20000360
 8002edc:	08009ee8 	.word	0x08009ee8
 8002ee0:	20000d90 	.word	0x20000d90
 8002ee4:	20000350 	.word	0x20000350
 8002ee8:	08009f78 	.word	0x08009f78
 8002eec:	20000364 	.word	0x20000364
 8002ef0:	f241 5210 	movw	r2, #5392	; 0x1510
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	f000 820a 	beq.w	800330e <RI_GetRegCommandParser+0x6fe>
 8002efa:	d93c      	bls.n	8002f76 <RI_GetRegCommandParser+0x366>
 8002efc:	f241 5250 	movw	r2, #5456	; 0x1550
 8002f00:	4293      	cmp	r3, r2
 8002f02:	f47f af5b 	bne.w	8002dbc <RI_GetRegCommandParser+0x1ac>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 8002f06:	4bb2      	ldr	r3, [pc, #712]	; (80031d0 <RI_GetRegCommandParser+0x5c0>)
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	f005 fcc5 	bl	8008898 <PID_GetKIDivisorPOW2>
 8002f0e:	8028      	strh	r0, [r5, #0]
 8002f10:	2002      	movs	r0, #2
          *size = 2;
 8002f12:	4603      	mov	r3, r0
 8002f14:	e6f0      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
 8002f16:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8002f1a:	f000 81b9 	beq.w	8003290 <RI_GetRegCommandParser+0x680>
 8002f1e:	d919      	bls.n	8002f54 <RI_GetRegCommandParser+0x344>
 8002f20:	f5b3 6f31 	cmp.w	r3, #2832	; 0xb10
 8002f24:	f000 81ad 	beq.w	8003282 <RI_GetRegCommandParser+0x672>
 8002f28:	d909      	bls.n	8002f3e <RI_GetRegCommandParser+0x32e>
 8002f2a:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 8002f2e:	d003      	beq.n	8002f38 <RI_GetRegCommandParser+0x328>
 8002f30:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8002f34:	f47f af42 	bne.w	8002dbc <RI_GetRegCommandParser+0x1ac>
 8002f38:	2002      	movs	r0, #2
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	e6dc      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
 8002f3e:	f5b3 6f2d 	cmp.w	r3, #2768	; 0xad0
 8002f42:	f47f af3b 	bne.w	8002dbc <RI_GetRegCommandParser+0x1ac>
              *regdata16 = SPD_GetElAngle ((SpeednPosFdbk_Handle_t*) pEncoder[motorID]); //cstat !MISRAC2012-Rule-11.3
 8002f46:	48a3      	ldr	r0, [pc, #652]	; (80031d4 <RI_GetRegCommandParser+0x5c4>)
 8002f48:	f006 fd9c 	bl	8009a84 <SPD_GetElAngle>
 8002f4c:	8028      	strh	r0, [r5, #0]
 8002f4e:	2002      	movs	r0, #2
          *size = 2;
 8002f50:	4603      	mov	r3, r0
 8002f52:	e6d1      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
 8002f54:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8002f58:	f000 8175 	beq.w	8003246 <RI_GetRegCommandParser+0x636>
 8002f5c:	d91c      	bls.n	8002f98 <RI_GetRegCommandParser+0x388>
 8002f5e:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8002f62:	f47f af2b 	bne.w	8002dbc <RI_GetRegCommandParser+0x1ac>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8002f66:	489c      	ldr	r0, [pc, #624]	; (80031d8 <RI_GetRegCommandParser+0x5c8>)
 8002f68:	f7fe fcbc 	bl	80018e4 <MCI_GetValphabeta>
 8002f6c:	9005      	str	r0, [sp, #20]
 8002f6e:	8028      	strh	r0, [r5, #0]
 8002f70:	2002      	movs	r0, #2
          *size = 2;
 8002f72:	4603      	mov	r3, r0
 8002f74:	e6c0      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
 8002f76:	f241 4290 	movw	r2, #5264	; 0x1490
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	f000 815c 	beq.w	8003238 <RI_GetRegCommandParser+0x628>
 8002f80:	f241 42d0 	movw	r2, #5328	; 0x14d0
 8002f84:	4293      	cmp	r3, r2
 8002f86:	f47f af19 	bne.w	8002dbc <RI_GetRegCommandParser+0x1ac>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 8002f8a:	4894      	ldr	r0, [pc, #592]	; (80031dc <RI_GetRegCommandParser+0x5cc>)
 8002f8c:	f005 fca4 	bl	80088d8 <PID_GetKDDivisorPOW2>
 8002f90:	8028      	strh	r0, [r5, #0]
 8002f92:	2002      	movs	r0, #2
          *size = 2;
 8002f94:	4603      	mov	r3, r0
 8002f96:	e6af      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
 8002f98:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8002f9c:	f000 818a 	beq.w	80032b4 <RI_GetRegCommandParser+0x6a4>
 8002fa0:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8002fa4:	f47f af0a 	bne.w	8002dbc <RI_GetRegCommandParser+0x1ac>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8002fa8:	488b      	ldr	r0, [pc, #556]	; (80031d8 <RI_GetRegCommandParser+0x5c8>)
 8002faa:	f7fe fc8d 	bl	80018c8 <MCI_GetVqd>
 8002fae:	9007      	str	r0, [sp, #28]
 8002fb0:	8028      	strh	r0, [r5, #0]
 8002fb2:	2002      	movs	r0, #2
          *size = 2;
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	e69f      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
 8002fb8:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8002fbc:	f47f aefe 	bne.w	8002dbc <RI_GetRegCommandParser+0x1ac>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 8002fc0:	4885      	ldr	r0, [pc, #532]	; (80031d8 <RI_GetRegCommandParser+0x5c8>)
 8002fc2:	f7fe fc57 	bl	8001874 <MCI_GetIalphabeta>
 8002fc6:	900c      	str	r0, [sp, #48]	; 0x30
 8002fc8:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002fcc:	8028      	strh	r0, [r5, #0]
              break;
 8002fce:	2002      	movs	r0, #2
          *size = 2;
 8002fd0:	4603      	mov	r3, r0
              break;
 8002fd2:	e691      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
 8002fd4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002fd8:	f000 8164 	beq.w	80032a4 <RI_GetRegCommandParser+0x694>
 8002fdc:	d921      	bls.n	8003022 <RI_GetRegCommandParser+0x412>
 8002fde:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8002fe2:	f47f aeeb 	bne.w	8002dbc <RI_GetRegCommandParser+0x1ac>
              *regdata16 = MCI_GetIab(pMCIN).b;
 8002fe6:	487c      	ldr	r0, [pc, #496]	; (80031d8 <RI_GetRegCommandParser+0x5c8>)
 8002fe8:	f7fe fc36 	bl	8001858 <MCI_GetIab>
 8002fec:	900e      	str	r0, [sp, #56]	; 0x38
 8002fee:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002ff2:	8028      	strh	r0, [r5, #0]
              break;
 8002ff4:	2002      	movs	r0, #2
          *size = 2;
 8002ff6:	4603      	mov	r3, r0
              break;
 8002ff8:	e67e      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
 8002ffa:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8002ffe:	f000 8182 	beq.w	8003306 <RI_GetRegCommandParser+0x6f6>
 8003002:	d92a      	bls.n	800305a <RI_GetRegCommandParser+0x44a>
 8003004:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 8003008:	f000 817b 	beq.w	8003302 <RI_GetRegCommandParser+0x6f2>
 800300c:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8003010:	d117      	bne.n	8003042 <RI_GetRegCommandParser+0x432>
              *regdata16 = PID_GetKI(pPIDId[motorID]);
 8003012:	4b6f      	ldr	r3, [pc, #444]	; (80031d0 <RI_GetRegCommandParser+0x5c0>)
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	f005 fc31 	bl	800887c <PID_GetKI>
 800301a:	8028      	strh	r0, [r5, #0]
              break;
 800301c:	2002      	movs	r0, #2
          *size = 2;
 800301e:	4603      	mov	r3, r0
              break;
 8003020:	e66a      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
 8003022:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 8003026:	f000 8165 	beq.w	80032f4 <RI_GetRegCommandParser+0x6e4>
 800302a:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 800302e:	f47f aec5 	bne.w	8002dbc <RI_GetRegCommandParser+0x1ac>
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 8003032:	4b6b      	ldr	r3, [pc, #428]	; (80031e0 <RI_GetRegCommandParser+0x5d0>)
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	f005 fbff 	bl	8008838 <NTC_GetAvTemp_C>
 800303a:	8028      	strh	r0, [r5, #0]
              break;
 800303c:	2002      	movs	r0, #2
          *size = 2;
 800303e:	4603      	mov	r3, r0
              break;
 8003040:	e65a      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
 8003042:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8003046:	f47f aeb9 	bne.w	8002dbc <RI_GetRegCommandParser+0x1ac>
              *regdata16 = PID_GetKD(pPIDIq[motorID]);
 800304a:	4b66      	ldr	r3, [pc, #408]	; (80031e4 <RI_GetRegCommandParser+0x5d4>)
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	f005 fc3f 	bl	80088d0 <PID_GetKD>
 8003052:	8028      	strh	r0, [r5, #0]
              break;
 8003054:	2002      	movs	r0, #2
          *size = 2;
 8003056:	4603      	mov	r3, r0
              break;
 8003058:	e64e      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
 800305a:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800305e:	f000 8142 	beq.w	80032e6 <RI_GetRegCommandParser+0x6d6>
 8003062:	d90b      	bls.n	800307c <RI_GetRegCommandParser+0x46c>
 8003064:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003068:	f47f aea8 	bne.w	8002dbc <RI_GetRegCommandParser+0x1ac>
              *regdata16 = PID_GetKP(pPIDIq[motorID]);
 800306c:	4b5d      	ldr	r3, [pc, #372]	; (80031e4 <RI_GetRegCommandParser+0x5d4>)
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	f005 fc00 	bl	8008874 <PID_GetKP>
 8003074:	8028      	strh	r0, [r5, #0]
              break;
 8003076:	2002      	movs	r0, #2
          *size = 2;
 8003078:	4603      	mov	r3, r0
              break;
 800307a:	e63d      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
 800307c:	2b90      	cmp	r3, #144	; 0x90
 800307e:	f000 80d4 	beq.w	800322a <RI_GetRegCommandParser+0x61a>
 8003082:	2bd0      	cmp	r3, #208	; 0xd0
 8003084:	f47f ae9a 	bne.w	8002dbc <RI_GetRegCommandParser+0x1ac>
              *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 8003088:	4854      	ldr	r0, [pc, #336]	; (80031dc <RI_GetRegCommandParser+0x5cc>)
 800308a:	f005 fbf7 	bl	800887c <PID_GetKI>
 800308e:	8028      	strh	r0, [r5, #0]
              break;
 8003090:	2002      	movs	r0, #2
          *size = 2;
 8003092:	4603      	mov	r3, r0
              break;
 8003094:	e630      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
 8003096:	f641 3258 	movw	r2, #7000	; 0x1b58
 800309a:	4293      	cmp	r3, r2
 800309c:	f47f ae8e 	bne.w	8002dbc <RI_GetRegCommandParser+0x1ac>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 80030a0:	4b51      	ldr	r3, [pc, #324]	; (80031e8 <RI_GetRegCommandParser+0x5d8>)
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	f005 fc84 	bl	80089b0 <PQD_GetAvrgElMotorPowerW>
 80030a8:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 80030ac:	9b01      	ldr	r3, [sp, #4]
 80030ae:	602b      	str	r3, [r5, #0]
 80030b0:	2004      	movs	r0, #4
          *size = 4;
 80030b2:	4603      	mov	r3, r0
 80030b4:	e620      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 80030b6:	4848      	ldr	r0, [pc, #288]	; (80031d8 <RI_GetRegCommandParser+0x5c8>)
        if (freeSpace >= 2U)
 80030b8:	fa1f fa81 	uxth.w	sl, r1
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 80030bc:	f7fe fbb0 	bl	8001820 <MCI_GetControlMode>
 80030c0:	7028      	strb	r0, [r5, #0]
              break;
 80030c2:	2001      	movs	r0, #1
          *size = 1;
 80030c4:	4603      	mov	r3, r0
              break;
 80030c6:	e617      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
    retVal = MCP_ERROR_STRING_FORMAT;
 80030c8:	2006      	movs	r0, #6
 80030ca:	e5d1      	b.n	8002c70 <RI_GetRegCommandParser+0x60>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 80030cc:	4842      	ldr	r0, [pc, #264]	; (80031d8 <RI_GetRegCommandParser+0x5c8>)
        if (freeSpace >= 2U)
 80030ce:	fa1f fa81 	uxth.w	sl, r1
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 80030d2:	f7fe fb51 	bl	8001778 <MCI_GetSTMState>
 80030d6:	7028      	strb	r0, [r5, #0]
        if (freeSpace >= 2U)
 80030d8:	2001      	movs	r0, #1
          *size = 1;
 80030da:	4603      	mov	r3, r0
 80030dc:	e60c      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 80030de:	4b43      	ldr	r3, [pc, #268]	; (80031ec <RI_GetRegCommandParser+0x5dc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80030e2:	f993 0000 	ldrsb.w	r0, [r3]
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d03c      	beq.n	8003164 <RI_GetRegCommandParser+0x554>
 80030ea:	2901      	cmp	r1, #1
 80030ec:	ddec      	ble.n	80030c8 <RI_GetRegCommandParser+0x4b8>
 80030ee:	469e      	mov	lr, r3
 80030f0:	46ac      	mov	ip, r5
 80030f2:	f1c5 0201 	rsb	r2, r5, #1
 80030f6:	e001      	b.n	80030fc <RI_GetRegCommandParser+0x4ec>
 80030f8:	428b      	cmp	r3, r1
 80030fa:	dae5      	bge.n	80030c8 <RI_GetRegCommandParser+0x4b8>
    *tempdestString = *tempsrcString;
 80030fc:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003100:	f91e 0f01 	ldrsb.w	r0, [lr, #1]!
 8003104:	eb0c 0302 	add.w	r3, ip, r2
 8003108:	b29b      	uxth	r3, r3
 800310a:	2800      	cmp	r0, #0
 800310c:	d1f4      	bne.n	80030f8 <RI_GetRegCommandParser+0x4e8>
 800310e:	e5ed      	b.n	8002cec <RI_GetRegCommandParser+0xdc>
 8003110:	4b37      	ldr	r3, [pc, #220]	; (80031f0 <RI_GetRegCommandParser+0x5e0>)
 8003112:	f993 0000 	ldrsb.w	r0, [r3]
 8003116:	b328      	cbz	r0, 8003164 <RI_GetRegCommandParser+0x554>
 8003118:	2901      	cmp	r1, #1
 800311a:	ddd5      	ble.n	80030c8 <RI_GetRegCommandParser+0x4b8>
 800311c:	469e      	mov	lr, r3
 800311e:	46ac      	mov	ip, r5
 8003120:	f1c5 0201 	rsb	r2, r5, #1
 8003124:	e001      	b.n	800312a <RI_GetRegCommandParser+0x51a>
 8003126:	428b      	cmp	r3, r1
 8003128:	dace      	bge.n	80030c8 <RI_GetRegCommandParser+0x4b8>
    *tempdestString = *tempsrcString;
 800312a:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800312e:	f91e 0f01 	ldrsb.w	r0, [lr, #1]!
 8003132:	eb0c 0302 	add.w	r3, ip, r2
 8003136:	b29b      	uxth	r3, r3
 8003138:	2800      	cmp	r0, #0
 800313a:	d1f4      	bne.n	8003126 <RI_GetRegCommandParser+0x516>
 800313c:	e5d6      	b.n	8002cec <RI_GetRegCommandParser+0xdc>
              memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
 800313e:	4b2d      	ldr	r3, [pc, #180]	; (80031f4 <RI_GetRegCommandParser+0x5e4>)
 8003140:	681b      	ldr	r3, [r3, #0]
        if (freeSpace >= 2U)
 8003142:	fa1f fa81 	uxth.w	sl, r1
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8003146:	f8d3 c000 	ldr.w	ip, [r3]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8003150:	f8c2 e008 	str.w	lr, [r2, #8]
 8003154:	f8c2 c000 	str.w	ip, [r2]
 8003158:	6051      	str	r1, [r2, #4]
 800315a:	899b      	ldrh	r3, [r3, #12]
 800315c:	8193      	strh	r3, [r2, #12]
        if (freeSpace >= 2U)
 800315e:	2010      	movs	r0, #16
        *size = (*rawSize) + 2U;
 8003160:	4603      	mov	r3, r0
 8003162:	e5c9      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003164:	2001      	movs	r0, #1
 8003166:	46ac      	mov	ip, r5
  *size= 1U ; /* /0 is the min String size */
 8003168:	4603      	mov	r3, r0
 800316a:	e5c0      	b.n	8002cee <RI_GetRegCommandParser+0xde>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 800316c:	481a      	ldr	r0, [pc, #104]	; (80031d8 <RI_GetRegCommandParser+0x5c8>)
 800316e:	f7fe fb51 	bl	8001814 <MCI_GetFaultState>
 8003172:	6028      	str	r0, [r5, #0]
 8003174:	2004      	movs	r0, #4
          *size = 4;
 8003176:	4603      	mov	r3, r0
 8003178:	e5be      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 800317a:	4817      	ldr	r0, [pc, #92]	; (80031d8 <RI_GetRegCommandParser+0x5c8>)
 800317c:	f7fe fb68 	bl	8001850 <MCI_GetMecSpeedRefUnit>
 8003180:	e631      	b.n	8002de6 <RI_GetRegCommandParser+0x1d6>
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8003182:	233c      	movs	r3, #60	; 0x3c
            if (((*rawSize) + 2U) > freeSpace)
 8003184:	293d      	cmp	r1, #61	; 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8003186:	802b      	strh	r3, [r5, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8003188:	f67f ad87 	bls.w	8002c9a <RI_GetRegCommandParser+0x8a>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 800318c:	4b1a      	ldr	r3, [pc, #104]	; (80031f8 <RI_GetRegCommandParser+0x5e8>)
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f103 0b30 	add.w	fp, r3, #48	; 0x30
 8003194:	f8d3 e000 	ldr.w	lr, [r3]
 8003198:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800319c:	6898      	ldr	r0, [r3, #8]
 800319e:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 80031a2:	f8c2 a00c 	str.w	sl, [r2, #12]
 80031a6:	3310      	adds	r3, #16
 80031a8:	455b      	cmp	r3, fp
 80031aa:	f8c2 e000 	str.w	lr, [r2]
 80031ae:	f8c2 c004 	str.w	ip, [r2, #4]
 80031b2:	6090      	str	r0, [r2, #8]
 80031b4:	f102 0210 	add.w	r2, r2, #16
 80031b8:	d1ec      	bne.n	8003194 <RI_GetRegCommandParser+0x584>
 80031ba:	6818      	ldr	r0, [r3, #0]
        if (freeSpace >= 2U)
 80031bc:	fa1f fa81 	uxth.w	sl, r1
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80031c0:	6859      	ldr	r1, [r3, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	6010      	str	r0, [r2, #0]
        if (freeSpace >= 2U)
 80031c6:	203e      	movs	r0, #62	; 0x3e
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80031c8:	6093      	str	r3, [r2, #8]
 80031ca:	6051      	str	r1, [r2, #4]
        *size = (*rawSize) + 2U;
 80031cc:	4603      	mov	r3, r0
 80031ce:	e593      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
 80031d0:	2000034c 	.word	0x2000034c
 80031d4:	200000e0 	.word	0x200000e0
 80031d8:	20000d90 	.word	0x20000d90
 80031dc:	200001d0 	.word	0x200001d0
 80031e0:	20000358 	.word	0x20000358
 80031e4:	20000350 	.word	0x20000350
 80031e8:	20000348 	.word	0x20000348
 80031ec:	20000368 	.word	0x20000368
 80031f0:	08009ef8 	.word	0x08009ef8
 80031f4:	2000035c 	.word	0x2000035c
 80031f8:	20000364 	.word	0x20000364
            *rawSize = 4;
 80031fc:	2304      	movs	r3, #4
 80031fe:	802b      	strh	r3, [r5, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8003200:	4844      	ldr	r0, [pc, #272]	; (8003314 <RI_GetRegCommandParser+0x704>)
        if (freeSpace >= 2U)
 8003202:	fa1f fa81 	uxth.w	sl, r1
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8003206:	f7fe fb11 	bl	800182c <MCI_GetLastRampFinalTorque>
 800320a:	8068      	strh	r0, [r5, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 800320c:	4841      	ldr	r0, [pc, #260]	; (8003314 <RI_GetRegCommandParser+0x704>)
 800320e:	f7fe fb11 	bl	8001834 <MCI_GetLastRampFinalDuration>
 8003212:	e618      	b.n	8002e46 <RI_GetRegCommandParser+0x236>
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003214:	230e      	movs	r3, #14
            if (((*rawSize) + 2U) > freeSpace)
 8003216:	290f      	cmp	r1, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003218:	802b      	strh	r3, [r5, #0]
            if (((*rawSize) + 2U) > freeSpace)
 800321a:	f67f ad3e 	bls.w	8002c9a <RI_GetRegCommandParser+0x8a>
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 800321e:	6833      	ldr	r3, [r6, #0]
        if (freeSpace >= 2U)
 8003220:	fa1f fa81 	uxth.w	sl, r1
 8003224:	e78f      	b.n	8003146 <RI_GetRegCommandParser+0x536>
  uint8_t retVal = MCP_CMD_NOK;
 8003226:	2001      	movs	r0, #1
 8003228:	e522      	b.n	8002c70 <RI_GetRegCommandParser+0x60>
              *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 800322a:	483b      	ldr	r0, [pc, #236]	; (8003318 <RI_GetRegCommandParser+0x708>)
 800322c:	f005 fb22 	bl	8008874 <PID_GetKP>
 8003230:	8028      	strh	r0, [r5, #0]
 8003232:	2002      	movs	r0, #2
          *size = 2;
 8003234:	4603      	mov	r3, r0
 8003236:	e55f      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 8003238:	4837      	ldr	r0, [pc, #220]	; (8003318 <RI_GetRegCommandParser+0x708>)
 800323a:	f005 fb2d 	bl	8008898 <PID_GetKIDivisorPOW2>
 800323e:	8028      	strh	r0, [r5, #0]
 8003240:	2002      	movs	r0, #2
          *size = 2;
 8003242:	4603      	mov	r3, r0
 8003244:	e558      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 8003246:	4833      	ldr	r0, [pc, #204]	; (8003314 <RI_GetRegCommandParser+0x704>)
 8003248:	f7fe fb3e 	bl	80018c8 <MCI_GetVqd>
 800324c:	9006      	str	r0, [sp, #24]
 800324e:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8003252:	8028      	strh	r0, [r5, #0]
 8003254:	2002      	movs	r0, #2
          *size = 2;
 8003256:	4603      	mov	r3, r0
 8003258:	e54e      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 800325a:	482e      	ldr	r0, [pc, #184]	; (8003314 <RI_GetRegCommandParser+0x704>)
 800325c:	f7fe fb18 	bl	8001890 <MCI_GetIqd>
 8003260:	900b      	str	r0, [sp, #44]	; 0x2c
 8003262:	8028      	strh	r0, [r5, #0]
              break;
 8003264:	2002      	movs	r0, #2
          *size = 2;
 8003266:	4603      	mov	r3, r0
              break;
 8003268:	e546      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 800326a:	482a      	ldr	r0, [pc, #168]	; (8003314 <RI_GetRegCommandParser+0x704>)
 800326c:	f7fe fb02 	bl	8001874 <MCI_GetIalphabeta>
 8003270:	900d      	str	r0, [sp, #52]	; 0x34
 8003272:	8028      	strh	r0, [r5, #0]
              break;
 8003274:	2002      	movs	r0, #2
          *size = 2;
 8003276:	4603      	mov	r3, r0
              break;
 8003278:	e53e      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 800327a:	4b28      	ldr	r3, [pc, #160]	; (800331c <RI_GetRegCommandParser+0x70c>)
 800327c:	e644      	b.n	8002f08 <RI_GetRegCommandParser+0x2f8>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 800327e:	4b28      	ldr	r3, [pc, #160]	; (8003320 <RI_GetRegCommandParser+0x710>)
 8003280:	e58c      	b.n	8002d9c <RI_GetRegCommandParser+0x18c>
              *regdata16 = SPD_GetS16Speed ((SpeednPosFdbk_Handle_t*) pEncoder[motorID]); //cstat !MISRAC2012-Rule-11.3
 8003282:	4828      	ldr	r0, [pc, #160]	; (8003324 <RI_GetRegCommandParser+0x714>)
 8003284:	f006 fc40 	bl	8009b08 <SPD_GetS16Speed>
 8003288:	8028      	strh	r0, [r5, #0]
 800328a:	2002      	movs	r0, #2
          *size = 2;
 800328c:	4603      	mov	r3, r0
 800328e:	e533      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8003290:	4820      	ldr	r0, [pc, #128]	; (8003314 <RI_GetRegCommandParser+0x704>)
 8003292:	f7fe fb27 	bl	80018e4 <MCI_GetValphabeta>
 8003296:	9004      	str	r0, [sp, #16]
 8003298:	f3c0 400f 	ubfx	r0, r0, #16, #16
 800329c:	8028      	strh	r0, [r5, #0]
 800329e:	2002      	movs	r0, #2
          *size = 2;
 80032a0:	4603      	mov	r3, r0
 80032a2:	e529      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetIab(pMCIN).a;
 80032a4:	481b      	ldr	r0, [pc, #108]	; (8003314 <RI_GetRegCommandParser+0x704>)
 80032a6:	f7fe fad7 	bl	8001858 <MCI_GetIab>
 80032aa:	900f      	str	r0, [sp, #60]	; 0x3c
 80032ac:	8028      	strh	r0, [r5, #0]
              break;
 80032ae:	2002      	movs	r0, #2
          *size = 2;
 80032b0:	4603      	mov	r3, r0
              break;
 80032b2:	e521      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 80032b4:	4817      	ldr	r0, [pc, #92]	; (8003314 <RI_GetRegCommandParser+0x704>)
 80032b6:	f7fe faf9 	bl	80018ac <MCI_GetIqdref>
 80032ba:	9008      	str	r0, [sp, #32]
 80032bc:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80032c0:	8028      	strh	r0, [r5, #0]
 80032c2:	2002      	movs	r0, #2
          *size = 2;
 80032c4:	4603      	mov	r3, r0
 80032c6:	e517      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 80032c8:	4813      	ldr	r0, [pc, #76]	; (8003318 <RI_GetRegCommandParser+0x708>)
 80032ca:	f005 fadd 	bl	8008888 <PID_GetKPDivisorPOW2>
 80032ce:	8028      	strh	r0, [r5, #0]
 80032d0:	2002      	movs	r0, #2
          *size = 2;
 80032d2:	4603      	mov	r3, r0
 80032d4:	e510      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 80032d6:	480f      	ldr	r0, [pc, #60]	; (8003314 <RI_GetRegCommandParser+0x704>)
 80032d8:	f7fe fae8 	bl	80018ac <MCI_GetIqdref>
 80032dc:	9009      	str	r0, [sp, #36]	; 0x24
 80032de:	8028      	strh	r0, [r5, #0]
              break;
 80032e0:	2002      	movs	r0, #2
          *size = 2;
 80032e2:	4603      	mov	r3, r0
              break;
 80032e4:	e508      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
              *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 80032e6:	480c      	ldr	r0, [pc, #48]	; (8003318 <RI_GetRegCommandParser+0x708>)
 80032e8:	f005 faf2 	bl	80088d0 <PID_GetKD>
 80032ec:	8028      	strh	r0, [r5, #0]
              break;
 80032ee:	2002      	movs	r0, #2
          *size = 2;
 80032f0:	4603      	mov	r3, r0
              break;
 80032f2:	e501      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 80032f4:	480c      	ldr	r0, [pc, #48]	; (8003328 <RI_GetRegCommandParser+0x718>)
 80032f6:	f004 fe53 	bl	8007fa0 <VBS_GetAvBusVoltage_V>
 80032fa:	8028      	strh	r0, [r5, #0]
              break;
 80032fc:	2002      	movs	r0, #2
          *size = 2;
 80032fe:	4603      	mov	r3, r0
              break;
 8003300:	e4fa      	b.n	8002cf8 <RI_GetRegCommandParser+0xe8>
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 8003302:	4b07      	ldr	r3, [pc, #28]	; (8003320 <RI_GetRegCommandParser+0x710>)
 8003304:	e6b3      	b.n	800306e <RI_GetRegCommandParser+0x45e>
              *regdata16 = PID_GetKI(pPIDIq[motorID]);
 8003306:	4b05      	ldr	r3, [pc, #20]	; (800331c <RI_GetRegCommandParser+0x70c>)
 8003308:	e684      	b.n	8003014 <RI_GetRegCommandParser+0x404>
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 800330a:	4b05      	ldr	r3, [pc, #20]	; (8003320 <RI_GetRegCommandParser+0x710>)
 800330c:	e69e      	b.n	800304c <RI_GetRegCommandParser+0x43c>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 800330e:	4b04      	ldr	r3, [pc, #16]	; (8003320 <RI_GetRegCommandParser+0x710>)
 8003310:	e5da      	b.n	8002ec8 <RI_GetRegCommandParser+0x2b8>
 8003312:	bf00      	nop
 8003314:	20000d90 	.word	0x20000d90
 8003318:	200001d0 	.word	0x200001d0
 800331c:	20000350 	.word	0x20000350
 8003320:	2000034c 	.word	0x2000034c
 8003324:	200000e0 	.word	0x200000e0
 8003328:	20000000 	.word	0x20000000

0800332c <RI_GetIDSize>:

  return (retVal);
}
uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 800332c:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8003330:	3808      	subs	r0, #8
 8003332:	b2c0      	uxtb	r0, r0
 8003334:	2810      	cmp	r0, #16
 8003336:	bf9a      	itte	ls
 8003338:	4b01      	ldrls	r3, [pc, #4]	; (8003340 <RI_GetIDSize+0x14>)
 800333a:	5c18      	ldrbls	r0, [r3, r0]
 800333c:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 800333e:	4770      	bx	lr
 8003340:	0800a0bc 	.word	0x0800a0bc

08003344 <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[vmotorID];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 8003344:	f000 0338 	and.w	r3, r0, #56	; 0x38
 8003348:	2b10      	cmp	r3, #16
 800334a:	d003      	beq.n	8003354 <RI_GetPtrReg+0x10>
            break;
          }

          default:
          {
            *dataPtr = &nullData16;
 800334c:	4b41      	ldr	r3, [pc, #260]	; (8003454 <RI_GetPtrReg+0x110>)
 800334e:	600b      	str	r3, [r1, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003350:	2005      	movs	r0, #5
    }
#ifdef NULL_PTR_REG_INT
  }
#endif
  return (retVal);
}
 8003352:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 8003354:	f020 0007 	bic.w	r0, r0, #7
 8003358:	f5b0 6f19 	cmp.w	r0, #2448	; 0x990
 800335c:	b283      	uxth	r3, r0
 800335e:	d050      	beq.n	8003402 <RI_GetPtrReg+0xbe>
 8003360:	d80f      	bhi.n	8003382 <RI_GetPtrReg+0x3e>
 8003362:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8003366:	d052      	beq.n	800340e <RI_GetPtrReg+0xca>
 8003368:	d922      	bls.n	80033b0 <RI_GetPtrReg+0x6c>
 800336a:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 800336e:	d054      	beq.n	800341a <RI_GetPtrReg+0xd6>
 8003370:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8003374:	d113      	bne.n	800339e <RI_GetPtrReg+0x5a>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8003376:	4b38      	ldr	r3, [pc, #224]	; (8003458 <RI_GetPtrReg+0x114>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	3310      	adds	r3, #16
  uint8_t retVal = MCP_CMD_OK;
 800337c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 800337e:	600b      	str	r3, [r1, #0]
            break;
 8003380:	4770      	bx	lr
 8003382:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8003386:	d04e      	beq.n	8003426 <RI_GetPtrReg+0xe2>
 8003388:	d91e      	bls.n	80033c8 <RI_GetPtrReg+0x84>
 800338a:	f5b3 6f2d 	cmp.w	r3, #2768	; 0xad0
 800338e:	d05c      	beq.n	800344a <RI_GetPtrReg+0x106>
 8003390:	f5b3 6f31 	cmp.w	r3, #2832	; 0xb10
 8003394:	d1da      	bne.n	800334c <RI_GetPtrReg+0x8>
            *dataPtr = &(pEncoder[vmotorID]->_Super.hAvrMecSpeedUnit);
 8003396:	4b31      	ldr	r3, [pc, #196]	; (800345c <RI_GetPtrReg+0x118>)
 8003398:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800339a:	2000      	movs	r0, #0
            break;
 800339c:	4770      	bx	lr
 800339e:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 80033a2:	d1d3      	bne.n	800334c <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 80033a4:	4b2c      	ldr	r3, [pc, #176]	; (8003458 <RI_GetPtrReg+0x114>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	330c      	adds	r3, #12
  uint8_t retVal = MCP_CMD_OK;
 80033aa:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 80033ac:	600b      	str	r3, [r1, #0]
            break;
 80033ae:	4770      	bx	lr
 80033b0:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80033b4:	d03d      	beq.n	8003432 <RI_GetPtrReg+0xee>
 80033b6:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 80033ba:	d111      	bne.n	80033e0 <RI_GetPtrReg+0x9c>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 80033bc:	4b26      	ldr	r3, [pc, #152]	; (8003458 <RI_GetPtrReg+0x114>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	3304      	adds	r3, #4
  uint8_t retVal = MCP_CMD_OK;
 80033c2:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 80033c4:	600b      	str	r3, [r1, #0]
            break;
 80033c6:	4770      	bx	lr
 80033c8:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 80033cc:	d037      	beq.n	800343e <RI_GetPtrReg+0xfa>
 80033ce:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 80033d2:	d10d      	bne.n	80033f0 <RI_GetPtrReg+0xac>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 80033d4:	4b20      	ldr	r3, [pc, #128]	; (8003458 <RI_GetPtrReg+0x114>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	331a      	adds	r3, #26
  uint8_t retVal = MCP_CMD_OK;
 80033da:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 80033dc:	600b      	str	r3, [r1, #0]
            break;
 80033de:	4770      	bx	lr
 80033e0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80033e4:	d1b2      	bne.n	800334c <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 80033e6:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <RI_GetPtrReg+0x114>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80033ec:	2000      	movs	r0, #0
             break;
 80033ee:	4770      	bx	lr
 80033f0:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 80033f4:	d1aa      	bne.n	800334c <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 80033f6:	4b18      	ldr	r3, [pc, #96]	; (8003458 <RI_GetPtrReg+0x114>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	3316      	adds	r3, #22
  uint8_t retVal = MCP_CMD_OK;
 80033fc:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 80033fe:	600b      	str	r3, [r1, #0]
            break;
 8003400:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8003402:	4b15      	ldr	r3, [pc, #84]	; (8003458 <RI_GetPtrReg+0x114>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	3312      	adds	r3, #18
  uint8_t retVal = MCP_CMD_OK;
 8003408:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 800340a:	600b      	str	r3, [r1, #0]
            break;
 800340c:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 800340e:	4b12      	ldr	r3, [pc, #72]	; (8003458 <RI_GetPtrReg+0x114>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	3306      	adds	r3, #6
  uint8_t retVal = MCP_CMD_OK;
 8003414:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003416:	600b      	str	r3, [r1, #0]
            break;
 8003418:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 800341a:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <RI_GetPtrReg+0x114>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	330e      	adds	r3, #14
  uint8_t retVal = MCP_CMD_OK;
 8003420:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8003422:	600b      	str	r3, [r1, #0]
            break;
 8003424:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8003426:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <RI_GetPtrReg+0x114>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	331c      	adds	r3, #28
  uint8_t retVal = MCP_CMD_OK;
 800342c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 800342e:	600b      	str	r3, [r1, #0]
            break;
 8003430:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003432:	4b09      	ldr	r3, [pc, #36]	; (8003458 <RI_GetPtrReg+0x114>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	3302      	adds	r3, #2
  uint8_t retVal = MCP_CMD_OK;
 8003438:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 800343a:	600b      	str	r3, [r1, #0]
            break;
 800343c:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 800343e:	4b06      	ldr	r3, [pc, #24]	; (8003458 <RI_GetPtrReg+0x114>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	3318      	adds	r3, #24
  uint8_t retVal = MCP_CMD_OK;
 8003444:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8003446:	600b      	str	r3, [r1, #0]
            break;
 8003448:	4770      	bx	lr
            *dataPtr = &(pEncoder[vmotorID]->_Super.hElAngle);
 800344a:	4b05      	ldr	r3, [pc, #20]	; (8003460 <RI_GetPtrReg+0x11c>)
 800344c:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800344e:	2000      	movs	r0, #0
            break;
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	20001f84 	.word	0x20001f84
 8003458:	20000d90 	.word	0x20000d90
 800345c:	200000ec 	.word	0x200000ec
 8003460:	200000e4 	.word	0x200000e4

08003464 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003464:	4a6f      	ldr	r2, [pc, #444]	; (8003624 <RCM_RegisterRegConv+0x1c0>)
{
 8003466:	b530      	push	{r4, r5, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003468:	6814      	ldr	r4, [r2, #0]
{
 800346a:	4601      	mov	r1, r0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800346c:	2c00      	cmp	r4, #0
 800346e:	f000 8088 	beq.w	8003582 <RCM_RegisterRegConv+0x11e>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003472:	f890 c004 	ldrb.w	ip, [r0, #4]
 8003476:	7923      	ldrb	r3, [r4, #4]
 8003478:	459c      	cmp	ip, r3
 800347a:	d01f      	beq.n	80034bc <RCM_RegisterRegConv+0x58>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800347c:	6853      	ldr	r3, [r2, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 8097 	beq.w	80035b2 <RCM_RegisterRegConv+0x14e>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003484:	791c      	ldrb	r4, [r3, #4]
 8003486:	4564      	cmp	r4, ip
  uint8_t handle = 255U;
 8003488:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800348c:	f000 8083 	beq.w	8003596 <RCM_RegisterRegConv+0x132>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003490:	6894      	ldr	r4, [r2, #8]
 8003492:	2c00      	cmp	r4, #0
 8003494:	f000 80ad 	beq.w	80035f2 <RCM_RegisterRegConv+0x18e>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003498:	7923      	ldrb	r3, [r4, #4]
 800349a:	4563      	cmp	r3, ip
 800349c:	f000 8082 	beq.w	80035a4 <RCM_RegisterRegConv+0x140>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80034a0:	68d3      	ldr	r3, [r2, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 80ae 	beq.w	8003604 <RCM_RegisterRegConv+0x1a0>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80034a8:	791c      	ldrb	r4, [r3, #4]
 80034aa:	4564      	cmp	r4, ip
 80034ac:	f000 808c 	beq.w	80035c8 <RCM_RegisterRegConv+0x164>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 80034b0:	2803      	cmp	r0, #3
 80034b2:	bf88      	it	hi
 80034b4:	20ff      	movhi	r0, #255	; 0xff
 80034b6:	f240 80b1 	bls.w	800361c <RCM_RegisterRegConv+0x1b8>
    }
#ifdef NULL_PTR_REG_CON_MNG
  }
#endif
  return (handle);
}
 80034ba:	bd30      	pop	{r4, r5, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80034bc:	6803      	ldr	r3, [r0, #0]
 80034be:	6820      	ldr	r0, [r4, #0]
 80034c0:	4283      	cmp	r3, r0
 80034c2:	d1db      	bne.n	800347c <RCM_RegisterRegConv+0x18>
    uint8_t i = 0;
 80034c4:	2000      	movs	r0, #0
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80034c6:	4c58      	ldr	r4, [pc, #352]	; (8003628 <RCM_RegisterRegConv+0x1c4>)
      RCM_handle_array [handle] = regConv;
 80034c8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034cc:	689a      	ldr	r2, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80034ce:	2500      	movs	r5, #0
 80034d0:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 80034d4:	07d5      	lsls	r5, r2, #31
 80034d6:	d422      	bmi.n	800351e <RCM_RegisterRegConv+0xba>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80034d8:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80034da:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80034dc:	f022 0204 	bic.w	r2, r2, #4
 80034e0:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80034e2:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80034e4:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80034e6:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80034e8:	f022 0220 	bic.w	r2, r2, #32
 80034ec:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80034ee:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80034f6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80034fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034fe:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	2a00      	cmp	r2, #0
 8003504:	dbfc      	blt.n	8003500 <RCM_RegisterRegConv+0x9c>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003506:	681a      	ldr	r2, [r3, #0]
        while (0U == LL_ADC_IsActiveFlag_ADRDY(regConv->regADC))
 8003508:	07d4      	lsls	r4, r2, #31
 800350a:	d408      	bmi.n	800351e <RCM_RegisterRegConv+0xba>
  MODIFY_REG(ADCx->CR,
 800350c:	4c47      	ldr	r4, [pc, #284]	; (800362c <RCM_RegisterRegConv+0x1c8>)
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	4022      	ands	r2, r4
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	07d2      	lsls	r2, r2, #31
 800351c:	d5f7      	bpl.n	800350e <RCM_RegisterRegConv+0xaa>
      RCM_NoInj_array[handle].enable = false;
 800351e:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 8003522:	4c43      	ldr	r4, [pc, #268]	; (8003630 <RCM_RegisterRegConv+0x1cc>)
 8003524:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003528:	2200      	movs	r2, #0
 800352a:	f804 200c 	strb.w	r2, [r4, ip]
      RCM_NoInj_array[handle].prev = handle;
 800352e:	4464      	add	r4, ip
 8003530:	f360 0207 	bfi	r2, r0, #0, #8
 8003534:	f360 220f 	bfi	r2, r0, #8, #8
 8003538:	80a2      	strh	r2, [r4, #4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800353a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800353c:	f022 020f 	bic.w	r2, r2, #15
 8003540:	631a      	str	r2, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003542:	790c      	ldrb	r4, [r1, #4]
 8003544:	2c09      	cmp	r4, #9
 8003546:	d846      	bhi.n	80035d6 <RCM_RegisterRegConv+0x172>
 8003548:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800354c:	06a2      	lsls	r2, r4, #26
 800354e:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 8003552:	2501      	movs	r5, #1
 8003554:	fa05 f404 	lsl.w	r4, r5, r4
 8003558:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800355a:	0dd4      	lsrs	r4, r2, #23
  MODIFY_REG(*preg,
 800355c:	6889      	ldr	r1, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800355e:	f004 0404 	and.w	r4, r4, #4
 8003562:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8003564:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003568:	fa01 fc02 	lsl.w	ip, r1, r2
 800356c:	f04f 0e07 	mov.w	lr, #7
 8003570:	58e1      	ldr	r1, [r4, r3]
 8003572:	fa0e f202 	lsl.w	r2, lr, r2
 8003576:	ea21 0202 	bic.w	r2, r1, r2
 800357a:	ea42 020c 	orr.w	r2, r2, ip
 800357e:	50e2      	str	r2, [r4, r3]
}
 8003580:	bd30      	pop	{r4, r5, pc}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003582:	6853      	ldr	r3, [r2, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d041      	beq.n	800360c <RCM_RegisterRegConv+0x1a8>
 8003588:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 800358c:	4620      	mov	r0, r4
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800358e:	791c      	ldrb	r4, [r3, #4]
 8003590:	4564      	cmp	r4, ip
 8003592:	f47f af7d 	bne.w	8003490 <RCM_RegisterRegConv+0x2c>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003596:	681c      	ldr	r4, [r3, #0]
 8003598:	680b      	ldr	r3, [r1, #0]
 800359a:	429c      	cmp	r4, r3
 800359c:	f47f af78 	bne.w	8003490 <RCM_RegisterRegConv+0x2c>
      i++;
 80035a0:	2001      	movs	r0, #1
 80035a2:	e790      	b.n	80034c6 <RCM_RegisterRegConv+0x62>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80035a4:	6824      	ldr	r4, [r4, #0]
 80035a6:	680b      	ldr	r3, [r1, #0]
 80035a8:	429c      	cmp	r4, r3
 80035aa:	f47f af79 	bne.w	80034a0 <RCM_RegisterRegConv+0x3c>
      i++;
 80035ae:	2002      	movs	r0, #2
 80035b0:	e789      	b.n	80034c6 <RCM_RegisterRegConv+0x62>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80035b2:	6894      	ldr	r4, [r2, #8]
      i++;
 80035b4:	2001      	movs	r0, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80035b6:	2c00      	cmp	r4, #0
 80035b8:	f47f af6e 	bne.w	8003498 <RCM_RegisterRegConv+0x34>
 80035bc:	68d3      	ldr	r3, [r2, #12]
 80035be:	b36b      	cbz	r3, 800361c <RCM_RegisterRegConv+0x1b8>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80035c0:	791d      	ldrb	r5, [r3, #4]
 80035c2:	790c      	ldrb	r4, [r1, #4]
 80035c4:	42a5      	cmp	r5, r4
 80035c6:	d129      	bne.n	800361c <RCM_RegisterRegConv+0x1b8>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80035c8:	681c      	ldr	r4, [r3, #0]
 80035ca:	680b      	ldr	r3, [r1, #0]
 80035cc:	429c      	cmp	r4, r3
 80035ce:	f47f af6f 	bne.w	80034b0 <RCM_RegisterRegConv+0x4c>
      i++;
 80035d2:	2003      	movs	r0, #3
 80035d4:	e777      	b.n	80034c6 <RCM_RegisterRegConv+0x62>
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80035d6:	2203      	movs	r2, #3
 80035d8:	f06f 051d 	mvn.w	r5, #29
 80035dc:	fb12 5504 	smlabb	r5, r2, r4, r5
 80035e0:	2201      	movs	r2, #1
 80035e2:	40a2      	lsls	r2, r4
 80035e4:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 80035e8:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 80035ec:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80035f0:	e7b3      	b.n	800355a <RCM_RegisterRegConv+0xf6>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80035f2:	2804      	cmp	r0, #4
 80035f4:	d910      	bls.n	8003618 <RCM_RegisterRegConv+0x1b4>
 80035f6:	68d3      	ldr	r3, [r2, #12]
 80035f8:	b113      	cbz	r3, 8003600 <RCM_RegisterRegConv+0x19c>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80035fa:	7918      	ldrb	r0, [r3, #4]
 80035fc:	4584      	cmp	ip, r0
 80035fe:	d00f      	beq.n	8003620 <RCM_RegisterRegConv+0x1bc>
 8003600:	680b      	ldr	r3, [r1, #0]
 8003602:	e7d4      	b.n	80035ae <RCM_RegisterRegConv+0x14a>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003604:	2804      	cmp	r0, #4
 8003606:	680b      	ldr	r3, [r1, #0]
 8003608:	d8e3      	bhi.n	80035d2 <RCM_RegisterRegConv+0x16e>
 800360a:	e75c      	b.n	80034c6 <RCM_RegisterRegConv+0x62>
 800360c:	6894      	ldr	r4, [r2, #8]
 800360e:	b11c      	cbz	r4, 8003618 <RCM_RegisterRegConv+0x1b4>
 8003610:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 8003614:	4618      	mov	r0, r3
 8003616:	e73f      	b.n	8003498 <RCM_RegisterRegConv+0x34>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003618:	4620      	mov	r0, r4
 800361a:	e7cf      	b.n	80035bc <RCM_RegisterRegConv+0x158>
 800361c:	680b      	ldr	r3, [r1, #0]
 800361e:	e752      	b.n	80034c6 <RCM_RegisterRegConv+0x62>
      i++;
 8003620:	2002      	movs	r0, #2
 8003622:	e7d1      	b.n	80035c8 <RCM_RegisterRegConv+0x164>
 8003624:	20001fc8 	.word	0x20001fc8
 8003628:	20001f88 	.word	0x20001f88
 800362c:	7fffffc0 	.word	0x7fffffc0
 8003630:	20001fa8 	.word	0x20001fa8

08003634 <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8003634:	4b5e      	ldr	r3, [pc, #376]	; (80037b0 <RCM_ExecRegularConv+0x17c>)
 8003636:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 800363a:	b510      	push	{r4, lr}
  if (false == RCM_NoInj_array [handle].enable)
 800363c:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8003640:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 8003644:	2a00      	cmp	r2, #0
 8003646:	d13c      	bne.n	80036c2 <RCM_ExecRegularConv+0x8e>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8003648:	7819      	ldrb	r1, [r3, #0]
 800364a:	b9a9      	cbnz	r1, 8003678 <RCM_ExecRegularConv+0x44>
  uint8_t LastEnable = RCM_MAX_CONV;
 800364c:	2204      	movs	r2, #4
      if (true == RCM_NoInj_array [i].enable)
 800364e:	7999      	ldrb	r1, [r3, #6]
 8003650:	2900      	cmp	r1, #0
 8003652:	d07e      	beq.n	8003752 <RCM_ExecRegularConv+0x11e>
      {
        if (RCM_NoInj_array[i].next > handle)
 8003654:	7ad9      	ldrb	r1, [r3, #11]
 8003656:	4288      	cmp	r0, r1
 8003658:	f0c0 809a 	bcc.w	8003790 <RCM_ExecRegularConv+0x15c>
      if (true == RCM_NoInj_array [i].enable)
 800365c:	7b1a      	ldrb	r2, [r3, #12]
 800365e:	2a00      	cmp	r2, #0
 8003660:	f000 8099 	beq.w	8003796 <RCM_ExecRegularConv+0x162>
        if (RCM_NoInj_array[i].next > handle)
 8003664:	7c59      	ldrb	r1, [r3, #17]
 8003666:	4288      	cmp	r0, r1
 8003668:	f0c0 809f 	bcc.w	80037aa <RCM_ExecRegularConv+0x176>
      if (true == RCM_NoInj_array [i].enable)
 800366c:	7c9a      	ldrb	r2, [r3, #18]
 800366e:	2a00      	cmp	r2, #0
 8003670:	f040 8095 	bne.w	800379e <RCM_ExecRegularConv+0x16a>
      }
      else
      {
        /* nothing to do */
      }
      i++;
 8003674:	2202      	movs	r2, #2
 8003676:	e073      	b.n	8003760 <RCM_ExecRegularConv+0x12c>
        if (RCM_NoInj_array[i].next > handle)
 8003678:	7959      	ldrb	r1, [r3, #5]
 800367a:	4281      	cmp	r1, r0
 800367c:	d9e7      	bls.n	800364e <RCM_ExecRegularConv+0x1a>
      if (true == RCM_NoInj_array [i].enable)
 800367e:	4696      	mov	lr, r2
          RCM_NoInj_array[handle].next = formerNext;
 8003680:	eb0c 0400 	add.w	r4, ip, r0
 8003684:	eb03 0444 	add.w	r4, r3, r4, lsl #1
          RCM_NoInj_array[i].next = handle;
 8003688:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
          RCM_NoInj_array[handle].prev = i;
 800368c:	7122      	strb	r2, [r4, #4]
          RCM_NoInj_array[handle].next = formerNext;
 800368e:	7161      	strb	r1, [r4, #5]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003690:	4c48      	ldr	r4, [pc, #288]	; (80037b4 <RCM_ExecRegularConv+0x180>)
          RCM_NoInj_array[formerNext].prev = handle;
 8003692:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array[i].next = handle;
 8003696:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
          RCM_NoInj_array[formerNext].prev = handle;
 800369a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800369e:	7822      	ldrb	r2, [r4, #0]
          RCM_NoInj_array[i].next = handle;
 80036a0:	f88e 0005 	strb.w	r0, [lr, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 80036a4:	7108      	strb	r0, [r1, #4]
    RCM_NoInj_array[handle].enable = true;
 80036a6:	eb0c 0100 	add.w	r1, ip, r0
 80036aa:	f04f 0e01 	mov.w	lr, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80036ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array[handle].enable = true;
 80036b2:	f823 e011 	strh.w	lr, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80036b6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80036ba:	7852      	ldrb	r2, [r2, #1]
 80036bc:	4572      	cmp	r2, lr
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 80036be:	bf18      	it	ne
 80036c0:	7020      	strbne	r0, [r4, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 80036c2:	4a3d      	ldr	r2, [pc, #244]	; (80037b8 <RCM_ExecRegularConv+0x184>)
 80036c4:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 80036c8:	2a00      	cmp	r2, #0
 80036ca:	d132      	bne.n	8003732 <RCM_ExecRegularConv+0xfe>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80036cc:	4a3b      	ldr	r2, [pc, #236]	; (80037bc <RCM_ExecRegularConv+0x188>)
 80036ce:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80036d2:	7914      	ldrb	r4, [r2, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80036d4:	6811      	ldr	r1, [r2, #0]
 80036d6:	2c09      	cmp	r4, #9
 80036d8:	d930      	bls.n	800373c <RCM_ExecRegularConv+0x108>
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80036da:	2203      	movs	r2, #3
 80036dc:	f06f 0e1d 	mvn.w	lr, #29
 80036e0:	fb12 ee04 	smlabb	lr, r2, r4, lr
 80036e4:	2201      	movs	r2, #1
 80036e6:	40a2      	lsls	r2, r4
 80036e8:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
 80036ec:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80036f0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 80036f4:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 80036f6:	0d12      	lsrs	r2, r2, #20
 80036f8:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 80036fc:	f424 64f8 	bic.w	r4, r4, #1984	; 0x7c0
 8003700:	4322      	orrs	r2, r4
 8003702:	630a      	str	r2, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003704:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8003706:	688a      	ldr	r2, [r1, #8]
 8003708:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800370c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003710:	f042 0204 	orr.w	r2, r2, #4
 8003714:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003716:	680a      	ldr	r2, [r1, #0]
 8003718:	0752      	lsls	r2, r2, #29
 800371a:	d5fc      	bpl.n	8003716 <RCM_ExecRegularConv+0xe2>
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 800371c:	eb0c 0200 	add.w	r2, ip, r0
 8003720:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003724:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003726:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8003728:	4922      	ldr	r1, [pc, #136]	; (80037b4 <RCM_ExecRegularConv+0x180>)
 800372a:	7954      	ldrb	r4, [r2, #5]
 800372c:	700c      	strb	r4, [r1, #0]
    RCM_NoInj_array[handle].status = valid;
 800372e:	2102      	movs	r1, #2
 8003730:	7051      	strb	r1, [r2, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8003732:	4460      	add	r0, ip
 8003734:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  return retVal;
}
 8003738:	8858      	ldrh	r0, [r3, #2]
 800373a:	bd10      	pop	{r4, pc}
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800373c:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8003740:	06a2      	lsls	r2, r4, #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003742:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003746:	f04f 0e01 	mov.w	lr, #1
 800374a:	fa0e f404 	lsl.w	r4, lr, r4
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800374e:	4322      	orrs	r2, r4
 8003750:	e7d0      	b.n	80036f4 <RCM_ExecRegularConv+0xc0>
      if (true == RCM_NoInj_array [i].enable)
 8003752:	7b19      	ldrb	r1, [r3, #12]
 8003754:	2900      	cmp	r1, #0
 8003756:	d185      	bne.n	8003664 <RCM_ExecRegularConv+0x30>
 8003758:	7c99      	ldrb	r1, [r3, #18]
 800375a:	bb01      	cbnz	r1, 800379e <RCM_ExecRegularConv+0x16a>
       if (LastEnable != RCM_MAX_CONV )
 800375c:	2a04      	cmp	r2, #4
 800375e:	d013      	beq.n	8003788 <RCM_ExecRegularConv+0x154>
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003760:	eb02 0142 	add.w	r1, r2, r2, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 8003764:	eb0c 0400 	add.w	r4, ip, r0
 8003768:	eb03 0444 	add.w	r4, r3, r4, lsl #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 800376c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8003770:	7122      	strb	r2, [r4, #4]
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003772:	794a      	ldrb	r2, [r1, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8003774:	7162      	strb	r2, [r4, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8003776:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800377a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800377e:	4c0d      	ldr	r4, [pc, #52]	; (80037b4 <RCM_ExecRegularConv+0x180>)
         RCM_NoInj_array[formerNext].prev = handle;
 8003780:	7110      	strb	r0, [r2, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 8003782:	7148      	strb	r0, [r1, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003784:	7822      	ldrb	r2, [r4, #0]
 8003786:	e78e      	b.n	80036a6 <RCM_ExecRegularConv+0x72>
         RCM_currentHandle = handle;
 8003788:	4c0a      	ldr	r4, [pc, #40]	; (80037b4 <RCM_ExecRegularConv+0x180>)
 800378a:	4602      	mov	r2, r0
 800378c:	7020      	strb	r0, [r4, #0]
    while (i < RCM_MAX_CONV)
 800378e:	e78a      	b.n	80036a6 <RCM_ExecRegularConv+0x72>
      i++;
 8003790:	2201      	movs	r2, #1
      if (true == RCM_NoInj_array [i].enable)
 8003792:	4696      	mov	lr, r2
 8003794:	e774      	b.n	8003680 <RCM_ExecRegularConv+0x4c>
 8003796:	7c9a      	ldrb	r2, [r3, #18]
 8003798:	b90a      	cbnz	r2, 800379e <RCM_ExecRegularConv+0x16a>
      i++;
 800379a:	2201      	movs	r2, #1
 800379c:	e7e0      	b.n	8003760 <RCM_ExecRegularConv+0x12c>
        if (RCM_NoInj_array[i].next > handle)
 800379e:	7dd9      	ldrb	r1, [r3, #23]
 80037a0:	4281      	cmp	r1, r0
      i++;
 80037a2:	f04f 0203 	mov.w	r2, #3
        if (RCM_NoInj_array[i].next > handle)
 80037a6:	d9db      	bls.n	8003760 <RCM_ExecRegularConv+0x12c>
 80037a8:	e769      	b.n	800367e <RCM_ExecRegularConv+0x4a>
      i++;
 80037aa:	2202      	movs	r2, #2
 80037ac:	e767      	b.n	800367e <RCM_ExecRegularConv+0x4a>
 80037ae:	bf00      	nop
 80037b0:	20001fa8 	.word	0x20001fa8
 80037b4:	20001fc4 	.word	0x20001fc4
 80037b8:	2000020c 	.word	0x2000020c
 80037bc:	20001fc8 	.word	0x20001fc8

080037c0 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 80037c0:	b570      	push	{r4, r5, r6, lr}
  if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 80037c2:	4c12      	ldr	r4, [pc, #72]	; (800380c <RCM_ExecUserConv+0x4c>)
 80037c4:	7823      	ldrb	r3, [r4, #0]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d000      	beq.n	80037cc <RCM_ExecUserConv+0xc>
    else
    {
      /* Nothing to do */
    }
  }
}
 80037ca:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80037cc:	4b10      	ldr	r3, [pc, #64]	; (8003810 <RCM_ExecUserConv+0x50>)
 80037ce:	781d      	ldrb	r5, [r3, #0]
 80037d0:	4628      	mov	r0, r5
 80037d2:	f7ff ff2f 	bl	8003634 <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 80037d6:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <RCM_ExecUserConv+0x54>)
 80037d8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80037dc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80037e0:	4a0d      	ldr	r2, [pc, #52]	; (8003818 <RCM_ExecUserConv+0x58>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 80037e2:	785b      	ldrb	r3, [r3, #1]
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80037e4:	8010      	strh	r0, [r2, #0]
 80037e6:	4601      	mov	r1, r0
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 80037e8:	b10b      	cbz	r3, 80037ee <RCM_ExecUserConv+0x2e>
      RCM_UserConvState = RCM_USERCONV_EOC;
 80037ea:	2302      	movs	r3, #2
 80037ec:	7023      	strb	r3, [r4, #0]
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 80037ee:	4b0b      	ldr	r3, [pc, #44]	; (800381c <RCM_ExecUserConv+0x5c>)
 80037f0:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
 80037f4:	2e00      	cmp	r6, #0
 80037f6:	d0e8      	beq.n	80037ca <RCM_ExecUserConv+0xa>
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80037f8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80037fc:	4628      	mov	r0, r5
 80037fe:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003800:	2300      	movs	r3, #0
 8003802:	7023      	strb	r3, [r4, #0]
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003804:	4633      	mov	r3, r6
}
 8003806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800380a:	4718      	bx	r3
 800380c:	20001fc1 	.word	0x20001fc1
 8003810:	20001fc0 	.word	0x20001fc0
 8003814:	20001fa8 	.word	0x20001fa8
 8003818:	20001fc2 	.word	0x20001fc2
 800381c:	20001f88 	.word	0x20001f88

08003820 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8003820:	4b24      	ldr	r3, [pc, #144]	; (80038b4 <RCM_ExecNextConv+0x94>)
 8003822:	4825      	ldr	r0, [pc, #148]	; (80038b8 <RCM_ExecNextConv+0x98>)
 8003824:	781a      	ldrb	r2, [r3, #0]
 8003826:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800382a:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800382e:	b3a3      	cbz	r3, 800389a <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003830:	4b22      	ldr	r3, [pc, #136]	; (80038bc <RCM_ExecNextConv+0x9c>)
{
 8003832:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003838:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800383a:	2404      	movs	r4, #4
 800383c:	600c      	str	r4, [r1, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 800383e:	f893 c004 	ldrb.w	ip, [r3, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003842:	f1bc 0f09 	cmp.w	ip, #9
 8003846:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 800384a:	d927      	bls.n	800389c <RCM_ExecNextConv+0x7c>
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 800384c:	2303      	movs	r3, #3
 800384e:	f06f 041d 	mvn.w	r4, #29
 8003852:	fb13 440c 	smlabb	r4, r3, ip, r4
 8003856:	2301      	movs	r3, #1
 8003858:	fa03 f30c 	lsl.w	r3, r3, ip
 800385c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8003860:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003864:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000

    (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8003868:	4472      	add	r2, lr
 800386a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  MODIFY_REG(*preg,
 800386e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003870:	0d1b      	lsrs	r3, r3, #20
 8003872:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003876:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 800387a:	4313      	orrs	r3, r2
 800387c:	630b      	str	r3, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800387e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8003880:	688b      	ldr	r3, [r1, #8]
 8003882:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003886:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800388a:	f04f 0c01 	mov.w	ip, #1
 800388e:	f043 0304 	orr.w	r3, r3, #4
 8003892:	608b      	str	r3, [r1, #8]
 8003894:	f880 c001 	strb.w	ip, [r0, #1]
  }
  else
  {
    /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 8003898:	bd10      	pop	{r4, pc}
 800389a:	4770      	bx	lr
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 800389c:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 80038a0:	ea4f 638c 	mov.w	r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80038a4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 80038a8:	2401      	movs	r4, #1
 80038aa:	fa04 fc0c 	lsl.w	ip, r4, ip
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80038ae:	ea43 030c 	orr.w	r3, r3, ip
 80038b2:	e7d9      	b.n	8003868 <RCM_ExecNextConv+0x48>
 80038b4:	20001fc4 	.word	0x20001fc4
 80038b8:	20001fa8 	.word	0x20001fa8
 80038bc:	20001fc8 	.word	0x20001fc8

080038c0 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 80038c0:	b510      	push	{r4, lr}
  uint32_t result;
  RCM_status_t status;

  status = RCM_NoInj_array[RCM_currentHandle].status;
 80038c2:	4814      	ldr	r0, [pc, #80]	; (8003914 <RCM_ReadOngoingConv+0x54>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 80038c4:	4a14      	ldr	r2, [pc, #80]	; (8003918 <RCM_ReadOngoingConv+0x58>)
  status = RCM_NoInj_array[RCM_currentHandle].status;
 80038c6:	7803      	ldrb	r3, [r0, #0]
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 80038c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80038cc:	6814      	ldr	r4, [r2, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80038ce:	6822      	ldr	r2, [r4, #0]
 80038d0:	f012 0f04 	tst.w	r2, #4
  status = RCM_NoInj_array[RCM_currentHandle].status;
 80038d4:	ea4f 0143 	mov.w	r1, r3, lsl #1
 80038d8:	4a10      	ldr	r2, [pc, #64]	; (800391c <RCM_ReadOngoingConv+0x5c>)
 80038da:	d008      	beq.n	80038ee <RCM_ReadOngoingConv+0x2e>
 80038dc:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 80038e0:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 80038e4:	f89c e001 	ldrb.w	lr, [ip, #1]
 80038e8:	f01e 0ffd 	tst.w	lr, #253	; 0xfd
 80038ec:	d105      	bne.n	80038fa <RCM_ReadOngoingConv+0x3a>
    RCM_NoInj_array[RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 80038ee:	440b      	add	r3, r1
 80038f0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80038f4:	7953      	ldrb	r3, [r2, #5]
 80038f6:	7003      	strb	r3, [r0, #0]
}
 80038f8:	bd10      	pop	{r4, pc}
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 80038fa:	440b      	add	r3, r1
 80038fc:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003900:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8003902:	7953      	ldrb	r3, [r2, #5]
 8003904:	f8ac 4002 	strh.w	r4, [ip, #2]
    RCM_NoInj_array[RCM_currentHandle].status = valid;
 8003908:	2402      	movs	r4, #2
 800390a:	f88c 4001 	strb.w	r4, [ip, #1]
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 800390e:	7003      	strb	r3, [r0, #0]
}
 8003910:	bd10      	pop	{r4, pc}
 8003912:	bf00      	nop
 8003914:	20001fc4 	.word	0x20001fc4
 8003918:	20001fc8 	.word	0x20001fc8
 800391c:	20001fa8 	.word	0x20001fa8

08003920 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003920:	4b0e      	ldr	r3, [pc, #56]	; (800395c <HAL_MspInit+0x3c>)
{
 8003922:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003924:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	661a      	str	r2, [r3, #96]	; 0x60
 800392c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800392e:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003930:	f002 0201 	and.w	r2, r2, #1
 8003934:	9200      	str	r2, [sp, #0]
 8003936:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003938:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800393a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800393e:	659a      	str	r2, [r3, #88]	; 0x58
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003946:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003948:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 800394a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800394c:	f001 fcfe 	bl	800534c <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003950:	b003      	add	sp, #12
 8003952:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8003956:	f002 bb5f 	b.w	8006018 <HAL_PWREx_DisableUCPDDeadBattery>
 800395a:	bf00      	nop
 800395c:	40021000 	.word	0x40021000

08003960 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003960:	b510      	push	{r4, lr}
 8003962:	4604      	mov	r4, r0
 8003964:	b09c      	sub	sp, #112	; 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003966:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003968:	2244      	movs	r2, #68	; 0x44
 800396a:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396c:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8003970:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8003974:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003976:	f006 fa1b 	bl	8009db0 <memset>
  if(hadc->Instance==ADC1)
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003980:	d004      	beq.n	800398c <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8003982:	4a43      	ldr	r2, [pc, #268]	; (8003a90 <HAL_ADC_MspInit+0x130>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d046      	beq.n	8003a16 <HAL_ADC_MspInit+0xb6>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003988:	b01c      	add	sp, #112	; 0x70
 800398a:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800398c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003990:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003994:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003996:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003998:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800399a:	f002 ff05 	bl	80067a8 <HAL_RCCEx_PeriphCLKConfig>
 800399e:	2800      	cmp	r0, #0
 80039a0:	d16a      	bne.n	8003a78 <HAL_ADC_MspInit+0x118>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80039a2:	4a3c      	ldr	r2, [pc, #240]	; (8003a94 <HAL_ADC_MspInit+0x134>)
 80039a4:	6813      	ldr	r3, [r2, #0]
 80039a6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80039a8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80039aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80039ac:	d109      	bne.n	80039c2 <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80039ae:	4b3a      	ldr	r3, [pc, #232]	; (8003a98 <HAL_ADC_MspInit+0x138>)
 80039b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80039b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c2:	4b35      	ldr	r3, [pc, #212]	; (8003a98 <HAL_ADC_MspInit+0x138>)
 80039c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80039cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039ce:	f002 0201 	and.w	r2, r2, #1
 80039d2:	9202      	str	r2, [sp, #8]
 80039d4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039d8:	f042 0202 	orr.w	r2, r2, #2
 80039dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80039de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e6:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 80039ea:	2205      	movs	r2, #5
 80039ec:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 80039f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f6:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039f8:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039fa:	f002 f8ff 	bl	8005bfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 80039fe:	f244 0202 	movw	r2, #16386	; 0x4002
 8003a02:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a04:	4825      	ldr	r0, [pc, #148]	; (8003a9c <HAL_ADC_MspInit+0x13c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a06:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a08:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8003a0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a0e:	f002 f8f5 	bl	8005bfc <HAL_GPIO_Init>
}
 8003a12:	b01c      	add	sp, #112	; 0x70
 8003a14:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003a16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003a1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a1e:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003a20:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003a22:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a24:	f002 fec0 	bl	80067a8 <HAL_RCCEx_PeriphCLKConfig>
 8003a28:	bb48      	cbnz	r0, 8003a7e <HAL_ADC_MspInit+0x11e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003a2a:	4a1a      	ldr	r2, [pc, #104]	; (8003a94 <HAL_ADC_MspInit+0x134>)
 8003a2c:	6813      	ldr	r3, [r2, #0]
 8003a2e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003a30:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003a32:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003a34:	d109      	bne.n	8003a4a <HAL_ADC_MspInit+0xea>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003a36:	4b18      	ldr	r3, [pc, #96]	; (8003a98 <HAL_ADC_MspInit+0x138>)
 8003a38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a3e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a46:	9304      	str	r3, [sp, #16]
 8003a48:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a4a:	4b13      	ldr	r3, [pc, #76]	; (8003a98 <HAL_ADC_MspInit+0x138>)
 8003a4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 8003a56:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8003a88 <HAL_ADC_MspInit+0x128>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8003a60:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a62:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8003a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 8003a68:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a6c:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6e:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8003a70:	f002 f8c4 	bl	8005bfc <HAL_GPIO_Init>
}
 8003a74:	b01c      	add	sp, #112	; 0x70
 8003a76:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003a78:	f7fd fde4 	bl	8001644 <Error_Handler>
 8003a7c:	e791      	b.n	80039a2 <HAL_ADC_MspInit+0x42>
      Error_Handler();
 8003a7e:	f7fd fde1 	bl	8001644 <Error_Handler>
 8003a82:	e7d2      	b.n	8003a2a <HAL_ADC_MspInit+0xca>
 8003a84:	f3af 8000 	nop.w
 8003a88:	00000040 	.word	0x00000040
 8003a8c:	00000003 	.word	0x00000003
 8003a90:	50000100 	.word	0x50000100
 8003a94:	20001fd8 	.word	0x20001fd8
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	48000400 	.word	0x48000400

08003aa0 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003aa0:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 8003aa2:	6802      	ldr	r2, [r0, #0]
 8003aa4:	4934      	ldr	r1, [pc, #208]	; (8003b78 <HAL_COMP_MspInit+0xd8>)
{
 8003aa6:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa8:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 8003aaa:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aac:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003ab0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003ab4:	9308      	str	r3, [sp, #32]
  if(hcomp->Instance==COMP1)
 8003ab6:	d008      	beq.n	8003aca <HAL_COMP_MspInit+0x2a>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 8003ab8:	4b30      	ldr	r3, [pc, #192]	; (8003b7c <HAL_COMP_MspInit+0xdc>)
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d01e      	beq.n	8003afc <HAL_COMP_MspInit+0x5c>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
  else if(hcomp->Instance==COMP4)
 8003abe:	4b30      	ldr	r3, [pc, #192]	; (8003b80 <HAL_COMP_MspInit+0xe0>)
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d034      	beq.n	8003b2e <HAL_COMP_MspInit+0x8e>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 8003ac4:	b00b      	add	sp, #44	; 0x2c
 8003ac6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ace:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8003ad2:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8003b60 <HAL_COMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 8003ae6:	a904      	add	r1, sp, #16
 8003ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8003aec:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af0:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 8003af2:	f002 f883 	bl	8005bfc <HAL_GPIO_Init>
}
 8003af6:	b00b      	add	sp, #44	; 0x2c
 8003af8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003afc:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8003b00:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003b04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8003b0e:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8003b68 <HAL_COMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8003b18:	a904      	add	r1, sp, #16
 8003b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8003b1e:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b22:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8003b24:	f002 f86a 	bl	8005bfc <HAL_GPIO_Init>
}
 8003b28:	b00b      	add	sp, #44	; 0x2c
 8003b2a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b2e:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8003b32:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003b36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8003b38:	4812      	ldr	r0, [pc, #72]	; (8003b84 <HAL_COMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b3a:	f042 0202 	orr.w	r2, r2, #2
 8003b3e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8003b42:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8003b70 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8003b4c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8003b4e:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b52:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8003b54:	f002 f852 	bl	8005bfc <HAL_GPIO_Init>
}
 8003b58:	b00b      	add	sp, #44	; 0x2c
 8003b5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b5e:	bf00      	nop
 8003b60:	00000002 	.word	0x00000002
 8003b64:	00000003 	.word	0x00000003
 8003b68:	00000080 	.word	0x00000080
 8003b6c:	00000003 	.word	0x00000003
 8003b70:	00000001 	.word	0x00000001
 8003b74:	00000003 	.word	0x00000003
 8003b78:	40010200 	.word	0x40010200
 8003b7c:	40010204 	.word	0x40010204
 8003b80:	4001020c 	.word	0x4001020c
 8003b84:	48000400 	.word	0x48000400

08003b88 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8003b88:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <HAL_CORDIC_MspInit+0x2c>)
 8003b8a:	6802      	ldr	r2, [r0, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d000      	beq.n	8003b92 <HAL_CORDIC_MspInit+0xa>
 8003b90:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003b92:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 8003b96:	f042 0208 	orr.w	r2, r2, #8
 8003b9a:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 8003b9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 8003ba2:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	9301      	str	r3, [sp, #4]
 8003bac:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8003bae:	b002      	add	sp, #8
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40020c00 	.word	0x40020c00

08003bb8 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC3)
 8003bb8:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <HAL_DAC_MspInit+0x2c>)
 8003bba:	6802      	ldr	r2, [r0, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d000      	beq.n	8003bc2 <HAL_DAC_MspInit+0xa>
 8003bc0:	4770      	bx	lr
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 8003bc2:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8003bc6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
{
 8003bca:	b082      	sub	sp, #8
    __HAL_RCC_DAC3_CLK_ENABLE();
 8003bcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bce:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003bd2:	64da      	str	r2, [r3, #76]	; 0x4c
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8003bde:	b002      	add	sp, #8
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	50001000 	.word	0x50001000

08003be8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003be8:	b5d0      	push	{r4, r6, r7, lr}
 8003bea:	4604      	mov	r4, r0
 8003bec:	b09a      	sub	sp, #104	; 0x68
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bee:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bf0:	2244      	movs	r2, #68	; 0x44
 8003bf2:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf4:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8003bf8:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8003bfc:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bfe:	f006 f8d7 	bl	8009db0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8003c02:	4b2f      	ldr	r3, [pc, #188]	; (8003cc0 <HAL_FDCAN_MspInit+0xd8>)
 8003c04:	6822      	ldr	r2, [r4, #0]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d001      	beq.n	8003c0e <HAL_FDCAN_MspInit+0x26>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8003c0a:	b01a      	add	sp, #104	; 0x68
 8003c0c:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003c0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003c12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c16:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003c18:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003c1a:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c1c:	f002 fdc4 	bl	80067a8 <HAL_RCCEx_PeriphCLKConfig>
 8003c20:	2800      	cmp	r0, #0
 8003c22:	d149      	bne.n	8003cb8 <HAL_FDCAN_MspInit+0xd0>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003c24:	4b27      	ldr	r3, [pc, #156]	; (8003cc4 <HAL_FDCAN_MspInit+0xdc>)
 8003c26:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c28:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003c2c:	659a      	str	r2, [r3, #88]	; 0x58
 8003c2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c30:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8003c34:	9201      	str	r2, [sp, #4]
 8003c36:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c42:	f002 0201 	and.w	r2, r2, #1
 8003c46:	9202      	str	r2, [sp, #8]
 8003c48:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c4c:	f042 0202 	orr.w	r2, r2, #2
 8003c50:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003c5a:	2409      	movs	r4, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c5c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003c5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c62:	2600      	movs	r6, #0
 8003c64:	2700      	movs	r7, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c70:	e9cd 6706 	strd	r6, r7, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c74:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003c76:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c78:	f001 ffc0 	bl	8005bfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c7c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c7e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c80:	f44f 7200 	mov.w	r2, #512	; 0x200
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c84:	4810      	ldr	r0, [pc, #64]	; (8003cc8 <HAL_FDCAN_MspInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003c86:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c8c:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c90:	f001 ffb4 	bl	8005bfc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003c94:	2200      	movs	r2, #0
 8003c96:	4611      	mov	r1, r2
 8003c98:	2015      	movs	r0, #21
 8003c9a:	f001 fb69 	bl	8005370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003c9e:	2015      	movs	r0, #21
 8003ca0:	f001 fba4 	bl	80053ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	2016      	movs	r0, #22
 8003caa:	f001 fb61 	bl	8005370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8003cae:	2016      	movs	r0, #22
 8003cb0:	f001 fb9c 	bl	80053ec <HAL_NVIC_EnableIRQ>
}
 8003cb4:	b01a      	add	sp, #104	; 0x68
 8003cb6:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8003cb8:	f7fd fcc4 	bl	8001644 <Error_Handler>
 8003cbc:	e7b2      	b.n	8003c24 <HAL_FDCAN_MspInit+0x3c>
 8003cbe:	bf00      	nop
 8003cc0:	40006400 	.word	0x40006400
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	48000400 	.word	0x48000400
 8003ccc:	00000000 	.word	0x00000000

08003cd0 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8003cd0:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 8003cd2:	6802      	ldr	r2, [r0, #0]
 8003cd4:	4934      	ldr	r1, [pc, #208]	; (8003da8 <HAL_OPAMP_MspInit+0xd8>)
{
 8003cd6:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd8:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 8003cda:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cdc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003ce0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003ce4:	9308      	str	r3, [sp, #32]
  if(hopamp->Instance==OPAMP1)
 8003ce6:	d008      	beq.n	8003cfa <HAL_OPAMP_MspInit+0x2a>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 8003ce8:	4b30      	ldr	r3, [pc, #192]	; (8003dac <HAL_OPAMP_MspInit+0xdc>)
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d01e      	beq.n	8003d2c <HAL_OPAMP_MspInit+0x5c>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 8003cee:	4b30      	ldr	r3, [pc, #192]	; (8003db0 <HAL_OPAMP_MspInit+0xe0>)
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d033      	beq.n	8003d5c <HAL_OPAMP_MspInit+0x8c>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8003cf4:	b00b      	add	sp, #44	; 0x2c
 8003cf6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cfa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cfe:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 8003d02:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8003d90 <HAL_OPAMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d08:	f042 0201 	orr.w	r2, r2, #1
 8003d0c:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d16:	a904      	add	r1, sp, #16
 8003d18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 8003d1c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d20:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d22:	f001 ff6b 	bl	8005bfc <HAL_GPIO_Init>
}
 8003d26:	b00b      	add	sp, #44	; 0x2c
 8003d28:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d2c:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8003d30:	33fc      	adds	r3, #252	; 0xfc
 8003d32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d34:	f042 0201 	orr.w	r2, r2, #1
 8003d38:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 8003d3c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8003d98 <HAL_OPAMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d46:	a904      	add	r1, sp, #16
 8003d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 8003d4c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d50:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d52:	f001 ff53 	bl	8005bfc <HAL_GPIO_Init>
}
 8003d56:	b00b      	add	sp, #44	; 0x2c
 8003d58:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d5c:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8003d60:	33f8      	adds	r3, #248	; 0xf8
 8003d62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d64:	4813      	ldr	r0, [pc, #76]	; (8003db4 <HAL_OPAMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d66:	f042 0202 	orr.w	r2, r2, #2
 8003d6a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 8003d6e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8003da0 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d78:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 8003d7a:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d7e:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d80:	f001 ff3c 	bl	8005bfc <HAL_GPIO_Init>
}
 8003d84:	b00b      	add	sp, #44	; 0x2c
 8003d86:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d8a:	bf00      	nop
 8003d8c:	f3af 8000 	nop.w
 8003d90:	0000000e 	.word	0x0000000e
 8003d94:	00000003 	.word	0x00000003
 8003d98:	000000e0 	.word	0x000000e0
 8003d9c:	00000003 	.word	0x00000003
 8003da0:	00000007 	.word	0x00000007
 8003da4:	00000003 	.word	0x00000003
 8003da8:	40010300 	.word	0x40010300
 8003dac:	40010304 	.word	0x40010304
 8003db0:	40010308 	.word	0x40010308
 8003db4:	48000400 	.word	0x48000400

08003db8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003db8:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 8003dba:	4a17      	ldr	r2, [pc, #92]	; (8003e18 <HAL_TIM_Base_MspInit+0x60>)
 8003dbc:	6803      	ldr	r3, [r0, #0]
 8003dbe:	4293      	cmp	r3, r2
{
 8003dc0:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 8003dc2:	d005      	beq.n	8003dd0 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8003dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc8:	d00f      	beq.n	8003dea <HAL_TIM_Base_MspInit+0x32>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003dca:	b003      	add	sp, #12
 8003dcc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003dd0:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <HAL_TIM_Base_MspInit+0x64>)
 8003dd2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dd8:	661a      	str	r2, [r3, #96]	; 0x60
 8003dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	9b00      	ldr	r3, [sp, #0]
}
 8003de4:	b003      	add	sp, #12
 8003de6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003dea:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003dee:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003df0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003df2:	f041 0101 	orr.w	r1, r1, #1
 8003df6:	6599      	str	r1, [r3, #88]	; 0x58
 8003df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003e00:	201c      	movs	r0, #28
 8003e02:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e04:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003e06:	f001 fab3 	bl	8005370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e0a:	201c      	movs	r0, #28
}
 8003e0c:	b003      	add	sp, #12
 8003e0e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e12:	f001 baeb 	b.w	80053ec <HAL_NVIC_EnableIRQ>
 8003e16:	bf00      	nop
 8003e18:	40012c00 	.word	0x40012c00
 8003e1c:	40021000 	.word	0x40021000

08003e20 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003e20:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 8003e22:	4a1b      	ldr	r2, [pc, #108]	; (8003e90 <HAL_TIM_Encoder_MspInit+0x70>)
 8003e24:	6801      	ldr	r1, [r0, #0]
{
 8003e26:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e28:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 8003e2a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e2c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003e30:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003e34:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 8003e36:	d002      	beq.n	8003e3e <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003e38:	b009      	add	sp, #36	; 0x24
 8003e3a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e42:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8003e46:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8003e88 <HAL_TIM_Encoder_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e4c:	4811      	ldr	r0, [pc, #68]	; (8003e94 <HAL_TIM_Encoder_MspInit+0x74>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e4e:	f042 0204 	orr.w	r2, r2, #4
 8003e52:	659a      	str	r2, [r3, #88]	; 0x58
 8003e54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e56:	f002 0204 	and.w	r2, r2, #4
 8003e5a:	9200      	str	r2, [sp, #0]
 8003e5c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e60:	f042 0202 	orr.w	r2, r2, #2
 8003e64:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e6e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003e70:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8003e72:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e76:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003e78:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e7a:	f001 febf 	bl	8005bfc <HAL_GPIO_Init>
}
 8003e7e:	b009      	add	sp, #36	; 0x24
 8003e80:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e84:	f3af 8000 	nop.w
 8003e88:	000000c0 	.word	0x000000c0
 8003e8c:	00000002 	.word	0x00000002
 8003e90:	40000800 	.word	0x40000800
 8003e94:	48000400 	.word	0x48000400

08003e98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e98:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003e9a:	4a2a      	ldr	r2, [pc, #168]	; (8003f44 <HAL_TIM_MspPostInit+0xac>)
 8003e9c:	6801      	ldr	r1, [r0, #0]
{
 8003e9e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea0:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8003ea2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003ea8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003eac:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 8003eae:	d001      	beq.n	8003eb4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003eb0:	b00a      	add	sp, #40	; 0x28
 8003eb2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003eb8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003ebc:	2604      	movs	r6, #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ebe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8003ec0:	4821      	ldr	r0, [pc, #132]	; (8003f48 <HAL_TIM_MspPostInit+0xb0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ec2:	4332      	orrs	r2, r6
 8003ec4:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ec6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ec8:	4032      	ands	r2, r6
 8003eca:	9201      	str	r2, [sp, #4]
 8003ecc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ece:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ed0:	f042 0202 	orr.w	r2, r2, #2
 8003ed4:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ed6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ed8:	f002 0202 	and.w	r2, r2, #2
 8003edc:	9202      	str	r2, [sp, #8]
 8003ede:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003eea:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8003ef2:	2402      	movs	r4, #2
 8003ef4:	2502      	movs	r5, #2
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8003ef6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8003ef8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003efc:	2302      	movs	r3, #2
 8003efe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f02:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f06:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8003f08:	f001 fe78 	bl	8005bfc <HAL_GPIO_Init>
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8003f0c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8003f0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f12:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8003f14:	480d      	ldr	r0, [pc, #52]	; (8003f4c <HAL_TIM_MspPostInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003f16:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8003f18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f1c:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8003f20:	f001 fe6c 	bl	8005bfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8003f24:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f2e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003f30:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8003f36:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003f3a:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f3c:	f001 fe5e 	bl	8005bfc <HAL_GPIO_Init>
}
 8003f40:	b00a      	add	sp, #40	; 0x28
 8003f42:	bd70      	pop	{r4, r5, r6, pc}
 8003f44:	40012c00 	.word	0x40012c00
 8003f48:	48000800 	.word	0x48000800
 8003f4c:	48000400 	.word	0x48000400

08003f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f50:	b570      	push	{r4, r5, r6, lr}
 8003f52:	4604      	mov	r4, r0
 8003f54:	b098      	sub	sp, #96	; 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f56:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f58:	2244      	movs	r2, #68	; 0x44
 8003f5a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f5c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8003f60:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8003f64:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f66:	f005 ff23 	bl	8009db0 <memset>
  if(huart->Instance==USART2)
 8003f6a:	4b31      	ldr	r3, [pc, #196]	; (8004030 <HAL_UART_MspInit+0xe0>)
 8003f6c:	6822      	ldr	r2, [r4, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d001      	beq.n	8003f76 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003f72:	b018      	add	sp, #96	; 0x60
 8003f74:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003f76:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f78:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003f7a:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f7c:	f002 fc14 	bl	80067a8 <HAL_RCCEx_PeriphCLKConfig>
 8003f80:	2800      	cmp	r0, #0
 8003f82:	d14b      	bne.n	800401c <HAL_UART_MspInit+0xcc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f84:	4b2b      	ldr	r3, [pc, #172]	; (8004034 <HAL_UART_MspInit+0xe4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f86:	482c      	ldr	r0, [pc, #176]	; (8004038 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8003f8a:	4e2c      	ldr	r6, [pc, #176]	; (800403c <HAL_UART_MspInit+0xec>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f8c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003f90:	659a      	str	r2, [r3, #88]	; 0x58
 8003f92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f94:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003f98:	9200      	str	r2, [sp, #0]
 8003f9a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f9e:	f042 0202 	orr.w	r2, r2, #2
 8003fa2:	64da      	str	r2, [r3, #76]	; 0x4c
 8003fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003fac:	2218      	movs	r2, #24
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fb4:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fb6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fbe:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003fc0:	2307      	movs	r3, #7
 8003fc2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fc4:	f001 fe1a 	bl	8005bfc <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003fc8:	491d      	ldr	r1, [pc, #116]	; (8004040 <HAL_UART_MspInit+0xf0>)
 8003fca:	221a      	movs	r2, #26
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fcc:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003fce:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003fd2:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fd4:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fd6:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fda:	e9c6 2304 	strd	r2, r3, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003fde:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003fe2:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003fe4:	f001 fb2a 	bl	800563c <HAL_DMA_Init>
 8003fe8:	b9f0      	cbnz	r0, 8004028 <HAL_UART_MspInit+0xd8>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8003fea:	4d16      	ldr	r5, [pc, #88]	; (8004044 <HAL_UART_MspInit+0xf4>)
 8003fec:	4916      	ldr	r1, [pc, #88]	; (8004048 <HAL_UART_MspInit+0xf8>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003fee:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003ff0:	221b      	movs	r2, #27
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ff2:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003ff4:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003ff8:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ffa:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ffc:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ffe:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004002:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004006:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800400a:	62b4      	str	r4, [r6, #40]	; 0x28
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800400c:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800400e:	f001 fb15 	bl	800563c <HAL_DMA_Init>
 8004012:	b930      	cbnz	r0, 8004022 <HAL_UART_MspInit+0xd2>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004014:	67a5      	str	r5, [r4, #120]	; 0x78
 8004016:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8004018:	b018      	add	sp, #96	; 0x60
 800401a:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800401c:	f7fd fb12 	bl	8001644 <Error_Handler>
 8004020:	e7b0      	b.n	8003f84 <HAL_UART_MspInit+0x34>
      Error_Handler();
 8004022:	f7fd fb0f 	bl	8001644 <Error_Handler>
 8004026:	e7f5      	b.n	8004014 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8004028:	f7fd fb0c 	bl	8001644 <Error_Handler>
 800402c:	e7dd      	b.n	8003fea <HAL_UART_MspInit+0x9a>
 800402e:	bf00      	nop
 8004030:	40004400 	.word	0x40004400
 8004034:	40021000 	.word	0x40021000
 8004038:	48000400 	.word	0x48000400
 800403c:	20000a20 	.word	0x20000a20
 8004040:	40020008 	.word	0x40020008
 8004044:	20000a80 	.word	0x20000a80
 8004048:	4002001c 	.word	0x4002001c

0800404c <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800404c:	4801      	ldr	r0, [pc, #4]	; (8004054 <FDCAN1_IT0_IRQHandler+0x8>)
 800404e:	f001 bd11 	b.w	8005a74 <HAL_FDCAN_IRQHandler>
 8004052:	bf00      	nop
 8004054:	20000ae0 	.word	0x20000ae0

08004058 <FDCAN1_IT1_IRQHandler>:
 8004058:	4801      	ldr	r0, [pc, #4]	; (8004060 <FDCAN1_IT1_IRQHandler+0x8>)
 800405a:	f001 bd0b 	b.w	8005a74 <HAL_FDCAN_IRQHandler>
 800405e:	bf00      	nop
 8004060:	20000ae0 	.word	0x20000ae0

08004064 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004064:	4801      	ldr	r0, [pc, #4]	; (800406c <TIM2_IRQHandler+0x8>)
 8004066:	f003 b913 	b.w	8007290 <HAL_TIM_IRQHandler>
 800406a:	bf00      	nop
 800406c:	20000c44 	.word	0x20000c44

08004070 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8004070:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004074:	2240      	movs	r2, #64	; 0x40
 8004076:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  (void)TSK_HighFrequencyTask();
 8004078:	f7fd bf9c 	b.w	8001fb4 <TSK_HighFrequencyTask>

0800407c <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800407c:	4b03      	ldr	r3, [pc, #12]	; (800408c <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    ( void )R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 800407e:	4804      	ldr	r0, [pc, #16]	; (8004090 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004080:	f06f 0201 	mvn.w	r2, #1
 8004084:	611a      	str	r2, [r3, #16]
 8004086:	f005 ba97 	b.w	80095b8 <R3_2_TIMx_UP_IRQHandler>
 800408a:	bf00      	nop
 800408c:	40012c00 	.word	0x40012c00
 8004090:	2000020c 	.word	0x2000020c

08004094 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8004094:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8004096:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004098:	691a      	ldr	r2, [r3, #16]
 800409a:	0611      	lsls	r1, r2, #24
 800409c:	d505      	bpl.n	80040aa <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800409e:	f06f 0280 	mvn.w	r2, #128	; 0x80
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    ( void )R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 80040a2:	480a      	ldr	r0, [pc, #40]	; (80040cc <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80040a4:	611a      	str	r2, [r3, #16]
 80040a6:	f005 faf3 	bl	8009690 <R3_2_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80040aa:	4b07      	ldr	r3, [pc, #28]	; (80040c8 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	05d2      	lsls	r2, r2, #23
 80040b0:	d505      	bpl.n	80040be <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80040b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    ( void )R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 80040b6:	4805      	ldr	r0, [pc, #20]	; (80040cc <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80040b8:	611a      	str	r2, [r3, #16]
 80040ba:	f005 fac5 	bl	8009648 <R3_2_BRK2_IRQHandler>
  /* Systick is not executed due low priority so is necessary to call MC_Scheduler here.*/
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */
  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80040be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 80040c2:	f7fd bf31 	b.w	8001f28 <MC_Scheduler>
 80040c6:	bf00      	nop
 80040c8:	40012c00 	.word	0x40012c00
 80040cc:	2000020c 	.word	0x2000020c

080040d0 <TIM4_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 80040d0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) != 0U)
 80040d2:	4c0d      	ldr	r4, [pc, #52]	; (8004108 <TIM4_IRQHandler+0x38>)
 80040d4:	6a23      	ldr	r3, [r4, #32]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	07d1      	lsls	r1, r2, #31
 80040da:	d502      	bpl.n	80040e2 <TIM4_IRQHandler+0x12>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80040dc:	691a      	ldr	r2, [r3, #16]
  {
    if (LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx) != 0U)
 80040de:	07d2      	lsls	r2, r2, #31
 80040e0:	d400      	bmi.n	80040e4 <TIM4_IRQHandler+0x14>
    /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 80040e2:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80040e4:	f06f 0201 	mvn.w	r2, #1
 80040e8:	611a      	str	r2, [r3, #16]
      (void)ENC_IRQHandler(&ENCODER_M1);
 80040ea:	4620      	mov	r0, r4
 80040ec:	f004 f92e 	bl	800834c <ENC_IRQHandler>
      if(ENCODER_M1.TIMx->CNT == 0)
 80040f0:	6a23      	ldr	r3, [r4, #32]
      	  enc_index++;
 80040f2:	4a06      	ldr	r2, [pc, #24]	; (800410c <TIM4_IRQHandler+0x3c>)
      if(ENCODER_M1.TIMx->CNT == 0)
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	b91b      	cbnz	r3, 8004100 <TIM4_IRQHandler+0x30>
      	  enc_index++;
 80040f8:	6813      	ldr	r3, [r2, #0]
 80040fa:	3301      	adds	r3, #1
 80040fc:	6013      	str	r3, [r2, #0]
}
 80040fe:	bd10      	pop	{r4, pc}
      	  enc_index--;
 8004100:	6813      	ldr	r3, [r2, #0]
 8004102:	3b01      	subs	r3, #1
 8004104:	6013      	str	r3, [r2, #0]
}
 8004106:	bd10      	pop	{r4, pc}
 8004108:	200000e0 	.word	0x200000e0
 800410c:	20001fdc 	.word	0x20001fdc

08004110 <DMA1_Channel1_IRQHandler>:
  }
}

__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel )
{
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR, (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2) )) == (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2))) ? 1UL : 0UL));
 8004110:	4b04      	ldr	r3, [pc, #16]	; (8004124 <DMA1_Channel1_IRQHandler+0x14>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	0792      	lsls	r2, r2, #30
 8004116:	d400      	bmi.n	800411a <DMA1_Channel1_IRQHandler+0xa>
  }
  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

}
 8004118:	4770      	bx	lr
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 800411a:	2202      	movs	r2, #2
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 800411c:	4802      	ldr	r0, [pc, #8]	; (8004128 <DMA1_Channel1_IRQHandler+0x18>)
 800411e:	605a      	str	r2, [r3, #4]
 8004120:	f7fc bd2a 	b.w	8000b78 <ASPEP_HWDataReceivedIT>
 8004124:	40020000 	.word	0x40020000
 8004128:	200003bc 	.word	0x200003bc

0800412c <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800412c:	4b33      	ldr	r3, [pc, #204]	; (80041fc <USART2_IRQHandler+0xd0>)
 800412e:	69da      	ldr	r2, [r3, #28]
 8004130:	0650      	lsls	r0, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 8004132:	b510      	push	{r4, lr}
 8004134:	d509      	bpl.n	800414a <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8004136:	4932      	ldr	r1, [pc, #200]	; (8004200 <USART2_IRQHandler+0xd4>)
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel( DMA_TX_A, DMACH_TX_A );
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8004138:	4832      	ldr	r0, [pc, #200]	; (8004204 <USART2_IRQHandler+0xd8>)
 800413a:	69ca      	ldr	r2, [r1, #28]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800413c:	2440      	movs	r4, #64	; 0x40
 800413e:	f022 0201 	bic.w	r2, r2, #1
 8004142:	61ca      	str	r2, [r1, #28]
 8004144:	621c      	str	r4, [r3, #32]
 8004146:	f7fc fb77 	bl	8000838 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800414a:	492c      	ldr	r1, [pc, #176]	; (80041fc <USART2_IRQHandler+0xd0>)
 800414c:	69ca      	ldr	r2, [r1, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800414e:	69cb      	ldr	r3, [r1, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8004150:	69c8      	ldr	r0, [r1, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004152:	f002 0c08 	and.w	ip, r2, #8
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8004156:	f003 0302 	and.w	r3, r3, #2
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 800415a:	688a      	ldr	r2, [r1, #8]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 800415c:	ea43 030c 	orr.w	r3, r3, ip
 8004160:	f000 0004 	and.w	r0, r0, #4
 8004164:	4303      	orrs	r3, r0
  test2 = LL_USART_IsActiveFlag_FE (USARTA);
  test3 = LL_USART_IsActiveFlag_NE (USARTA);
  mask = LL_USART_IsEnabledIT_ERROR (USARTA);

  test1 = ( ( test1 | test2 | test3 ) & mask );
  if ( 0U == test1 )
 8004166:	f002 0201 	and.w	r2, r2, #1
 800416a:	bf08      	it	eq
 800416c:	2200      	moveq	r2, #0
 800416e:	b19a      	cbz	r2, 8004198 <USART2_IRQHandler+0x6c>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error*/
    WRITE_REG(USARTA->ICR, USART_ICR_FECF|USART_ICR_ORECF|USART_ICR_NECF);
 8004170:	230e      	movs	r3, #14
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8004172:	4a25      	ldr	r2, [pc, #148]	; (8004208 <USART2_IRQHandler+0xdc>)
 8004174:	620b      	str	r3, [r1, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	e852 3f00 	ldrex	r3, [r2]
 800417a:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	e842 3100 	strex	r1, r3, [r2]
 8004182:	2900      	cmp	r1, #0
 8004184:	d1f7      	bne.n	8004176 <USART2_IRQHandler+0x4a>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004186:	4a1d      	ldr	r2, [pc, #116]	; (80041fc <USART2_IRQHandler+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004188:	e852 3f00 	ldrex	r3, [r2]
 800418c:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	e842 3100 	strex	r1, r3, [r2]
 8004194:	2900      	cmp	r1, #0
 8004196:	d1f7      	bne.n	8004188 <USART2_IRQHandler+0x5c>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8004198:	4a18      	ldr	r2, [pc, #96]	; (80041fc <USART2_IRQHandler+0xd0>)
 800419a:	69d3      	ldr	r3, [r2, #28]
 800419c:	06d9      	lsls	r1, r3, #27
 800419e:	d52a      	bpl.n	80041f6 <USART2_IRQHandler+0xca>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 80041a0:	6813      	ldr	r3, [r2, #0]
 80041a2:	06db      	lsls	r3, r3, #27
 80041a4:	d528      	bpl.n	80041f8 <USART2_IRQHandler+0xcc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80041aa:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ae:	e842 3100 	strex	r1, r3, [r2]
 80041b2:	2900      	cmp	r1, #0
 80041b4:	d1f7      	bne.n	80041a6 <USART2_IRQHandler+0x7a>
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 80041b6:	4b14      	ldr	r3, [pc, #80]	; (8004208 <USART2_IRQHandler+0xdc>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80041bc:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	e843 2100 	strex	r1, r2, [r3]
 80041c4:	2900      	cmp	r1, #0
 80041c6:	d1f7      	bne.n	80041b8 <USART2_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c8:	e853 2f00 	ldrex	r2, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 80041cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d0:	e843 2100 	strex	r1, r2, [r3]
 80041d4:	2900      	cmp	r1, #0
 80041d6:	d1f7      	bne.n	80041c8 <USART2_IRQHandler+0x9c>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80041d8:	4a08      	ldr	r2, [pc, #32]	; (80041fc <USART2_IRQHandler+0xd0>)
 80041da:	6a52      	ldr	r2, [r2, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041dc:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80041e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e4:	e843 2100 	strex	r1, r2, [r3]
 80041e8:	2900      	cmp	r1, #0
 80041ea:	d1f7      	bne.n	80041dc <USART2_IRQHandler+0xb0>
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 80041ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 80041f0:	4804      	ldr	r0, [pc, #16]	; (8004204 <USART2_IRQHandler+0xd8>)
 80041f2:	f7fc bd0f 	b.w	8000c14 <ASPEP_HWDMAReset>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 80041f6:	6813      	ldr	r3, [r2, #0]
}
 80041f8:	bd10      	pop	{r4, pc}
 80041fa:	bf00      	nop
 80041fc:	40004400 	.word	0x40004400
 8004200:	40020000 	.word	0x40020000
 8004204:	200003bc 	.word	0x200003bc
 8004208:	40004408 	.word	0x40004408

0800420c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800420c:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 800420e:	f7fd ffc7 	bl	80021a0 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 8004212:	e7fe      	b.n	8004212 <HardFault_Handler+0x6>

08004214 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8004214:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8004216:	4c0a      	ldr	r4, [pc, #40]	; (8004240 <SysTick_Handler+0x2c>)
 8004218:	7823      	ldrb	r3, [r4, #0]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d006      	beq.n	800422c <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 800421e:	3301      	adds	r3, #1
 8004220:	b2db      	uxtb	r3, r3
 8004222:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8004224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8004228:	f7fd bfae 	b.w	8002188 <MC_RunMotorControlTasks>
    HAL_IncTick();
 800422c:	f000 f8d8 	bl	80043e0 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8004230:	f001 f906 	bl	8005440 <HAL_SYSTICK_IRQHandler>
 8004234:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8004236:	7023      	strb	r3, [r4, #0]
}
 8004238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 800423c:	f7fd bfa4 	b.w	8002188 <MC_RunMotorControlTasks>
 8004240:	20000430 	.word	0x20000430

08004244 <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 8004244:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004246:	2340      	movs	r3, #64	; 0x40
{
 8004248:	b470      	push	{r4, r5, r6}
 800424a:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8004250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	e842 3100 	strex	r1, r3, [r2]
 8004258:	2900      	cmp	r1, #0
 800425a:	d1f7      	bne.n	800424c <UASPEP_INIT+0x8>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800425c:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	e851 3f00 	ldrex	r3, [r1]
 8004264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004268:	e841 3400 	strex	r4, r3, [r1]
 800426c:	2c00      	cmp	r4, #0
 800426e:	d1f7      	bne.n	8004260 <UASPEP_INIT+0x1c>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8004270:	6901      	ldr	r1, [r0, #16]
 8004272:	4e17      	ldr	r6, [pc, #92]	; (80042d0 <UASPEP_INIT+0x8c>)
 8004274:	6883      	ldr	r3, [r0, #8]
 8004276:	5c74      	ldrb	r4, [r6, r1]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8004278:	6845      	ldr	r5, [r0, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 800427a:	4423      	add	r3, r4
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 800427c:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8004280:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8004282:	68c3      	ldr	r3, [r0, #12]
 8004284:	5cf1      	ldrb	r1, [r6, r3]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004286:	2340      	movs	r3, #64	; 0x40
 8004288:	6213      	str	r3, [r2, #32]
 800428a:	586b      	ldr	r3, [r5, r1]
 800428c:	f043 0302 	orr.w	r3, r3, #2
 8004290:	506b      	str	r3, [r5, r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004292:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	e851 3f00 	ldrex	r3, [r1]
 800429a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	e841 3400 	strex	r4, r3, [r1]
 80042a2:	2c00      	cmp	r4, #0
 80042a4:	d1f7      	bne.n	8004296 <UASPEP_INIT+0x52>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 80042a6:	68c3      	ldr	r3, [r0, #12]
 80042a8:	5cf0      	ldrb	r0, [r6, r3]
 80042aa:	4405      	add	r5, r0
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 80042ac:	f102 0124 	add.w	r1, r2, #36	; 0x24
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80042b0:	2340      	movs	r3, #64	; 0x40
 80042b2:	60a9      	str	r1, [r5, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80042b4:	f102 0108 	add.w	r1, r2, #8
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80042b8:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ba:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80042be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	e841 3200 	strex	r2, r3, [r1]
 80042c6:	2a00      	cmp	r2, #0
 80042c8:	d1f7      	bne.n	80042ba <UASPEP_INIT+0x76>
}
 80042ca:	bc70      	pop	{r4, r5, r6}
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	0800a0d0 	.word	0x0800a0d0

080042d4 <UASPEP_SEND_PACKET>:
  }
#endif
}

bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 80042d4:	b430      	push	{r4, r5}
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80042d6:	6903      	ldr	r3, [r0, #16]
 80042d8:	4d0c      	ldr	r5, [pc, #48]	; (800430c <UASPEP_SEND_PACKET+0x38>)
 80042da:	6884      	ldr	r4, [r0, #8]
 80042dc:	5ceb      	ldrb	r3, [r5, r3]
 80042de:	58e0      	ldr	r0, [r4, r3]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  bool result;
  if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 80042e0:	07c0      	lsls	r0, r0, #31
 80042e2:	eb04 0c03 	add.w	ip, r4, r3
 80042e6:	d40e      	bmi.n	8004306 <UASPEP_SEND_PACKET+0x32>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 80042e8:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80042ec:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80042f0:	0c09      	lsrs	r1, r1, #16
 80042f2:	0409      	lsls	r1, r1, #16
 80042f4:	4311      	orrs	r1, r2
 80042f6:	f8cc 1004 	str.w	r1, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80042fa:	58e2      	ldr	r2, [r4, r3]
  {
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_EnableChannel(pHandle->txDMA, pHandle->txChannel);
    result = true;
 80042fc:	2001      	movs	r0, #1
 80042fe:	4302      	orrs	r2, r0
 8004300:	50e2      	str	r2, [r4, r3]
  else
  {
    result = false;
  }
  return result;
}
 8004302:	bc30      	pop	{r4, r5}
 8004304:	4770      	bx	lr
    result = false;
 8004306:	2000      	movs	r0, #0
}
 8004308:	bc30      	pop	{r4, r5}
 800430a:	4770      	bx	lr
 800430c:	0800a0d0 	.word	0x0800a0d0

08004310 <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 8004310:	b430      	push	{r4, r5}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8004312:	68c3      	ldr	r3, [r0, #12]
 8004314:	4d0b      	ldr	r5, [pc, #44]	; (8004344 <UASPEP_RECEIVE_BUFFER+0x34>)
 8004316:	6844      	ldr	r4, [r0, #4]
 8004318:	5ce8      	ldrb	r0, [r5, r3]
 800431a:	5825      	ldr	r5, [r4, r0]
 800431c:	eb04 0c00 	add.w	ip, r4, r0
 8004320:	f025 0501 	bic.w	r5, r5, #1
 8004324:	5025      	str	r5, [r4, r0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8004326:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800432a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800432e:	0c1b      	lsrs	r3, r3, #16
 8004330:	041b      	lsls	r3, r3, #16
 8004332:	431a      	orrs	r2, r3
 8004334:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8004338:	5823      	ldr	r3, [r4, r0]
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	5023      	str	r3, [r4, r0]
  LL_DMA_DisableChannel(pHandle->rxDMA, pHandle->rxChannel);
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);
  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 8004340:	bc30      	pop	{r4, r5}
 8004342:	4770      	bx	lr
 8004344:	0800a0d0 	.word	0x0800a0d0

08004348 <UASPEP_IDLE_ENABLE>:

void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8004348:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800434a:	2310      	movs	r3, #16
 800434c:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004352:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	e842 3100 	strex	r1, r3, [r2]
 800435a:	2900      	cmp	r1, #0
 800435c:	d1f7      	bne.n	800434e <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 800435e:	4770      	bx	lr

08004360 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004360:	4a03      	ldr	r2, [pc, #12]	; (8004370 <SystemInit+0x10>)
 8004362:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004366:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800436a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800436e:	4770      	bx	lr
 8004370:	e000ed00 	.word	0xe000ed00

08004374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004374:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8004376:	4b0f      	ldr	r3, [pc, #60]	; (80043b4 <HAL_InitTick+0x40>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	b90b      	cbnz	r3, 8004380 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800437c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800437e:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004380:	490d      	ldr	r1, [pc, #52]	; (80043b8 <HAL_InitTick+0x44>)
 8004382:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004386:	4605      	mov	r5, r0
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	6808      	ldr	r0, [r1, #0]
 800438e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004392:	f001 f839 	bl	8005408 <HAL_SYSTICK_Config>
 8004396:	4604      	mov	r4, r0
 8004398:	2800      	cmp	r0, #0
 800439a:	d1ef      	bne.n	800437c <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800439c:	2d0f      	cmp	r5, #15
 800439e:	d8ed      	bhi.n	800437c <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043a0:	4602      	mov	r2, r0
 80043a2:	4629      	mov	r1, r5
 80043a4:	f04f 30ff 	mov.w	r0, #4294967295
 80043a8:	f000 ffe2 	bl	8005370 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80043ac:	4b03      	ldr	r3, [pc, #12]	; (80043bc <HAL_InitTick+0x48>)
 80043ae:	4620      	mov	r0, r4
 80043b0:	601d      	str	r5, [r3, #0]
}
 80043b2:	bd38      	pop	{r3, r4, r5, pc}
 80043b4:	20000438 	.word	0x20000438
 80043b8:	20000434 	.word	0x20000434
 80043bc:	2000043c 	.word	0x2000043c

080043c0 <HAL_Init>:
{
 80043c0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043c2:	2003      	movs	r0, #3
 80043c4:	f000 ffc2 	bl	800534c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043c8:	2004      	movs	r0, #4
 80043ca:	f7ff ffd3 	bl	8004374 <HAL_InitTick>
 80043ce:	b110      	cbz	r0, 80043d6 <HAL_Init+0x16>
    status = HAL_ERROR;
 80043d0:	2401      	movs	r4, #1
}
 80043d2:	4620      	mov	r0, r4
 80043d4:	bd10      	pop	{r4, pc}
 80043d6:	4604      	mov	r4, r0
    HAL_MspInit();
 80043d8:	f7ff faa2 	bl	8003920 <HAL_MspInit>
}
 80043dc:	4620      	mov	r0, r4
 80043de:	bd10      	pop	{r4, pc}

080043e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80043e0:	4a03      	ldr	r2, [pc, #12]	; (80043f0 <HAL_IncTick+0x10>)
 80043e2:	4904      	ldr	r1, [pc, #16]	; (80043f4 <HAL_IncTick+0x14>)
 80043e4:	6813      	ldr	r3, [r2, #0]
 80043e6:	6809      	ldr	r1, [r1, #0]
 80043e8:	440b      	add	r3, r1
 80043ea:	6013      	str	r3, [r2, #0]
}
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20001fe0 	.word	0x20001fe0
 80043f4:	20000438 	.word	0x20000438

080043f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80043f8:	4b01      	ldr	r3, [pc, #4]	; (8004400 <HAL_GetTick+0x8>)
 80043fa:	6818      	ldr	r0, [r3, #0]
}
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20001fe0 	.word	0x20001fe0

08004404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004404:	b538      	push	{r3, r4, r5, lr}
 8004406:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004408:	f7ff fff6 	bl	80043f8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800440c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800440e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8004410:	d002      	beq.n	8004418 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004412:	4b04      	ldr	r3, [pc, #16]	; (8004424 <HAL_Delay+0x20>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004418:	f7ff ffee 	bl	80043f8 <HAL_GetTick>
 800441c:	1b43      	subs	r3, r0, r5
 800441e:	42a3      	cmp	r3, r4
 8004420:	d3fa      	bcc.n	8004418 <HAL_Delay+0x14>
  {
  }
}
 8004422:	bd38      	pop	{r3, r4, r5, pc}
 8004424:	20000438 	.word	0x20000438

08004428 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004428:	b530      	push	{r4, r5, lr}
 800442a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800442c:	2300      	movs	r3, #0
 800442e:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004430:	2800      	cmp	r0, #0
 8004432:	f000 80c9 	beq.w	80045c8 <HAL_ADC_Init+0x1a0>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004436:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8004438:	4604      	mov	r4, r0
 800443a:	2d00      	cmp	r5, #0
 800443c:	f000 8092 	beq.w	8004564 <HAL_ADC_Init+0x13c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004440:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004442:	6893      	ldr	r3, [r2, #8]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	d505      	bpl.n	8004454 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004448:	6893      	ldr	r3, [r2, #8]
 800444a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800444e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004452:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004454:	6893      	ldr	r3, [r2, #8]
 8004456:	00dd      	lsls	r5, r3, #3
 8004458:	d419      	bmi.n	800448e <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800445a:	4b70      	ldr	r3, [pc, #448]	; (800461c <HAL_ADC_Init+0x1f4>)
 800445c:	4870      	ldr	r0, [pc, #448]	; (8004620 <HAL_ADC_Init+0x1f8>)
 800445e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8004460:	6891      	ldr	r1, [r2, #8]
 8004462:	099b      	lsrs	r3, r3, #6
 8004464:	fba0 0303 	umull	r0, r3, r0, r3
 8004468:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 800446c:	099b      	lsrs	r3, r3, #6
 800446e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004472:	3301      	adds	r3, #1
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800447a:	6091      	str	r1, [r2, #8]
 800447c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800447e:	9b01      	ldr	r3, [sp, #4]
 8004480:	b12b      	cbz	r3, 800448e <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8004482:	9b01      	ldr	r3, [sp, #4]
 8004484:	3b01      	subs	r3, #1
 8004486:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004488:	9b01      	ldr	r3, [sp, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f9      	bne.n	8004482 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800448e:	6893      	ldr	r3, [r2, #8]
 8004490:	00d8      	lsls	r0, r3, #3
 8004492:	d459      	bmi.n	8004548 <HAL_ADC_Init+0x120>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004494:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004496:	f043 0310 	orr.w	r3, r3, #16
 800449a:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800449c:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800449e:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a0:	4303      	orrs	r3, r0
 80044a2:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044a4:	6893      	ldr	r3, [r2, #8]
 80044a6:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044aa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80044ac:	d153      	bne.n	8004556 <HAL_ADC_Init+0x12e>
 80044ae:	06d9      	lsls	r1, r3, #27
 80044b0:	d451      	bmi.n	8004556 <HAL_ADC_Init+0x12e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044b2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80044b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80044b8:	f043 0302 	orr.w	r3, r3, #2
 80044bc:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044be:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044c0:	07db      	lsls	r3, r3, #31
 80044c2:	d40e      	bmi.n	80044e2 <HAL_ADC_Init+0xba>
 80044c4:	4b57      	ldr	r3, [pc, #348]	; (8004624 <HAL_ADC_Init+0x1fc>)
 80044c6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80044ca:	6889      	ldr	r1, [r1, #8]
 80044cc:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044ce:	430b      	orrs	r3, r1
 80044d0:	07dd      	lsls	r5, r3, #31
 80044d2:	d406      	bmi.n	80044e2 <HAL_ADC_Init+0xba>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80044d4:	4954      	ldr	r1, [pc, #336]	; (8004628 <HAL_ADC_Init+0x200>)
 80044d6:	6865      	ldr	r5, [r4, #4]
 80044d8:	688b      	ldr	r3, [r1, #8]
 80044da:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80044de:	432b      	orrs	r3, r5
 80044e0:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80044e2:	68e5      	ldr	r5, [r4, #12]
 80044e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80044e6:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 80044ea:	432b      	orrs	r3, r5
 80044ec:	68a5      	ldr	r5, [r4, #8]
 80044ee:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80044f0:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80044f2:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 80044f4:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80044f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80044fc:	d05f      	beq.n	80045be <HAL_ADC_Init+0x196>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004500:	b121      	cbz	r1, 800450c <HAL_ADC_Init+0xe4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8004502:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004504:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004508:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800450a:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800450c:	68d5      	ldr	r5, [r2, #12]
 800450e:	4947      	ldr	r1, [pc, #284]	; (800462c <HAL_ADC_Init+0x204>)
 8004510:	4029      	ands	r1, r5
 8004512:	430b      	orrs	r3, r1
 8004514:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004516:	6913      	ldr	r3, [r2, #16]
 8004518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800451a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800451e:	430b      	orrs	r3, r1
 8004520:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004522:	6893      	ldr	r3, [r2, #8]
 8004524:	0759      	lsls	r1, r3, #29
 8004526:	d523      	bpl.n	8004570 <HAL_ADC_Init+0x148>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004528:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800452a:	6963      	ldr	r3, [r4, #20]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d04e      	beq.n	80045ce <HAL_ADC_Init+0x1a6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004530:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004532:	f023 030f 	bic.w	r3, r3, #15
 8004536:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004538:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800453a:	f023 0303 	bic.w	r3, r3, #3
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8004544:	b003      	add	sp, #12
 8004546:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004548:	6893      	ldr	r3, [r2, #8]
 800454a:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800454e:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004552:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004554:	d0ab      	beq.n	80044ae <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004556:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004558:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800455a:	f043 0310 	orr.w	r3, r3, #16
 800455e:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8004560:	b003      	add	sp, #12
 8004562:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8004564:	f7ff f9fc 	bl	8003960 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004568:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 800456a:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 800456e:	e767      	b.n	8004440 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004570:	6893      	ldr	r3, [r2, #8]
 8004572:	071b      	lsls	r3, r3, #28
 8004574:	d4d9      	bmi.n	800452a <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004576:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004578:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800457c:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800457e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004582:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004584:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004588:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800458c:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 800458e:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004590:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004592:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8004594:	bb19      	cbnz	r1, 80045de <HAL_ADC_Init+0x1b6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800459a:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800459c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80045a0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80045a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045a8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 80045ac:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d021      	beq.n	80045f8 <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80045b4:	6913      	ldr	r3, [r2, #16]
 80045b6:	f023 0301 	bic.w	r3, r3, #1
 80045ba:	6113      	str	r3, [r2, #16]
 80045bc:	e7b5      	b.n	800452a <HAL_ADC_Init+0x102>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80045be:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80045c0:	3901      	subs	r1, #1
 80045c2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80045c6:	e79a      	b.n	80044fe <HAL_ADC_Init+0xd6>
    return HAL_ERROR;
 80045c8:	2001      	movs	r0, #1
}
 80045ca:	b003      	add	sp, #12
 80045cc:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80045ce:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80045d0:	6a23      	ldr	r3, [r4, #32]
 80045d2:	f021 010f 	bic.w	r1, r1, #15
 80045d6:	3b01      	subs	r3, #1
 80045d8:	430b      	orrs	r3, r1
 80045da:	6313      	str	r3, [r2, #48]	; 0x30
 80045dc:	e7ac      	b.n	8004538 <HAL_ADC_Init+0x110>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80045de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e2:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80045e4:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80045e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80045ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045f0:	430b      	orrs	r3, r1
 80045f2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80045f6:	e7d9      	b.n	80045ac <HAL_ADC_Init+0x184>
        MODIFY_REG(hadc->Instance->CFGR2,
 80045f8:	6911      	ldr	r1, [r2, #16]
 80045fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80045fc:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80045fe:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8004602:	f021 0104 	bic.w	r1, r1, #4
 8004606:	432b      	orrs	r3, r5
 8004608:	430b      	orrs	r3, r1
 800460a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800460c:	430b      	orrs	r3, r1
 800460e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004610:	430b      	orrs	r3, r1
 8004612:	f043 0301 	orr.w	r3, r3, #1
 8004616:	6113      	str	r3, [r2, #16]
 8004618:	e787      	b.n	800452a <HAL_ADC_Init+0x102>
 800461a:	bf00      	nop
 800461c:	20000434 	.word	0x20000434
 8004620:	053e2d63 	.word	0x053e2d63
 8004624:	50000100 	.word	0x50000100
 8004628:	50000300 	.word	0x50000300
 800462c:	fff04007 	.word	0xfff04007

08004630 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004630:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004632:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8004636:	b083      	sub	sp, #12
 8004638:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800463a:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 800463c:	f04f 0000 	mov.w	r0, #0
 8004640:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8004642:	f000 8145 	beq.w	80048d0 <HAL_ADC_ConfigChannel+0x2a0>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004646:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8004648:	2001      	movs	r0, #1
 800464a:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800464e:	68a2      	ldr	r2, [r4, #8]
 8004650:	0755      	lsls	r5, r2, #29
 8004652:	d44c      	bmi.n	80046ee <HAL_ADC_ConfigChannel+0xbe>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004654:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(*preg,
 8004656:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004658:	ea4f 1e90 	mov.w	lr, r0, lsr #6
 800465c:	f00e 0e0c 	and.w	lr, lr, #12
 8004660:	f104 0c30 	add.w	ip, r4, #48	; 0x30
  MODIFY_REG(*preg,
 8004664:	f000 001f 	and.w	r0, r0, #31
 8004668:	f85e 500c 	ldr.w	r5, [lr, ip]
 800466c:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8004670:	261f      	movs	r6, #31
 8004672:	4082      	lsls	r2, r0
 8004674:	fa06 f000 	lsl.w	r0, r6, r0
 8004678:	ea25 0000 	bic.w	r0, r5, r0
 800467c:	4302      	orrs	r2, r0
 800467e:	f84e 200c 	str.w	r2, [lr, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004682:	68a2      	ldr	r2, [r4, #8]
 8004684:	0750      	lsls	r0, r2, #29
 8004686:	d543      	bpl.n	8004710 <HAL_ADC_ConfigChannel+0xe0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004688:	68a2      	ldr	r2, [r4, #8]
 800468a:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800468c:	68a2      	ldr	r2, [r4, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800468e:	f012 0f01 	tst.w	r2, #1
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004692:	4602      	mov	r2, r0
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004694:	d10c      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x80>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004696:	4dc2      	ldr	r5, [pc, #776]	; (80049a0 <HAL_ADC_ConfigChannel+0x370>)
 8004698:	68ce      	ldr	r6, [r1, #12]
 800469a:	42ae      	cmp	r6, r5
 800469c:	f000 80c1 	beq.w	8004822 <HAL_ADC_ConfigChannel+0x1f2>
    CLEAR_BIT(ADCx->DIFSEL,
 80046a0:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 80046a4:	f3c0 0012 	ubfx	r0, r0, #0, #19
 80046a8:	ea21 0100 	bic.w	r1, r1, r0
 80046ac:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80046b0:	49bc      	ldr	r1, [pc, #752]	; (80049a4 <HAL_ADC_ConfigChannel+0x374>)
 80046b2:	420a      	tst	r2, r1
 80046b4:	d02a      	beq.n	800470c <HAL_ADC_ConfigChannel+0xdc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80046b6:	49bc      	ldr	r1, [pc, #752]	; (80049a8 <HAL_ADC_ConfigChannel+0x378>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80046b8:	4dbc      	ldr	r5, [pc, #752]	; (80049ac <HAL_ADC_ConfigChannel+0x37c>)
 80046ba:	6888      	ldr	r0, [r1, #8]
 80046bc:	42aa      	cmp	r2, r5
 80046be:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 80046c2:	d01d      	beq.n	8004700 <HAL_ADC_ConfigChannel+0xd0>
 80046c4:	4dba      	ldr	r5, [pc, #744]	; (80049b0 <HAL_ADC_ConfigChannel+0x380>)
 80046c6:	42aa      	cmp	r2, r5
 80046c8:	d01a      	beq.n	8004700 <HAL_ADC_ConfigChannel+0xd0>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80046ca:	4dba      	ldr	r5, [pc, #744]	; (80049b4 <HAL_ADC_ConfigChannel+0x384>)
 80046cc:	42aa      	cmp	r2, r5
 80046ce:	f040 8131 	bne.w	8004934 <HAL_ADC_ConfigChannel+0x304>
 80046d2:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80046d6:	d119      	bne.n	800470c <HAL_ADC_ConfigChannel+0xdc>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046d8:	4ab7      	ldr	r2, [pc, #732]	; (80049b8 <HAL_ADC_ConfigChannel+0x388>)
 80046da:	4294      	cmp	r4, r2
 80046dc:	d016      	beq.n	800470c <HAL_ADC_ConfigChannel+0xdc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80046de:	688a      	ldr	r2, [r1, #8]
 80046e0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80046e4:	4316      	orrs	r6, r2
 80046e6:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 80046ea:	608e      	str	r6, [r1, #8]
}
 80046ec:	e003      	b.n	80046f6 <HAL_ADC_ConfigChannel+0xc6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046f0:	f042 0220 	orr.w	r2, r2, #32
 80046f4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80046fc:	b003      	add	sp, #12
 80046fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004700:	0202      	lsls	r2, r0, #8
 8004702:	d403      	bmi.n	800470c <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004704:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8004708:	f000 80f5 	beq.w	80048f6 <HAL_ADC_ConfigChannel+0x2c6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800470c:	2000      	movs	r0, #0
 800470e:	e7f2      	b.n	80046f6 <HAL_ADC_ConfigChannel+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004710:	68a2      	ldr	r2, [r4, #8]
 8004712:	f012 0208 	ands.w	r2, r2, #8
 8004716:	f040 8082 	bne.w	800481e <HAL_ADC_ConfigChannel+0x1ee>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800471a:	6888      	ldr	r0, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800471c:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800471e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8004722:	f000 811b 	beq.w	800495c <HAL_ADC_ConfigChannel+0x32c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004726:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 800472a:	f104 0714 	add.w	r7, r4, #20
 800472e:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8004732:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8004736:	f85c 5007 	ldr.w	r5, [ip, r7]
 800473a:	f04f 0e07 	mov.w	lr, #7
 800473e:	40b0      	lsls	r0, r6
 8004740:	fa0e f606 	lsl.w	r6, lr, r6
 8004744:	ea25 0506 	bic.w	r5, r5, r6
 8004748:	4328      	orrs	r0, r5
 800474a:	f84c 0007 	str.w	r0, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800474e:	6960      	ldr	r0, [r4, #20]
 8004750:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004754:	6160      	str	r0, [r4, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004756:	690f      	ldr	r7, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004758:	68e5      	ldr	r5, [r4, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800475a:	2f04      	cmp	r7, #4
 800475c:	d02f      	beq.n	80047be <HAL_ADC_ConfigChannel+0x18e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800475e:	f104 0060 	add.w	r0, r4, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004762:	f3c5 05c1 	ubfx	r5, r5, #3, #2
  MODIFY_REG(*preg,
 8004766:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
 800476a:	f8df c25c 	ldr.w	ip, [pc, #604]	; 80049c8 <HAL_ADC_ConfigChannel+0x398>
 800476e:	006e      	lsls	r6, r5, #1
 8004770:	680d      	ldr	r5, [r1, #0]
 8004772:	ea0e 0c0c 	and.w	ip, lr, ip
 8004776:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800477a:	ea45 0c0c 	orr.w	ip, r5, ip
 800477e:	694d      	ldr	r5, [r1, #20]
 8004780:	40b5      	lsls	r5, r6
 8004782:	ea45 050c 	orr.w	r5, r5, ip
 8004786:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800478a:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800478e:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8004790:	698e      	ldr	r6, [r1, #24]
 8004792:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
 8004796:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 800479a:	4335      	orrs	r5, r6
 800479c:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80047a0:	7f0d      	ldrb	r5, [r1, #28]
 80047a2:	690e      	ldr	r6, [r1, #16]
 80047a4:	2d01      	cmp	r5, #1
  MODIFY_REG(*preg,
 80047a6:	f850 5026 	ldr.w	r5, [r0, r6, lsl #2]
 80047aa:	bf08      	it	eq
 80047ac:	f04f 7200 	moveq.w	r2, #33554432	; 0x2000000
 80047b0:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 80047b4:	432a      	orrs	r2, r5
 80047b6:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
 80047ba:	6808      	ldr	r0, [r1, #0]
}
 80047bc:	e766      	b.n	800468c <HAL_ADC_ConfigChannel+0x5c>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047be:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80047c0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80047c2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80047c4:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047c8:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047cc:	2d00      	cmp	r5, #0
 80047ce:	f040 80fd 	bne.w	80049cc <HAL_ADC_ConfigChannel+0x39c>
 80047d2:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047d6:	42aa      	cmp	r2, r5
 80047d8:	f000 8171 	beq.w	8004abe <HAL_ADC_ConfigChannel+0x48e>
 80047dc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80047de:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047e0:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80047e4:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80047e8:	f104 0764 	add.w	r7, r4, #100	; 0x64
 80047ec:	42ae      	cmp	r6, r5
 80047ee:	f000 8154 	beq.w	8004a9a <HAL_ADC_ConfigChannel+0x46a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80047f2:	6896      	ldr	r6, [r2, #8]
 80047f4:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047f6:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80047fa:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80047fe:	42ae      	cmp	r6, r5
 8004800:	f000 8139 	beq.w	8004a76 <HAL_ADC_ConfigChannel+0x446>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004804:	68d6      	ldr	r6, [r2, #12]
 8004806:	68d6      	ldr	r6, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004808:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800480c:	f3c6 6284 	ubfx	r2, r6, #26, #5
 8004810:	4295      	cmp	r5, r2
 8004812:	f47f af3b 	bne.w	800468c <HAL_ADC_ConfigChannel+0x5c>
  MODIFY_REG(*preg,
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800481c:	603a      	str	r2, [r7, #0]
 800481e:	6808      	ldr	r0, [r1, #0]
}
 8004820:	e734      	b.n	800468c <HAL_ADC_ConfigChannel+0x5c>
    SET_BIT(ADCx->DIFSEL,
 8004822:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8004826:	f3c0 0512 	ubfx	r5, r0, #0, #19
 800482a:	432a      	orrs	r2, r5
 800482c:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004830:	2d00      	cmp	r5, #0
 8004832:	d050      	beq.n	80048d6 <HAL_ADC_ConfigChannel+0x2a6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004834:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8004838:	2a00      	cmp	r2, #0
 800483a:	f000 80f8 	beq.w	8004a2e <HAL_ADC_ConfigChannel+0x3fe>
  return __builtin_clz(value);
 800483e:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004842:	3201      	adds	r2, #1
 8004844:	f002 021f 	and.w	r2, r2, #31
 8004848:	2a09      	cmp	r2, #9
 800484a:	f240 80f0 	bls.w	8004a2e <HAL_ADC_ConfigChannel+0x3fe>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484e:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8004852:	2a00      	cmp	r2, #0
 8004854:	f000 814f 	beq.w	8004af6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8004858:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800485c:	3201      	adds	r2, #1
 800485e:	0692      	lsls	r2, r2, #26
 8004860:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004864:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004868:	2d00      	cmp	r5, #0
 800486a:	f000 8149 	beq.w	8004b00 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 800486e:	fab5 f585 	clz	r5, r5
 8004872:	3501      	adds	r5, #1
 8004874:	f005 051f 	and.w	r5, r5, #31
 8004878:	2601      	movs	r6, #1
 800487a:	fa06 f505 	lsl.w	r5, r6, r5
 800487e:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004880:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004884:	2800      	cmp	r0, #0
 8004886:	f000 8139 	beq.w	8004afc <HAL_ADC_ConfigChannel+0x4cc>
  return __builtin_clz(value);
 800488a:	fab0 f080 	clz	r0, r0
 800488e:	1c42      	adds	r2, r0, #1
 8004890:	f002 001f 	and.w	r0, r2, #31
 8004894:	f06f 061d 	mvn.w	r6, #29
 8004898:	2203      	movs	r2, #3
 800489a:	fb12 6200 	smlabb	r2, r2, r0, r6
 800489e:	0512      	lsls	r2, r2, #20
 80048a0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048a4:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80048a6:	0dd6      	lsrs	r6, r2, #23
  MODIFY_REG(*preg,
 80048a8:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80048aa:	f006 0604 	and.w	r6, r6, #4
 80048ae:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 80048b2:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80048b6:	fa00 f702 	lsl.w	r7, r0, r2
 80048ba:	f04f 0c07 	mov.w	ip, #7
 80048be:	5970      	ldr	r0, [r6, r5]
 80048c0:	fa0c f202 	lsl.w	r2, ip, r2
 80048c4:	ea20 0202 	bic.w	r2, r0, r2
 80048c8:	433a      	orrs	r2, r7
 80048ca:	5172      	str	r2, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80048cc:	680a      	ldr	r2, [r1, #0]
}
 80048ce:	e6ef      	b.n	80046b0 <HAL_ADC_ConfigChannel+0x80>
  __HAL_LOCK(hadc);
 80048d0:	2002      	movs	r0, #2
}
 80048d2:	b003      	add	sp, #12
 80048d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048d6:	0e80      	lsrs	r0, r0, #26
 80048d8:	3001      	adds	r0, #1
 80048da:	f000 061f 	and.w	r6, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048de:	2e09      	cmp	r6, #9
 80048e0:	d850      	bhi.n	8004984 <HAL_ADC_ConfigChannel+0x354>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048e2:	0685      	lsls	r5, r0, #26
 80048e4:	2201      	movs	r2, #1
 80048e6:	40b2      	lsls	r2, r6
 80048e8:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80048ec:	4315      	orrs	r5, r2
 80048ee:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80048f2:	0512      	lsls	r2, r2, #20
 80048f4:	e7d6      	b.n	80048a4 <HAL_ADC_ConfigChannel+0x274>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80048f6:	492c      	ldr	r1, [pc, #176]	; (80049a8 <HAL_ADC_ConfigChannel+0x378>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048f8:	4830      	ldr	r0, [pc, #192]	; (80049bc <HAL_ADC_ConfigChannel+0x38c>)
 80048fa:	688a      	ldr	r2, [r1, #8]
 80048fc:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004900:	4316      	orrs	r6, r2
 8004902:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 8004906:	608e      	str	r6, [r1, #8]
 8004908:	6802      	ldr	r2, [r0, #0]
 800490a:	492d      	ldr	r1, [pc, #180]	; (80049c0 <HAL_ADC_ConfigChannel+0x390>)
 800490c:	0992      	lsrs	r2, r2, #6
 800490e:	fba1 1202 	umull	r1, r2, r1, r2
 8004912:	0992      	lsrs	r2, r2, #6
 8004914:	3201      	adds	r2, #1
 8004916:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800491a:	0092      	lsls	r2, r2, #2
 800491c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800491e:	9a01      	ldr	r2, [sp, #4]
 8004920:	2a00      	cmp	r2, #0
 8004922:	f43f aef3 	beq.w	800470c <HAL_ADC_ConfigChannel+0xdc>
            wait_loop_index--;
 8004926:	9a01      	ldr	r2, [sp, #4]
 8004928:	3a01      	subs	r2, #1
 800492a:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800492c:	9a01      	ldr	r2, [sp, #4]
 800492e:	2a00      	cmp	r2, #0
 8004930:	d1f9      	bne.n	8004926 <HAL_ADC_ConfigChannel+0x2f6>
 8004932:	e6eb      	b.n	800470c <HAL_ADC_ConfigChannel+0xdc>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004934:	4d23      	ldr	r5, [pc, #140]	; (80049c4 <HAL_ADC_ConfigChannel+0x394>)
 8004936:	42aa      	cmp	r2, r5
 8004938:	f47f aee8 	bne.w	800470c <HAL_ADC_ConfigChannel+0xdc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800493c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8004940:	f47f aee4 	bne.w	800470c <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_VREFINT_INSTANCE(hadc))
 8004944:	4a1c      	ldr	r2, [pc, #112]	; (80049b8 <HAL_ADC_ConfigChannel+0x388>)
 8004946:	4294      	cmp	r4, r2
 8004948:	f43f aee0 	beq.w	800470c <HAL_ADC_ConfigChannel+0xdc>
 800494c:	688a      	ldr	r2, [r1, #8]
 800494e:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004952:	4332      	orrs	r2, r6
 8004954:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004958:	608a      	str	r2, [r1, #8]
}
 800495a:	e6cc      	b.n	80046f6 <HAL_ADC_ConfigChannel+0xc6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800495c:	0df5      	lsrs	r5, r6, #23
 800495e:	f104 0014 	add.w	r0, r4, #20
 8004962:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8004966:	f3c6 5604 	ubfx	r6, r6, #20, #5
 800496a:	582f      	ldr	r7, [r5, r0]
 800496c:	f04f 0c07 	mov.w	ip, #7
 8004970:	fa0c f606 	lsl.w	r6, ip, r6
 8004974:	ea27 0606 	bic.w	r6, r7, r6
 8004978:	502e      	str	r6, [r5, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800497a:	6960      	ldr	r0, [r4, #20]
 800497c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004980:	6160      	str	r0, [r4, #20]
}
 8004982:	e6e8      	b.n	8004756 <HAL_ADC_ConfigChannel+0x126>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004984:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8004988:	0685      	lsls	r5, r0, #26
 800498a:	3a1e      	subs	r2, #30
 800498c:	2001      	movs	r0, #1
 800498e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004992:	0512      	lsls	r2, r2, #20
 8004994:	fa00 f606 	lsl.w	r6, r0, r6
 8004998:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800499c:	4335      	orrs	r5, r6
 800499e:	e781      	b.n	80048a4 <HAL_ADC_ConfigChannel+0x274>
 80049a0:	407f0000 	.word	0x407f0000
 80049a4:	80080000 	.word	0x80080000
 80049a8:	50000300 	.word	0x50000300
 80049ac:	c3210000 	.word	0xc3210000
 80049b0:	90c00010 	.word	0x90c00010
 80049b4:	c7520000 	.word	0xc7520000
 80049b8:	50000100 	.word	0x50000100
 80049bc:	20000434 	.word	0x20000434
 80049c0:	053e2d63 	.word	0x053e2d63
 80049c4:	cb840000 	.word	0xcb840000
 80049c8:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049cc:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80049d0:	b11d      	cbz	r5, 80049da <HAL_ADC_ConfigChannel+0x3aa>
  return __builtin_clz(value);
 80049d2:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049d6:	42aa      	cmp	r2, r5
 80049d8:	d071      	beq.n	8004abe <HAL_ADC_ConfigChannel+0x48e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80049da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049dc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049de:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049e2:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80049e6:	f104 0764 	add.w	r7, r4, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ea:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80049ee:	b11d      	cbz	r5, 80049f8 <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 80049f0:	fab5 f585 	clz	r5, r5
 80049f4:	42ae      	cmp	r6, r5
 80049f6:	d050      	beq.n	8004a9a <HAL_ADC_ConfigChannel+0x46a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80049f8:	6895      	ldr	r5, [r2, #8]
 80049fa:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049fc:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a00:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a04:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004a08:	b11d      	cbz	r5, 8004a12 <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 8004a0a:	fab5 f585 	clz	r5, r5
 8004a0e:	42ae      	cmp	r6, r5
 8004a10:	d031      	beq.n	8004a76 <HAL_ADC_ConfigChannel+0x446>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a12:	68d5      	ldr	r5, [r2, #12]
 8004a14:	68d5      	ldr	r5, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a16:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a1a:	f3c5 6284 	ubfx	r2, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004a22:	2d00      	cmp	r5, #0
 8004a24:	f43f ae32 	beq.w	800468c <HAL_ADC_ConfigChannel+0x5c>
  return __builtin_clz(value);
 8004a28:	fab5 f585 	clz	r5, r5
 8004a2c:	e6f0      	b.n	8004810 <HAL_ADC_ConfigChannel+0x1e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2e:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8004a32:	2a00      	cmp	r2, #0
 8004a34:	d059      	beq.n	8004aea <HAL_ADC_ConfigChannel+0x4ba>
  return __builtin_clz(value);
 8004a36:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a3a:	3201      	adds	r2, #1
 8004a3c:	0692      	lsls	r2, r2, #26
 8004a3e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a42:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004a46:	2d00      	cmp	r5, #0
 8004a48:	d04d      	beq.n	8004ae6 <HAL_ADC_ConfigChannel+0x4b6>
  return __builtin_clz(value);
 8004a4a:	fab5 f585 	clz	r5, r5
 8004a4e:	3501      	adds	r5, #1
 8004a50:	f005 051f 	and.w	r5, r5, #31
 8004a54:	2601      	movs	r6, #1
 8004a56:	fa06 f505 	lsl.w	r5, r6, r5
 8004a5a:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004a60:	2800      	cmp	r0, #0
 8004a62:	d045      	beq.n	8004af0 <HAL_ADC_ConfigChannel+0x4c0>
  return __builtin_clz(value);
 8004a64:	fab0 f080 	clz	r0, r0
 8004a68:	3001      	adds	r0, #1
 8004a6a:	f000 001f 	and.w	r0, r0, #31
 8004a6e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004a72:	0502      	lsls	r2, r0, #20
 8004a74:	e716      	b.n	80048a4 <HAL_ADC_ConfigChannel+0x274>
  MODIFY_REG(*preg,
 8004a76:	6838      	ldr	r0, [r7, #0]
 8004a78:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004a7c:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a7e:	68d0      	ldr	r0, [r2, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a80:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a82:	f102 070c 	add.w	r7, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a86:	68d2      	ldr	r2, [r2, #12]
 8004a88:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a8c:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a90:	2d00      	cmp	r5, #0
 8004a92:	d1c4      	bne.n	8004a1e <HAL_ADC_ConfigChannel+0x3ee>
 8004a94:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004a98:	e6ba      	b.n	8004810 <HAL_ADC_ConfigChannel+0x1e0>
  MODIFY_REG(*preg,
 8004a9a:	6838      	ldr	r0, [r7, #0]
 8004a9c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004aa0:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004aa2:	6890      	ldr	r0, [r2, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004aa4:	6808      	ldr	r0, [r1, #0]
 8004aa6:	6896      	ldr	r6, [r2, #8]
 8004aa8:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004aac:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ab0:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ab4:	2d00      	cmp	r5, #0
 8004ab6:	d1a5      	bne.n	8004a04 <HAL_ADC_ConfigChannel+0x3d4>
 8004ab8:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004abc:	e69f      	b.n	80047fe <HAL_ADC_ConfigChannel+0x1ce>
  MODIFY_REG(*preg,
 8004abe:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004ac0:	4622      	mov	r2, r4
 8004ac2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004ac6:	f842 0f60 	str.w	r0, [r2, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004aca:	6e60      	ldr	r0, [r4, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004acc:	6808      	ldr	r0, [r1, #0]
 8004ace:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8004ad0:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ad4:	f104 0764 	add.w	r7, r4, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ad8:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004adc:	2d00      	cmp	r5, #0
 8004ade:	d184      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x3ba>
 8004ae0:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004ae4:	e682      	b.n	80047ec <HAL_ADC_ConfigChannel+0x1bc>
 8004ae6:	2502      	movs	r5, #2
 8004ae8:	e7b7      	b.n	8004a5a <HAL_ADC_ConfigChannel+0x42a>
 8004aea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004aee:	e7a8      	b.n	8004a42 <HAL_ADC_ConfigChannel+0x412>
 8004af0:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004af4:	e6d6      	b.n	80048a4 <HAL_ADC_ConfigChannel+0x274>
 8004af6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004afa:	e6b3      	b.n	8004864 <HAL_ADC_ConfigChannel+0x234>
 8004afc:	4a01      	ldr	r2, [pc, #4]	; (8004b04 <HAL_ADC_ConfigChannel+0x4d4>)
 8004afe:	e6d1      	b.n	80048a4 <HAL_ADC_ConfigChannel+0x274>
 8004b00:	2502      	movs	r5, #2
 8004b02:	e6bc      	b.n	800487e <HAL_ADC_ConfigChannel+0x24e>
 8004b04:	fe500000 	.word	0xfe500000

08004b08 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b0c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 8004b10:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8004b12:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004b14:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8004b16:	9201      	str	r2, [sp, #4]
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004b18:	6942      	ldr	r2, [r0, #20]
  __HAL_LOCK(hadc);
 8004b1a:	f000 8166 	beq.w	8004dea <HAL_ADCEx_InjectedConfigChannel+0x2e2>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004b24:	b1e2      	cbz	r2, 8004b60 <HAL_ADCEx_InjectedConfigChannel+0x58>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8004b26:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d019      	beq.n	8004b60 <HAL_ADCEx_InjectedConfigChannel+0x58>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004b2c:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8004b2e:	2c00      	cmp	r4, #0
 8004b30:	f040 8119 	bne.w	8004d66 <HAL_ADCEx_InjectedConfigChannel+0x25e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004b34:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004b36:	2a00      	cmp	r2, #0
 8004b38:	f000 8222 	beq.w	8004f80 <HAL_ADCEx_InjectedConfigChannel+0x478>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004b3c:	1e5d      	subs	r5, r3, #1
 8004b3e:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004b40:	f002 037c 	and.w	r3, r2, #124	; 0x7c
 8004b44:	432b      	orrs	r3, r5
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004b46:	4323      	orrs	r3, r4
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004b48:	e9d1 2400 	ldrd	r2, r4, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004b4c:	6685      	str	r5, [r0, #104]	; 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004b4e:	f004 051f 	and.w	r5, r4, #31
 8004b52:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8004b56:	40ac      	lsls	r4, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004b58:	431c      	orrs	r4, r3
 8004b5a:	6644      	str	r4, [r0, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004b5c:	6803      	ldr	r3, [r0, #0]
 8004b5e:	e005      	b.n	8004b6c <HAL_ADCEx_InjectedConfigChannel+0x64>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004b60:	684b      	ldr	r3, [r1, #4]
 8004b62:	2b09      	cmp	r3, #9
 8004b64:	f000 80eb 	beq.w	8004d3e <HAL_ADCEx_InjectedConfigChannel+0x236>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004b68:	680a      	ldr	r2, [r1, #0]
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004b6a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b6c:	689c      	ldr	r4, [r3, #8]
 8004b6e:	0727      	lsls	r7, r4, #28
 8004b70:	d410      	bmi.n	8004b94 <HAL_ADCEx_InjectedConfigChannel+0x8c>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004b72:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8004b76:	2c00      	cmp	r4, #0
 8004b78:	f040 80d8 	bne.w	8004d2c <HAL_ADCEx_InjectedConfigChannel+0x224>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004b7c:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 8004b80:	68dd      	ldr	r5, [r3, #12]
 8004b82:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 8004b86:	0524      	lsls	r4, r4, #20
 8004b88:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8004b8c:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8004b90:	432c      	orrs	r4, r5
 8004b92:	60dc      	str	r4, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b94:	689c      	ldr	r4, [r3, #8]
 8004b96:	f014 0404 	ands.w	r4, r4, #4
 8004b9a:	d058      	beq.n	8004c4e <HAL_ADCEx_InjectedConfigChannel+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b9c:	689c      	ldr	r4, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b9e:	2400      	movs	r4, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ba0:	689d      	ldr	r5, [r3, #8]
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ba2:	07ee      	lsls	r6, r5, #31
 8004ba4:	d40c      	bmi.n	8004bc0 <HAL_ADCEx_InjectedConfigChannel+0xb8>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004ba6:	4dac      	ldr	r5, [pc, #688]	; (8004e58 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8004ba8:	68ce      	ldr	r6, [r1, #12]
 8004baa:	42ae      	cmp	r6, r5
 8004bac:	f000 8100 	beq.w	8004db0 <HAL_ADCEx_InjectedConfigChannel+0x2a8>
    CLEAR_BIT(ADCx->DIFSEL,
 8004bb0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004bb4:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8004bb8:	ea21 0105 	bic.w	r1, r1, r5
 8004bbc:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004bc0:	49a6      	ldr	r1, [pc, #664]	; (8004e5c <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8004bc2:	420a      	tst	r2, r1
 8004bc4:	d019      	beq.n	8004bfa <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004bc6:	4ea6      	ldr	r6, [pc, #664]	; (8004e60 <HAL_ADCEx_InjectedConfigChannel+0x358>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004bc8:	4da6      	ldr	r5, [pc, #664]	; (8004e64 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 8004bca:	68b1      	ldr	r1, [r6, #8]
 8004bcc:	42aa      	cmp	r2, r5
 8004bce:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 8004bd2:	d019      	beq.n	8004c08 <HAL_ADCEx_InjectedConfigChannel+0x100>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004bd4:	4da4      	ldr	r5, [pc, #656]	; (8004e68 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 8004bd6:	42aa      	cmp	r2, r5
 8004bd8:	d016      	beq.n	8004c08 <HAL_ADCEx_InjectedConfigChannel+0x100>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004bda:	4da4      	ldr	r5, [pc, #656]	; (8004e6c <HAL_ADCEx_InjectedConfigChannel+0x364>)
 8004bdc:	42aa      	cmp	r2, r5
 8004bde:	f040 810d 	bne.w	8004dfc <HAL_ADCEx_InjectedConfigChannel+0x2f4>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004be2:	01cd      	lsls	r5, r1, #7
 8004be4:	d409      	bmi.n	8004bfa <HAL_ADCEx_InjectedConfigChannel+0xf2>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004be6:	4aa2      	ldr	r2, [pc, #648]	; (8004e70 <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d006      	beq.n	8004bfa <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004bec:	68b3      	ldr	r3, [r6, #8]
 8004bee:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004bf2:	431f      	orrs	r7, r3
 8004bf4:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 8004bf8:	60b7      	str	r7, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004c00:	4620      	mov	r0, r4
 8004c02:	b002      	add	sp, #8
 8004c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c08:	020a      	lsls	r2, r1, #8
 8004c0a:	d4f6      	bmi.n	8004bfa <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c10:	d1f3      	bne.n	8004bfa <HAL_ADCEx_InjectedConfigChannel+0xf2>
 8004c12:	4a93      	ldr	r2, [pc, #588]	; (8004e60 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 8004c14:	6893      	ldr	r3, [r2, #8]
 8004c16:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004c1a:	431f      	orrs	r7, r3
 8004c1c:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004c20:	4b94      	ldr	r3, [pc, #592]	; (8004e74 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 8004c22:	6097      	str	r7, [r2, #8]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a94      	ldr	r2, [pc, #592]	; (8004e78 <HAL_ADCEx_InjectedConfigChannel+0x370>)
 8004c28:	099b      	lsrs	r3, r3, #6
 8004c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2e:	099b      	lsrs	r3, r3, #6
 8004c30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	3318      	adds	r3, #24
 8004c38:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8004c3a:	9b01      	ldr	r3, [sp, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0dc      	beq.n	8004bfa <HAL_ADCEx_InjectedConfigChannel+0xf2>
          wait_loop_index--;
 8004c40:	9b01      	ldr	r3, [sp, #4]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8004c46:	9b01      	ldr	r3, [sp, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1f9      	bne.n	8004c40 <HAL_ADCEx_InjectedConfigChannel+0x138>
 8004c4c:	e7d5      	b.n	8004bfa <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c4e:	689d      	ldr	r5, [r3, #8]
 8004c50:	f015 0508 	ands.w	r5, r5, #8
 8004c54:	d1a4      	bne.n	8004ba0 <HAL_ADCEx_InjectedConfigChannel+0x98>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004c56:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8004c58:	2c00      	cmp	r4, #0
 8004c5a:	f040 809a 	bne.w	8004d92 <HAL_ADCEx_InjectedConfigChannel+0x28a>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004c5e:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8004c62:	2c01      	cmp	r4, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004c64:	68dc      	ldr	r4, [r3, #12]
 8004c66:	bf0c      	ite	eq
 8004c68:	f044 7400 	orreq.w	r4, r4, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004c6c:	f024 7400 	bicne.w	r4, r4, #33554432	; 0x2000000
 8004c70:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c72:	2400      	movs	r4, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8004c74:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 8004c78:	2e01      	cmp	r6, #1
      MODIFY_REG(hadc->Instance->CFGR2,
 8004c7a:	691e      	ldr	r6, [r3, #16]
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8004c7c:	f000 80e0 	beq.w	8004e40 <HAL_ADCEx_InjectedConfigChannel+0x338>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004c80:	f026 0602 	bic.w	r6, r6, #2
 8004c84:	611e      	str	r6, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004c86:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004c88:	0dd7      	lsrs	r7, r2, #23
 8004c8a:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8004c8e:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8004c92:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004c96:	f000 80c4 	beq.w	8004e22 <HAL_ADCEx_InjectedConfigChannel+0x31a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004c9a:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8004c9e:	f04f 0e07 	mov.w	lr, #7
 8004ca2:	4096      	lsls	r6, r2
 8004ca4:	fa0e fe02 	lsl.w	lr, lr, r2
 8004ca8:	f857 200c 	ldr.w	r2, [r7, ip]
 8004cac:	ea22 020e 	bic.w	r2, r2, lr
 8004cb0:	4316      	orrs	r6, r2
 8004cb2:	f847 600c 	str.w	r6, [r7, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004cb6:	695a      	ldr	r2, [r3, #20]
 8004cb8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004cbc:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004cbe:	690f      	ldr	r7, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004cc0:	68de      	ldr	r6, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004cc2:	2f04      	cmp	r7, #4
 8004cc4:	f000 80e0 	beq.w	8004e88 <HAL_ADCEx_InjectedConfigChannel+0x380>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004cc8:	f3c6 06c1 	ubfx	r6, r6, #3, #2
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ccc:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8004cd0:	ea4f 0e46 	mov.w	lr, r6, lsl #1
  MODIFY_REG(*preg,
 8004cd4:	680e      	ldr	r6, [r1, #0]
 8004cd6:	f852 8027 	ldr.w	r8, [r2, r7, lsl #2]
 8004cda:	f006 4cf8 	and.w	ip, r6, #2080374784	; 0x7c000000
 8004cde:	4e67      	ldr	r6, [pc, #412]	; (8004e7c <HAL_ADCEx_InjectedConfigChannel+0x374>)
 8004ce0:	ea08 0606 	and.w	r6, r8, r6
 8004ce4:	ea4c 0c06 	orr.w	ip, ip, r6
 8004ce8:	694e      	ldr	r6, [r1, #20]
 8004cea:	fa06 f60e 	lsl.w	r6, r6, lr
 8004cee:	ea46 060c 	orr.w	r6, r6, ip
 8004cf2:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8004cf6:	f842 6027 	str.w	r6, [r2, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004cfa:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 8004cfe:	698f      	ldr	r7, [r1, #24]
 8004d00:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 8004d04:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 8004d08:	433e      	orrs	r6, r7
 8004d0a:	f842 602c 	str.w	r6, [r2, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8004d0e:	7f0e      	ldrb	r6, [r1, #28]
 8004d10:	690f      	ldr	r7, [r1, #16]
 8004d12:	2e01      	cmp	r6, #1
  MODIFY_REG(*preg,
 8004d14:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 8004d18:	bf08      	it	eq
 8004d1a:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 8004d1e:	f026 7600 	bic.w	r6, r6, #33554432	; 0x2000000
 8004d22:	4335      	orrs	r5, r6
 8004d24:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8004d28:	680a      	ldr	r2, [r1, #0]
}
 8004d2a:	e739      	b.n	8004ba0 <HAL_ADCEx_InjectedConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->CFGR,
 8004d2c:	68dc      	ldr	r4, [r3, #12]
 8004d2e:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 8004d32:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8004d36:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 8004d3a:	60dc      	str	r4, [r3, #12]
 8004d3c:	e72a      	b.n	8004b94 <HAL_ADCEx_InjectedConfigChannel+0x8c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004d3e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004d40:	680a      	ldr	r2, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d056      	beq.n	8004df4 <HAL_ADCEx_InjectedConfigChannel+0x2ec>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004d46:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004d48:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004d4c:	0c55      	lsrs	r5, r2, #17
 8004d4e:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8004d52:	4323      	orrs	r3, r4
 8004d54:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8004d56:	6803      	ldr	r3, [r0, #0]
 8004d58:	4e49      	ldr	r6, [pc, #292]	; (8004e80 <HAL_ADCEx_InjectedConfigChannel+0x378>)
 8004d5a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8004d5c:	4034      	ands	r4, r6
 8004d5e:	432c      	orrs	r4, r5
 8004d60:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8004d62:	6645      	str	r5, [r0, #100]	; 0x64
 8004d64:	e702      	b.n	8004b6c <HAL_ADCEx_InjectedConfigChannel+0x64>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004d66:	680a      	ldr	r2, [r1, #0]
 8004d68:	684b      	ldr	r3, [r1, #4]
 8004d6a:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8004d6e:	f003 031f 	and.w	r3, r3, #31
 8004d72:	409d      	lsls	r5, r3
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004d74:	6e43      	ldr	r3, [r0, #100]	; 0x64
    hadc->InjectionConfig.ChannelCount--;
 8004d76:	3c01      	subs	r4, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004d78:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 8004d7a:	6684      	str	r4, [r0, #104]	; 0x68
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004d7c:	6803      	ldr	r3, [r0, #0]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004d7e:	6645      	str	r5, [r0, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004d80:	2c00      	cmp	r4, #0
 8004d82:	f47f aef3 	bne.w	8004b6c <HAL_ADCEx_InjectedConfigChannel+0x64>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004d86:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8004d88:	4e3d      	ldr	r6, [pc, #244]	; (8004e80 <HAL_ADCEx_InjectedConfigChannel+0x378>)
 8004d8a:	4034      	ands	r4, r6
 8004d8c:	4325      	orrs	r5, r4
 8004d8e:	64dd      	str	r5, [r3, #76]	; 0x4c
 8004d90:	e6ec      	b.n	8004b6c <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004d92:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8004d94:	2c00      	cmp	r4, #0
 8004d96:	f43f af62 	beq.w	8004c5e <HAL_ADCEx_InjectedConfigChannel+0x156>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004d9a:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8004d9e:	2c01      	cmp	r4, #1
 8004da0:	f000 8158 	beq.w	8005054 <HAL_ADCEx_InjectedConfigChannel+0x54c>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004da4:	68dc      	ldr	r4, [r3, #12]
 8004da6:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8004daa:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dac:	462c      	mov	r4, r5
 8004dae:	e761      	b.n	8004c74 <HAL_ADCEx_InjectedConfigChannel+0x16c>
    SET_BIT(ADCx->DIFSEL,
 8004db0:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8004db4:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8004db8:	4335      	orrs	r5, r6
 8004dba:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004dbe:	2e00      	cmp	r6, #0
 8004dc0:	f040 80a7 	bne.w	8004f12 <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8004dc4:	0e92      	lsrs	r2, r2, #26
 8004dc6:	1c55      	adds	r5, r2, #1
 8004dc8:	f005 0c1f 	and.w	ip, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dcc:	f1bc 0f09 	cmp.w	ip, #9
 8004dd0:	f200 80d9 	bhi.w	8004f86 <HAL_ADCEx_InjectedConfigChannel+0x47e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004dd4:	06ad      	lsls	r5, r5, #26
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	fa02 f20c 	lsl.w	r2, r2, ip
 8004ddc:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004de0:	4315      	orrs	r5, r2
 8004de2:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8004de6:	0512      	lsls	r2, r2, #20
 8004de8:	e0db      	b.n	8004fa2 <HAL_ADCEx_InjectedConfigChannel+0x49a>
  __HAL_LOCK(hadc);
 8004dea:	2402      	movs	r4, #2
}
 8004dec:	4620      	mov	r0, r4
 8004dee:	b002      	add	sp, #8
 8004df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004df4:	0c55      	lsrs	r5, r2, #17
 8004df6:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8004dfa:	e7ac      	b.n	8004d56 <HAL_ADCEx_InjectedConfigChannel+0x24e>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004dfc:	4d21      	ldr	r5, [pc, #132]	; (8004e84 <HAL_ADCEx_InjectedConfigChannel+0x37c>)
 8004dfe:	42aa      	cmp	r2, r5
 8004e00:	f47f aefb 	bne.w	8004bfa <HAL_ADCEx_InjectedConfigChannel+0xf2>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e04:	0249      	lsls	r1, r1, #9
 8004e06:	f53f aef8 	bmi.w	8004bfa <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_VREFINT_INSTANCE(hadc))
 8004e0a:	4a19      	ldr	r2, [pc, #100]	; (8004e70 <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	f43f aef4 	beq.w	8004bfa <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004e12:	68b3      	ldr	r3, [r6, #8]
 8004e14:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004e18:	431f      	orrs	r7, r3
 8004e1a:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 8004e1e:	60b7      	str	r7, [r6, #8]
}
 8004e20:	e6eb      	b.n	8004bfa <HAL_ADCEx_InjectedConfigChannel+0xf2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004e22:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8004e26:	f04f 0c07 	mov.w	ip, #7
 8004e2a:	fa0c fc02 	lsl.w	ip, ip, r2
 8004e2e:	59ba      	ldr	r2, [r7, r6]
 8004e30:	ea22 020c 	bic.w	r2, r2, ip
 8004e34:	51ba      	str	r2, [r7, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004e36:	695a      	ldr	r2, [r3, #20]
 8004e38:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004e3c:	615a      	str	r2, [r3, #20]
}
 8004e3e:	e73e      	b.n	8004cbe <HAL_ADCEx_InjectedConfigChannel+0x1b6>
      MODIFY_REG(hadc->Instance->CFGR2,
 8004e40:	f426 7cff 	bic.w	ip, r6, #510	; 0x1fe
 8004e44:	e9d1 670d 	ldrd	r6, r7, [r1, #52]	; 0x34
 8004e48:	433e      	orrs	r6, r7
 8004e4a:	ea46 060c 	orr.w	r6, r6, ip
 8004e4e:	f046 0602 	orr.w	r6, r6, #2
 8004e52:	611e      	str	r6, [r3, #16]
 8004e54:	e717      	b.n	8004c86 <HAL_ADCEx_InjectedConfigChannel+0x17e>
 8004e56:	bf00      	nop
 8004e58:	407f0000 	.word	0x407f0000
 8004e5c:	80080000 	.word	0x80080000
 8004e60:	50000300 	.word	0x50000300
 8004e64:	c3210000 	.word	0xc3210000
 8004e68:	90c00010 	.word	0x90c00010
 8004e6c:	c7520000 	.word	0xc7520000
 8004e70:	50000100 	.word	0x50000100
 8004e74:	20000434 	.word	0x20000434
 8004e78:	053e2d63 	.word	0x053e2d63
 8004e7c:	03fff000 	.word	0x03fff000
 8004e80:	04104000 	.word	0x04104000
 8004e84:	cb840000 	.word	0xcb840000
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004e8a:	680a      	ldr	r2, [r1, #0]
 8004e8c:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8004e8e:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e92:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004e96:	2e00      	cmp	r6, #0
 8004e98:	f000 809a 	beq.w	8004fd0 <HAL_ADCEx_InjectedConfigChannel+0x4c8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9c:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004ea0:	b126      	cbz	r6, 8004eac <HAL_ADCEx_InjectedConfigChannel+0x3a4>
  return __builtin_clz(value);
 8004ea2:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ea6:	42b5      	cmp	r5, r6
 8004ea8:	f000 80d9 	beq.w	800505e <HAL_ADCEx_InjectedConfigChannel+0x556>
 8004eac:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8004eae:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004eb0:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004eb4:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004eb8:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ebc:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004ec0:	b126      	cbz	r6, 8004ecc <HAL_ADCEx_InjectedConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004ec2:	fab6 f686 	clz	r6, r6
 8004ec6:	42b7      	cmp	r7, r6
 8004ec8:	f000 80de 	beq.w	8005088 <HAL_ADCEx_InjectedConfigChannel+0x580>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ecc:	68ae      	ldr	r6, [r5, #8]
 8004ece:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ed0:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ed4:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed8:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004edc:	b126      	cbz	r6, 8004ee8 <HAL_ADCEx_InjectedConfigChannel+0x3e0>
  return __builtin_clz(value);
 8004ede:	fab6 f686 	clz	r6, r6
 8004ee2:	42b7      	cmp	r7, r6
 8004ee4:	f000 80e5 	beq.w	80050b2 <HAL_ADCEx_InjectedConfigChannel+0x5aa>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ee8:	68ee      	ldr	r6, [r5, #12]
 8004eea:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004eec:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004eee:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef2:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004ef6:	2e00      	cmp	r6, #0
 8004ef8:	f43f ae52 	beq.w	8004ba0 <HAL_ADCEx_InjectedConfigChannel+0x98>
  return __builtin_clz(value);
 8004efc:	fab6 f686 	clz	r6, r6
 8004f00:	42be      	cmp	r6, r7
 8004f02:	f47f ae4d 	bne.w	8004ba0 <HAL_ADCEx_InjectedConfigChannel+0x98>
  MODIFY_REG(*preg,
 8004f06:	682a      	ldr	r2, [r5, #0]
 8004f08:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f0c:	602a      	str	r2, [r5, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8004f0e:	680a      	ldr	r2, [r1, #0]
}
 8004f10:	e646      	b.n	8004ba0 <HAL_ADCEx_InjectedConfigChannel+0x98>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f12:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004f16:	2d00      	cmp	r5, #0
 8004f18:	d076      	beq.n	8005008 <HAL_ADCEx_InjectedConfigChannel+0x500>
  return __builtin_clz(value);
 8004f1a:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f1e:	3501      	adds	r5, #1
 8004f20:	f005 051f 	and.w	r5, r5, #31
 8004f24:	2d09      	cmp	r5, #9
 8004f26:	d96f      	bls.n	8005008 <HAL_ADCEx_InjectedConfigChannel+0x500>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f28:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004f2c:	2d00      	cmp	r5, #0
 8004f2e:	f000 80e0 	beq.w	80050f2 <HAL_ADCEx_InjectedConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004f32:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004f36:	3501      	adds	r5, #1
 8004f38:	06ad      	lsls	r5, r5, #26
 8004f3a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3e:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004f42:	2e00      	cmp	r6, #0
 8004f44:	f000 80d3 	beq.w	80050ee <HAL_ADCEx_InjectedConfigChannel+0x5e6>
  return __builtin_clz(value);
 8004f48:	fab6 f686 	clz	r6, r6
 8004f4c:	3601      	adds	r6, #1
 8004f4e:	f006 061f 	and.w	r6, r6, #31
 8004f52:	2701      	movs	r7, #1
 8004f54:	fa07 f606 	lsl.w	r6, r7, r6
 8004f58:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004f5e:	2a00      	cmp	r2, #0
 8004f60:	f000 80c3 	beq.w	80050ea <HAL_ADCEx_InjectedConfigChannel+0x5e2>
  return __builtin_clz(value);
 8004f64:	fab2 f282 	clz	r2, r2
 8004f68:	3201      	adds	r2, #1
 8004f6a:	f002 061f 	and.w	r6, r2, #31
 8004f6e:	f06f 071d 	mvn.w	r7, #29
 8004f72:	2203      	movs	r2, #3
 8004f74:	fb12 7206 	smlabb	r2, r2, r6, r7
 8004f78:	0512      	lsls	r2, r2, #20
 8004f7a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004f7e:	e010      	b.n	8004fa2 <HAL_ADCEx_InjectedConfigChannel+0x49a>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8004f80:	3b01      	subs	r3, #1
 8004f82:	461d      	mov	r5, r3
 8004f84:	e5e0      	b.n	8004b48 <HAL_ADCEx_InjectedConfigChannel+0x40>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004f86:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8004f8a:	06ad      	lsls	r5, r5, #26
 8004f8c:	3a1e      	subs	r2, #30
 8004f8e:	2601      	movs	r6, #1
 8004f90:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004f94:	0512      	lsls	r2, r2, #20
 8004f96:	fa06 fc0c 	lsl.w	ip, r6, ip
 8004f9a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004f9e:	ea45 050c 	orr.w	r5, r5, ip
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fa2:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004fa4:	0dd7      	lsrs	r7, r2, #23
  MODIFY_REG(*preg,
 8004fa6:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004fa8:	f007 0704 	and.w	r7, r7, #4
 8004fac:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8004fb0:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004fb4:	fa05 fc02 	lsl.w	ip, r5, r2
 8004fb8:	f04f 0e07 	mov.w	lr, #7
 8004fbc:	59bd      	ldr	r5, [r7, r6]
 8004fbe:	fa0e f202 	lsl.w	r2, lr, r2
 8004fc2:	ea25 0202 	bic.w	r2, r5, r2
 8004fc6:	ea42 020c 	orr.w	r2, r2, ip
 8004fca:	51ba      	str	r2, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004fcc:	680a      	ldr	r2, [r1, #0]
}
 8004fce:	e5f7      	b.n	8004bc0 <HAL_ADCEx_InjectedConfigChannel+0xb8>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004fd0:	f3c2 6684 	ubfx	r6, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fd4:	42b5      	cmp	r5, r6
 8004fd6:	d042      	beq.n	800505e <HAL_ADCEx_InjectedConfigChannel+0x556>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004fd8:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8004fda:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fdc:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004fe0:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004fe4:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 8004fe8:	42b7      	cmp	r7, r6
 8004fea:	d04d      	beq.n	8005088 <HAL_ADCEx_InjectedConfigChannel+0x580>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004fec:	68af      	ldr	r7, [r5, #8]
 8004fee:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ff0:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ff4:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004ff8:	42b7      	cmp	r7, r6
 8004ffa:	d05a      	beq.n	80050b2 <HAL_ADCEx_InjectedConfigChannel+0x5aa>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ffc:	68ef      	ldr	r7, [r5, #12]
 8004ffe:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005000:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005002:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8005006:	e77b      	b.n	8004f00 <HAL_ADCEx_InjectedConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005008:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800500c:	2d00      	cmp	r5, #0
 800500e:	d066      	beq.n	80050de <HAL_ADCEx_InjectedConfigChannel+0x5d6>
  return __builtin_clz(value);
 8005010:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005014:	3501      	adds	r5, #1
 8005016:	06ad      	lsls	r5, r5, #26
 8005018:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501c:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8005020:	2e00      	cmp	r6, #0
 8005022:	d05a      	beq.n	80050da <HAL_ADCEx_InjectedConfigChannel+0x5d2>
  return __builtin_clz(value);
 8005024:	fab6 f686 	clz	r6, r6
 8005028:	3601      	adds	r6, #1
 800502a:	f006 061f 	and.w	r6, r6, #31
 800502e:	2701      	movs	r7, #1
 8005030:	fa07 f606 	lsl.w	r6, r7, r6
 8005034:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005036:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800503a:	2a00      	cmp	r2, #0
 800503c:	d052      	beq.n	80050e4 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
  return __builtin_clz(value);
 800503e:	fab2 fc82 	clz	ip, r2
 8005042:	f10c 0c01 	add.w	ip, ip, #1
 8005046:	f00c 0c1f 	and.w	ip, ip, #31
 800504a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800504e:	ea4f 520c 	mov.w	r2, ip, lsl #20
 8005052:	e7a6      	b.n	8004fa2 <HAL_ADCEx_InjectedConfigChannel+0x49a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005054:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 8005056:	f046 0620 	orr.w	r6, r6, #32
 800505a:	65c6      	str	r6, [r0, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 800505c:	e60a      	b.n	8004c74 <HAL_ADCEx_InjectedConfigChannel+0x16c>
  MODIFY_REG(*preg,
 800505e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005060:	461d      	mov	r5, r3
 8005062:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005066:	f845 2f60 	str.w	r2, [r5, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800506a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800506c:	680a      	ldr	r2, [r1, #0]
 800506e:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8005070:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005074:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005078:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800507c:	2e00      	cmp	r6, #0
 800507e:	f47f af1d 	bne.w	8004ebc <HAL_ADCEx_InjectedConfigChannel+0x3b4>
 8005082:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8005086:	e7af      	b.n	8004fe8 <HAL_ADCEx_InjectedConfigChannel+0x4e0>
  MODIFY_REG(*preg,
 8005088:	f8dc 2000 	ldr.w	r2, [ip]
 800508c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005090:	f8cc 2000 	str.w	r2, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005094:	68aa      	ldr	r2, [r5, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005096:	680a      	ldr	r2, [r1, #0]
 8005098:	68af      	ldr	r7, [r5, #8]
 800509a:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800509e:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050a2:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80050a6:	2e00      	cmp	r6, #0
 80050a8:	f47f af16 	bne.w	8004ed8 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
 80050ac:	f3c2 6684 	ubfx	r6, r2, #26, #5
 80050b0:	e7a2      	b.n	8004ff8 <HAL_ADCEx_InjectedConfigChannel+0x4f0>
  MODIFY_REG(*preg,
 80050b2:	f8dc 2000 	ldr.w	r2, [ip]
 80050b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80050ba:	f8cc 2000 	str.w	r2, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80050be:	68ea      	ldr	r2, [r5, #12]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80050c0:	680a      	ldr	r2, [r1, #0]
 80050c2:	68ef      	ldr	r7, [r5, #12]
 80050c4:	f3c2 0612 	ubfx	r6, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050c8:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80050ca:	f3c7 6784 	ubfx	r7, r7, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80050ce:	2e00      	cmp	r6, #0
 80050d0:	f47f af0f 	bne.w	8004ef2 <HAL_ADCEx_InjectedConfigChannel+0x3ea>
 80050d4:	f3c2 6684 	ubfx	r6, r2, #26, #5
 80050d8:	e712      	b.n	8004f00 <HAL_ADCEx_InjectedConfigChannel+0x3f8>
 80050da:	2602      	movs	r6, #2
 80050dc:	e7aa      	b.n	8005034 <HAL_ADCEx_InjectedConfigChannel+0x52c>
 80050de:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80050e2:	e79b      	b.n	800501c <HAL_ADCEx_InjectedConfigChannel+0x514>
 80050e4:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80050e8:	e75b      	b.n	8004fa2 <HAL_ADCEx_InjectedConfigChannel+0x49a>
 80050ea:	4a03      	ldr	r2, [pc, #12]	; (80050f8 <HAL_ADCEx_InjectedConfigChannel+0x5f0>)
 80050ec:	e759      	b.n	8004fa2 <HAL_ADCEx_InjectedConfigChannel+0x49a>
 80050ee:	2602      	movs	r6, #2
 80050f0:	e732      	b.n	8004f58 <HAL_ADCEx_InjectedConfigChannel+0x450>
 80050f2:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80050f6:	e722      	b.n	8004f3e <HAL_ADCEx_InjectedConfigChannel+0x436>
 80050f8:	fe500000 	.word	0xfe500000

080050fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80050fc:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050fe:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005102:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8005104:	2a01      	cmp	r2, #1
{
 8005106:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 8005108:	d04f      	beq.n	80051aa <HAL_ADCEx_MultiModeConfigChannel+0xae>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800510a:	6804      	ldr	r4, [r0, #0]
 800510c:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800510e:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005110:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005112:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005116:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8005118:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800511c:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800511e:	d008      	beq.n	8005132 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005120:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005122:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005126:	f041 0120 	orr.w	r1, r1, #32
 800512a:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800512c:	b01c      	add	sp, #112	; 0x70
 800512e:	bcf0      	pop	{r4, r5, r6, r7}
 8005130:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005132:	4a23      	ldr	r2, [pc, #140]	; (80051c0 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8005134:	6890      	ldr	r0, [r2, #8]
 8005136:	0740      	lsls	r0, r0, #29
 8005138:	d50b      	bpl.n	8005152 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800513a:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800513c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800513e:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8005142:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005144:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 800514c:	b01c      	add	sp, #112	; 0x70
 800514e:	bcf0      	pop	{r4, r5, r6, r7}
 8005150:	4770      	bx	lr
 8005152:	68a0      	ldr	r0, [r4, #8]
 8005154:	0746      	lsls	r6, r0, #29
 8005156:	d4f1      	bmi.n	800513c <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005158:	b1d5      	cbz	r5, 8005190 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800515a:	4e1a      	ldr	r6, [pc, #104]	; (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 800515c:	684f      	ldr	r7, [r1, #4]
 800515e:	68b0      	ldr	r0, [r6, #8]
 8005160:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8005164:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8005168:	4338      	orrs	r0, r7
 800516a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 800516e:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005170:	68a4      	ldr	r4, [r4, #8]
 8005172:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005174:	4320      	orrs	r0, r4
 8005176:	f010 0001 	ands.w	r0, r0, #1
 800517a:	d114      	bne.n	80051a6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
        MODIFY_REG(tmpADC_Common->CCR,
 800517c:	688a      	ldr	r2, [r1, #8]
 800517e:	4315      	orrs	r5, r2
 8005180:	68b2      	ldr	r2, [r6, #8]
 8005182:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8005186:	f022 020f 	bic.w	r2, r2, #15
 800518a:	4315      	orrs	r5, r2
 800518c:	60b5      	str	r5, [r6, #8]
 800518e:	e7da      	b.n	8005146 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005190:	4d0c      	ldr	r5, [pc, #48]	; (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8005192:	68a9      	ldr	r1, [r5, #8]
 8005194:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8005198:	60a9      	str	r1, [r5, #8]
 800519a:	68a1      	ldr	r1, [r4, #8]
 800519c:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800519e:	4308      	orrs	r0, r1
 80051a0:	f010 0001 	ands.w	r0, r0, #1
 80051a4:	d005      	beq.n	80051b2 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051a6:	2000      	movs	r0, #0
 80051a8:	e7cd      	b.n	8005146 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 80051aa:	2002      	movs	r0, #2
}
 80051ac:	b01c      	add	sp, #112	; 0x70
 80051ae:	bcf0      	pop	{r4, r5, r6, r7}
 80051b0:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80051b2:	68aa      	ldr	r2, [r5, #8]
 80051b4:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80051b8:	f022 020f 	bic.w	r2, r2, #15
 80051bc:	60aa      	str	r2, [r5, #8]
 80051be:	e7c2      	b.n	8005146 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80051c0:	50000100 	.word	0x50000100
 80051c4:	50000300 	.word	0x50000300

080051c8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80051c8:	b530      	push	{r4, r5, lr}
 80051ca:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80051cc:	2300      	movs	r3, #0
 80051ce:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80051d0:	2800      	cmp	r0, #0
 80051d2:	d057      	beq.n	8005284 <HAL_COMP_Init+0xbc>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80051d4:	6802      	ldr	r2, [r0, #0]
 80051d6:	6813      	ldr	r3, [r2, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	4604      	mov	r4, r0
 80051dc:	db52      	blt.n	8005284 <HAL_COMP_Init+0xbc>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80051de:	7f43      	ldrb	r3, [r0, #29]
 80051e0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d07b      	beq.n	80052e0 <HAL_COMP_Init+0x118>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 80051e8:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
               | hcomp->Init.BlankingSrce
 80051ec:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80051ee:	6815      	ldr	r5, [r2, #0]
               | hcomp->Init.InputPlus
 80051f0:	4303      	orrs	r3, r0
               | hcomp->Init.BlankingSrce
 80051f2:	430b      	orrs	r3, r1
               | hcomp->Init.Hysteresis
 80051f4:	68e1      	ldr	r1, [r4, #12]
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80051f6:	6810      	ldr	r0, [r2, #0]
               | hcomp->Init.Hysteresis
 80051f8:	430b      	orrs	r3, r1
    tmp_csr = (  hcomp->Init.InputMinus
 80051fa:	6921      	ldr	r1, [r4, #16]
 80051fc:	430b      	orrs	r3, r1
    MODIFY_REG(hcomp->Instance->CSR,
 80051fe:	4940      	ldr	r1, [pc, #256]	; (8005300 <HAL_COMP_Init+0x138>)
 8005200:	4001      	ands	r1, r0
 8005202:	430b      	orrs	r3, r1
 8005204:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005206:	6813      	ldr	r3, [r2, #0]
 8005208:	021b      	lsls	r3, r3, #8
 800520a:	d501      	bpl.n	8005210 <HAL_COMP_Init+0x48>
 800520c:	022d      	lsls	r5, r5, #8
 800520e:	d551      	bpl.n	80052b4 <HAL_COMP_Init+0xec>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005210:	4b3c      	ldr	r3, [pc, #240]	; (8005304 <HAL_COMP_Init+0x13c>)
 8005212:	429a      	cmp	r2, r3
 8005214:	d06a      	beq.n	80052ec <HAL_COMP_Init+0x124>
 8005216:	4b3c      	ldr	r3, [pc, #240]	; (8005308 <HAL_COMP_Init+0x140>)
 8005218:	429a      	cmp	r2, r3
 800521a:	d06c      	beq.n	80052f6 <HAL_COMP_Init+0x12e>
 800521c:	3304      	adds	r3, #4
 800521e:	429a      	cmp	r2, r3
 8005220:	bf0b      	itete	eq
 8005222:	f06f 5200 	mvneq.w	r2, #536870912	; 0x20000000
 8005226:	f06f 4280 	mvnne.w	r2, #1073741824	; 0x40000000
 800522a:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000
 800522e:	f04f 4180 	movne.w	r1, #1073741824	; 0x40000000

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005232:	69a3      	ldr	r3, [r4, #24]
 8005234:	0798      	lsls	r0, r3, #30
 8005236:	d028      	beq.n	800528a <HAL_COMP_Init+0xc2>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005238:	4d34      	ldr	r5, [pc, #208]	; (800530c <HAL_COMP_Init+0x144>)
 800523a:	68a8      	ldr	r0, [r5, #8]
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800523c:	f013 0f10 	tst.w	r3, #16
 8005240:	bf14      	ite	ne
 8005242:	4308      	orrne	r0, r1
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005244:	4010      	andeq	r0, r2
 8005246:	60a8      	str	r0, [r5, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005248:	4d30      	ldr	r5, [pc, #192]	; (800530c <HAL_COMP_Init+0x144>)
 800524a:	68e8      	ldr	r0, [r5, #12]
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800524c:	f013 0f20 	tst.w	r3, #32
 8005250:	bf14      	ite	ne
 8005252:	4308      	orrne	r0, r1
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005254:	4010      	andeq	r0, r2
 8005256:	60e8      	str	r0, [r5, #12]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005258:	482c      	ldr	r0, [pc, #176]	; (800530c <HAL_COMP_Init+0x144>)
 800525a:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800525c:	6845      	ldr	r5, [r0, #4]
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800525e:	f013 0f02 	tst.w	r3, #2
 8005262:	bf14      	ite	ne
 8005264:	430d      	orrne	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005266:	4015      	andeq	r5, r2
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005268:	07db      	lsls	r3, r3, #31
 800526a:	6045      	str	r5, [r0, #4]
 800526c:	d51d      	bpl.n	80052aa <HAL_COMP_Init+0xe2>
  SET_BIT(EXTI->IMR1, ExtiLine);
 800526e:	4b27      	ldr	r3, [pc, #156]	; (800530c <HAL_COMP_Init+0x144>)
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	4311      	orrs	r1, r2
 8005274:	6019      	str	r1, [r3, #0]
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005276:	7f63      	ldrb	r3, [r4, #29]
 8005278:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800527c:	b18b      	cbz	r3, 80052a2 <HAL_COMP_Init+0xda>
  HAL_StatusTypeDef status = HAL_OK;
 800527e:	2000      	movs	r0, #0
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 8005280:	b003      	add	sp, #12
 8005282:	bd30      	pop	{r4, r5, pc}
    status = HAL_ERROR;
 8005284:	2001      	movs	r0, #1
}
 8005286:	b003      	add	sp, #12
 8005288:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800528a:	4b20      	ldr	r3, [pc, #128]	; (800530c <HAL_COMP_Init+0x144>)
 800528c:	6859      	ldr	r1, [r3, #4]
 800528e:	4011      	ands	r1, r2
 8005290:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005292:	6819      	ldr	r1, [r3, #0]
 8005294:	400a      	ands	r2, r1
 8005296:	601a      	str	r2, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005298:	7f63      	ldrb	r3, [r4, #29]
 800529a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1ed      	bne.n	800527e <HAL_COMP_Init+0xb6>
      hcomp->State = HAL_COMP_STATE_READY;
 80052a2:	2301      	movs	r3, #1
 80052a4:	7763      	strb	r3, [r4, #29]
}
 80052a6:	b003      	add	sp, #12
 80052a8:	bd30      	pop	{r4, r5, pc}
 80052aa:	4918      	ldr	r1, [pc, #96]	; (800530c <HAL_COMP_Init+0x144>)
 80052ac:	680b      	ldr	r3, [r1, #0]
 80052ae:	401a      	ands	r2, r3
 80052b0:	600a      	str	r2, [r1, #0]
}
 80052b2:	e7f1      	b.n	8005298 <HAL_COMP_Init+0xd0>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052b4:	4b16      	ldr	r3, [pc, #88]	; (8005310 <HAL_COMP_Init+0x148>)
 80052b6:	4917      	ldr	r1, [pc, #92]	; (8005314 <HAL_COMP_Init+0x14c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	099b      	lsrs	r3, r3, #6
 80052bc:	fba1 1303 	umull	r1, r3, r1, r3
 80052c0:	099b      	lsrs	r3, r3, #6
 80052c2:	3301      	adds	r3, #1
 80052c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80052cc:	9b01      	ldr	r3, [sp, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d09e      	beq.n	8005210 <HAL_COMP_Init+0x48>
        wait_loop_index--;
 80052d2:	9b01      	ldr	r3, [sp, #4]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80052d8:	9b01      	ldr	r3, [sp, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f9      	bne.n	80052d2 <HAL_COMP_Init+0x10a>
 80052de:	e797      	b.n	8005210 <HAL_COMP_Init+0x48>
      hcomp->Lock = HAL_UNLOCKED;
 80052e0:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 80052e2:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 80052e4:	f7fe fbdc 	bl	8003aa0 <HAL_COMP_MspInit>
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80052e8:	6822      	ldr	r2, [r4, #0]
 80052ea:	e77d      	b.n	80051e8 <HAL_COMP_Init+0x20>
 80052ec:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80052f0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052f4:	e79d      	b.n	8005232 <HAL_COMP_Init+0x6a>
 80052f6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80052fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052fe:	e798      	b.n	8005232 <HAL_COMP_Init+0x6a>
 8005300:	ff007e0f 	.word	0xff007e0f
 8005304:	40010200 	.word	0x40010200
 8005308:	40010204 	.word	0x40010204
 800530c:	40010400 	.word	0x40010400
 8005310:	20000434 	.word	0x20000434
 8005314:	053e2d63 	.word	0x053e2d63

08005318 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005318:	b1b0      	cbz	r0, 8005348 <HAL_CORDIC_Init+0x30>
{
 800531a:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800531c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005320:	4604      	mov	r4, r0
 8005322:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005326:	b153      	cbz	r3, 800533e <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005328:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800532a:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800532c:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 800532e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 8005332:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 8005336:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800533a:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 800533c:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 800533e:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8005342:	f7fe fc21 	bl	8003b88 <HAL_CORDIC_MspInit>
 8005346:	e7ef      	b.n	8005328 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8005348:	2001      	movs	r0, #1
}
 800534a:	4770      	bx	lr

0800534c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800534c:	4907      	ldr	r1, [pc, #28]	; (800536c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800534e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005350:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005352:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005356:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800535a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800535c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800535e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005366:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	e000ed00 	.word	0xe000ed00

08005370 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005370:	4b1c      	ldr	r3, [pc, #112]	; (80053e4 <HAL_NVIC_SetPriority+0x74>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005378:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800537a:	f1c3 0e07 	rsb	lr, r3, #7
 800537e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005382:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005386:	bf28      	it	cs
 8005388:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800538c:	f1bc 0f06 	cmp.w	ip, #6
 8005390:	d91b      	bls.n	80053ca <HAL_NVIC_SetPriority+0x5a>
 8005392:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005394:	f04f 3cff 	mov.w	ip, #4294967295
 8005398:	fa0c fc03 	lsl.w	ip, ip, r3
 800539c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053a0:	f04f 3cff 	mov.w	ip, #4294967295
 80053a4:	fa0c fc0e 	lsl.w	ip, ip, lr
 80053a8:	ea21 010c 	bic.w	r1, r1, ip
 80053ac:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80053ae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053b0:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80053b4:	db0c      	blt.n	80053d0 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053b6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80053ba:	0109      	lsls	r1, r1, #4
 80053bc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80053c0:	b2c9      	uxtb	r1, r1
 80053c2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80053c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80053ca:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053cc:	4613      	mov	r3, r2
 80053ce:	e7e7      	b.n	80053a0 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053d0:	4b05      	ldr	r3, [pc, #20]	; (80053e8 <HAL_NVIC_SetPriority+0x78>)
 80053d2:	f000 000f 	and.w	r0, r0, #15
 80053d6:	0109      	lsls	r1, r1, #4
 80053d8:	4403      	add	r3, r0
 80053da:	b2c9      	uxtb	r1, r1
 80053dc:	7619      	strb	r1, [r3, #24]
 80053de:	f85d fb04 	ldr.w	pc, [sp], #4
 80053e2:	bf00      	nop
 80053e4:	e000ed00 	.word	0xe000ed00
 80053e8:	e000ecfc 	.word	0xe000ecfc

080053ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80053ec:	2800      	cmp	r0, #0
 80053ee:	db08      	blt.n	8005402 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053f0:	4a04      	ldr	r2, [pc, #16]	; (8005404 <HAL_NVIC_EnableIRQ+0x18>)
 80053f2:	0941      	lsrs	r1, r0, #5
 80053f4:	2301      	movs	r3, #1
 80053f6:	f000 001f 	and.w	r0, r0, #31
 80053fa:	fa03 f000 	lsl.w	r0, r3, r0
 80053fe:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005402:	4770      	bx	lr
 8005404:	e000e100 	.word	0xe000e100

08005408 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005408:	3801      	subs	r0, #1
 800540a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800540e:	d210      	bcs.n	8005432 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005410:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005412:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005416:	4c08      	ldr	r4, [pc, #32]	; (8005438 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005418:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800541a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800541e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005422:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005424:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005426:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005428:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800542a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800542e:	6119      	str	r1, [r3, #16]
 8005430:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005432:	2001      	movs	r0, #1
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	e000ed00 	.word	0xe000ed00

0800543c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop

08005440 <HAL_SYSTICK_IRQHandler>:
{
 8005440:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8005442:	f7ff fffb 	bl	800543c <HAL_SYSTICK_Callback>
}
 8005446:	bd08      	pop	{r3, pc}

08005448 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8005448:	b188      	cbz	r0, 800546e <HAL_DAC_Init+0x26>
{
 800544a:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800544c:	7903      	ldrb	r3, [r0, #4]
 800544e:	4604      	mov	r4, r0
 8005450:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005454:	b13b      	cbz	r3, 8005466 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005456:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8005458:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800545a:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 800545c:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800545e:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8005460:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8005462:	4618      	mov	r0, r3
}
 8005464:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8005466:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8005468:	f7fe fba6 	bl	8003bb8 <HAL_DAC_MspInit>
 800546c:	e7f3      	b.n	8005456 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 800546e:	2001      	movs	r0, #1
}
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop

08005474 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005478:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800547a:	688f      	ldr	r7, [r1, #8]
  __HAL_LOCK(hdac);
 800547c:	2b01      	cmp	r3, #1
 800547e:	f000 80c6 	beq.w	800560e <HAL_DAC_ConfigChannel+0x19a>
 8005482:	2301      	movs	r3, #1
 8005484:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005486:	2f04      	cmp	r7, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 8005488:	f04f 0302 	mov.w	r3, #2
 800548c:	4606      	mov	r6, r0
 800548e:	460d      	mov	r5, r1
 8005490:	4614      	mov	r4, r2
 8005492:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005494:	d077      	beq.n	8005586 <HAL_DAC_ConfigChannel+0x112>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005496:	6803      	ldr	r3, [r0, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005498:	f002 0410 	and.w	r4, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800549c:	69ea      	ldr	r2, [r5, #28]
 800549e:	2a01      	cmp	r2, #1
 80054a0:	d108      	bne.n	80054b4 <HAL_DAC_ConfigChannel+0x40>
    tmpreg1 = hdac->Instance->CCR;
 80054a2:	6b99      	ldr	r1, [r3, #56]	; 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80054a4:	6a2a      	ldr	r2, [r5, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80054a6:	201f      	movs	r0, #31
 80054a8:	40a0      	lsls	r0, r4
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80054aa:	40a2      	lsls	r2, r4
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80054ac:	ea21 0100 	bic.w	r1, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80054b0:	430a      	orrs	r2, r1
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80054b2:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80054b4:	69a9      	ldr	r1, [r5, #24]
  tmpreg1 = hdac->Instance->MCR;
 80054b6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80054b8:	2207      	movs	r2, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80054ba:	2901      	cmp	r1, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80054bc:	fa02 fc04 	lsl.w	ip, r2, r4
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80054c0:	696a      	ldr	r2, [r5, #20]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80054c2:	d05e      	beq.n	8005582 <HAL_DAC_ConfigChannel+0x10e>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80054c4:	2902      	cmp	r1, #2
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80054c6:	bf16      	itet	ne
 80054c8:	fab2 f182 	clzne	r1, r2
    connectOnChip = DAC_MCR_MODE1_0;
 80054cc:	2101      	moveq	r1, #1
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80054ce:	0949      	lsrne	r1, r1, #5
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80054d0:	4311      	orrs	r1, r2
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80054d2:	792a      	ldrb	r2, [r5, #4]
 80054d4:	2a01      	cmp	r2, #1
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80054d6:	f44f 7200 	mov.w	r2, #512	; 0x200
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80054da:	f44f 7880 	mov.w	r8, #256	; 0x100
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80054de:	fa02 f204 	lsl.w	r2, r2, r4
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80054e2:	fa08 f804 	lsl.w	r8, r8, r4
 80054e6:	ea42 020c 	orr.w	r2, r2, ip
 80054ea:	ea20 0202 	bic.w	r2, r0, r2
 80054ee:	ea6f 0808 	mvn.w	r8, r8
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80054f2:	ea08 0802 	and.w	r8, r8, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80054f6:	796a      	ldrb	r2, [r5, #5]
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80054f8:	ea47 0701 	orr.w	r7, r7, r1
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80054fc:	bf08      	it	eq
 80054fe:	f447 7780 	orreq.w	r7, r7, #256	; 0x100
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005502:	2a01      	cmp	r2, #1
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005504:	682a      	ldr	r2, [r5, #0]
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005506:	bf08      	it	eq
 8005508:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800550c:	2a02      	cmp	r2, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800550e:	f428 4840 	bic.w	r8, r8, #49152	; 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005512:	d073      	beq.n	80055fc <HAL_DAC_ConfigChannel+0x188>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005514:	ea48 0802 	orr.w	r8, r8, r2
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005518:	40a7      	lsls	r7, r4
 800551a:	ea47 0708 	orr.w	r7, r7, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800551e:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005526:	40a1      	lsls	r1, r4
 8005528:	ea22 0201 	bic.w	r2, r2, r1
 800552c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800552e:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
  tmpreg1 = hdac->Instance->CR;
 8005532:	6818      	ldr	r0, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005534:	f640 75fe 	movw	r5, #4094	; 0xffe
 8005538:	40a5      	lsls	r5, r4
 800553a:	ea20 0505 	bic.w	r5, r0, r5
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800553e:	0192      	lsls	r2, r2, #6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005540:	fa01 f004 	lsl.w	r0, r1, r4
 8005544:	4328      	orrs	r0, r5
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005546:	f3c1 0183 	ubfx	r1, r1, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800554a:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
  hdac->Instance->CR = tmpreg1;
 800554e:	6018      	str	r0, [r3, #0]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005550:	430a      	orrs	r2, r1
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005552:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005556:	fa01 f004 	lsl.w	r0, r1, r4
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800555a:	25c0      	movs	r5, #192	; 0xc0
 800555c:	6819      	ldr	r1, [r3, #0]
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800555e:	40a2      	lsls	r2, r4
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005560:	fa05 f404 	lsl.w	r4, r5, r4
 8005564:	ea21 0404 	bic.w	r4, r1, r4
 8005568:	601c      	str	r4, [r3, #0]
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800556a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800556c:	ea21 0100 	bic.w	r1, r1, r0
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005570:	2400      	movs	r4, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005572:	430a      	orrs	r2, r1
  hdac->State = HAL_DAC_STATE_READY;
 8005574:	2101      	movs	r1, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005576:	661a      	str	r2, [r3, #96]	; 0x60

  /* Return function status */
  return HAL_OK;
 8005578:	4620      	mov	r0, r4
  hdac->State = HAL_DAC_STATE_READY;
 800557a:	7131      	strb	r1, [r6, #4]
  __HAL_UNLOCK(hdac);
 800557c:	7174      	strb	r4, [r6, #5]
}
 800557e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 8005582:	2100      	movs	r1, #0
 8005584:	e7a4      	b.n	80054d0 <HAL_DAC_ConfigChannel+0x5c>
    tickstart = HAL_GetTick();
 8005586:	f7fe ff37 	bl	80043f8 <HAL_GetTick>
 800558a:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 800558c:	b12c      	cbz	r4, 800559a <HAL_DAC_ConfigChannel+0x126>
 800558e:	e014      	b.n	80055ba <HAL_DAC_ConfigChannel+0x146>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005590:	f7fe ff32 	bl	80043f8 <HAL_GetTick>
 8005594:	1bc3      	subs	r3, r0, r7
 8005596:	2b01      	cmp	r3, #1
 8005598:	d83c      	bhi.n	8005614 <HAL_DAC_ConfigChannel+0x1a0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800559a:	6833      	ldr	r3, [r6, #0]
 800559c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559e:	041b      	lsls	r3, r3, #16
 80055a0:	d4f6      	bmi.n	8005590 <HAL_DAC_ConfigChannel+0x11c>
      HAL_Delay(1);
 80055a2:	2001      	movs	r0, #1
 80055a4:	f7fe ff2e 	bl	8004404 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80055a8:	6833      	ldr	r3, [r6, #0]
 80055aa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80055ac:	641a      	str	r2, [r3, #64]	; 0x40
 80055ae:	e00e      	b.n	80055ce <HAL_DAC_ConfigChannel+0x15a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80055b0:	f7fe ff22 	bl	80043f8 <HAL_GetTick>
 80055b4:	1bc3      	subs	r3, r0, r7
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d82c      	bhi.n	8005614 <HAL_DAC_ConfigChannel+0x1a0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80055ba:	6833      	ldr	r3, [r6, #0]
 80055bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055be:	2b00      	cmp	r3, #0
 80055c0:	dbf6      	blt.n	80055b0 <HAL_DAC_ConfigChannel+0x13c>
      HAL_Delay(1U);
 80055c2:	2001      	movs	r0, #1
 80055c4:	f7fe ff1e 	bl	8004404 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80055c8:	6833      	ldr	r3, [r6, #0]
 80055ca:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80055cc:	645a      	str	r2, [r3, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80055ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055d0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80055d2:	68af      	ldr	r7, [r5, #8]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80055d4:	f004 0410 	and.w	r4, r4, #16
 80055d8:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80055dc:	40a0      	lsls	r0, r4
 80055de:	40a1      	lsls	r1, r4
 80055e0:	ea22 0200 	bic.w	r2, r2, r0
 80055e4:	430a      	orrs	r2, r1
 80055e6:	649a      	str	r2, [r3, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80055e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055ea:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80055ec:	20ff      	movs	r0, #255	; 0xff
 80055ee:	40a0      	lsls	r0, r4
 80055f0:	40a1      	lsls	r1, r4
 80055f2:	ea22 0200 	bic.w	r2, r2, r0
 80055f6:	430a      	orrs	r2, r1
 80055f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80055fa:	e74f      	b.n	800549c <HAL_DAC_ConfigChannel+0x28>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80055fc:	f001 f8aa 	bl	8006754 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005600:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <HAL_DAC_ConfigChannel+0x1c0>)
 8005602:	4298      	cmp	r0, r3
 8005604:	d90e      	bls.n	8005624 <HAL_DAC_ConfigChannel+0x1b0>
  hdac->Instance->MCR = tmpreg1;
 8005606:	6833      	ldr	r3, [r6, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005608:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 800560c:	e784      	b.n	8005518 <HAL_DAC_ConfigChannel+0xa4>
  __HAL_LOCK(hdac);
 800560e:	2002      	movs	r0, #2
}
 8005610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005614:	6933      	ldr	r3, [r6, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005616:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005618:	f043 0308 	orr.w	r3, r3, #8
 800561c:	6133      	str	r3, [r6, #16]
          return HAL_TIMEOUT;
 800561e:	4610      	mov	r0, r2
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005620:	7132      	strb	r2, [r6, #4]
          return HAL_TIMEOUT;
 8005622:	e7ac      	b.n	800557e <HAL_DAC_ConfigChannel+0x10a>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005624:	4b04      	ldr	r3, [pc, #16]	; (8005638 <HAL_DAC_ConfigChannel+0x1c4>)
 8005626:	4298      	cmp	r0, r3
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005628:	bf88      	it	hi
 800562a:	f448 4880 	orrhi.w	r8, r8, #16384	; 0x4000
  hdac->Instance->MCR = tmpreg1;
 800562e:	6833      	ldr	r3, [r6, #0]
 8005630:	e772      	b.n	8005518 <HAL_DAC_ConfigChannel+0xa4>
 8005632:	bf00      	nop
 8005634:	09896800 	.word	0x09896800
 8005638:	04c4b400 	.word	0x04c4b400

0800563c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800563c:	2800      	cmp	r0, #0
 800563e:	d078      	beq.n	8005732 <HAL_DMA_Init+0xf6>
{
 8005640:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005642:	4b3d      	ldr	r3, [pc, #244]	; (8005738 <HAL_DMA_Init+0xfc>)
 8005644:	6804      	ldr	r4, [r0, #0]
 8005646:	429c      	cmp	r4, r3
 8005648:	d95f      	bls.n	800570a <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800564a:	4a3c      	ldr	r2, [pc, #240]	; (800573c <HAL_DMA_Init+0x100>)
 800564c:	4b3c      	ldr	r3, [pc, #240]	; (8005740 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 800564e:	493d      	ldr	r1, [pc, #244]	; (8005744 <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005650:	4422      	add	r2, r4
 8005652:	fba3 3202 	umull	r3, r2, r3, r2
 8005656:	0912      	lsrs	r2, r2, #4
 8005658:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800565a:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800565c:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 800565e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8005662:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005664:	69c6      	ldr	r6, [r0, #28]
 8005666:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800566a:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 800566c:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800566e:	430b      	orrs	r3, r1
 8005670:	6941      	ldr	r1, [r0, #20]
 8005672:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005674:	6981      	ldr	r1, [r0, #24]
 8005676:	430b      	orrs	r3, r1
 8005678:	4333      	orrs	r3, r6
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800567a:	fa5f fc84 	uxtb.w	ip, r4
 800567e:	4e30      	ldr	r6, [pc, #192]	; (8005740 <HAL_DMA_Init+0x104>)
  tmp = hdma->Instance->CCR;
 8005680:	6821      	ldr	r1, [r4, #0]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005682:	f1ac 0c08 	sub.w	ip, ip, #8
 8005686:	fba6 6c0c 	umull	r6, ip, r6, ip
          hdma->Init.Mode                | hdma->Init.Priority;
 800568a:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800568c:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8005690:	f021 0170 	bic.w	r1, r1, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8005694:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 8005696:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 8005698:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800569a:	4e2b      	ldr	r6, [pc, #172]	; (8005748 <HAL_DMA_Init+0x10c>)
 800569c:	4b26      	ldr	r3, [pc, #152]	; (8005738 <HAL_DMA_Init+0xfc>)
 800569e:	492b      	ldr	r1, [pc, #172]	; (800574c <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80056a0:	f3cc 1c04 	ubfx	ip, ip, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80056a4:	429c      	cmp	r4, r3
 80056a6:	bf98      	it	ls
 80056a8:	4631      	movls	r1, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80056aa:	f04f 0e01 	mov.w	lr, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80056ae:	4c28      	ldr	r4, [pc, #160]	; (8005750 <HAL_DMA_Init+0x114>)
 80056b0:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80056b2:	fa0e f30c 	lsl.w	r3, lr, ip
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80056b6:	1854      	adds	r4, r2, r1
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80056b8:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80056bc:	6503      	str	r3, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80056be:	6484      	str	r4, [r0, #72]	; 0x48
 80056c0:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80056c4:	d02a      	beq.n	800571c <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80056c6:	6845      	ldr	r5, [r0, #4]
 80056c8:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80056ca:	3d01      	subs	r5, #1
 80056cc:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80056ce:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056d2:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80056d6:	d827      	bhi.n	8005728 <HAL_DMA_Init+0xec>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80056d8:	4b1e      	ldr	r3, [pc, #120]	; (8005754 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80056da:	491f      	ldr	r1, [pc, #124]	; (8005758 <HAL_DMA_Init+0x11c>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80056dc:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80056de:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80056e0:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80056e2:	f004 041f 	and.w	r4, r4, #31
 80056e6:	fa0e f404 	lsl.w	r4, lr, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80056ea:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80056ec:	e9c0 3115 	strd	r3, r1, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80056f0:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80056f2:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056f4:	4b19      	ldr	r3, [pc, #100]	; (800575c <HAL_DMA_Init+0x120>)
 80056f6:	645c      	str	r4, [r3, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056f8:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80056fa:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056fc:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80056fe:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8005702:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  return HAL_OK;
 8005706:	4618      	mov	r0, r3
}
 8005708:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800570a:	4a15      	ldr	r2, [pc, #84]	; (8005760 <HAL_DMA_Init+0x124>)
 800570c:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 800570e:	4915      	ldr	r1, [pc, #84]	; (8005764 <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005710:	4422      	add	r2, r4
 8005712:	fba3 3202 	umull	r3, r2, r3, r2
 8005716:	0912      	lsrs	r2, r2, #4
 8005718:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 800571a:	e79e      	b.n	800565a <HAL_DMA_Init+0x1e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800571c:	2400      	movs	r4, #0
 800571e:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005720:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005724:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 8005728:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 800572a:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800572e:	65c3      	str	r3, [r0, #92]	; 0x5c
 8005730:	e7e2      	b.n	80056f8 <HAL_DMA_Init+0xbc>
    return HAL_ERROR;
 8005732:	2001      	movs	r0, #1
}
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	40020407 	.word	0x40020407
 800573c:	bffdfbf8 	.word	0xbffdfbf8
 8005740:	cccccccd 	.word	0xcccccccd
 8005744:	40020400 	.word	0x40020400
 8005748:	40020800 	.word	0x40020800
 800574c:	40020820 	.word	0x40020820
 8005750:	40020880 	.word	0x40020880
 8005754:	1000823f 	.word	0x1000823f
 8005758:	40020940 	.word	0x40020940
 800575c:	40020900 	.word	0x40020900
 8005760:	bffdfff8 	.word	0xbffdfff8
 8005764:	40020000 	.word	0x40020000

08005768 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005768:	2800      	cmp	r0, #0
 800576a:	f000 80d9 	beq.w	8005920 <HAL_FDCAN_Init+0x1b8>
{
 800576e:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005770:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005774:	4604      	mov	r4, r0
 8005776:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800577a:	2b00      	cmp	r3, #0
 800577c:	d071      	beq.n	8005862 <HAL_FDCAN_Init+0xfa>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800577e:	6822      	ldr	r2, [r4, #0]
 8005780:	6993      	ldr	r3, [r2, #24]
 8005782:	f023 0310 	bic.w	r3, r3, #16
 8005786:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005788:	f7fe fe36 	bl	80043f8 <HAL_GetTick>
 800578c:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800578e:	e004      	b.n	800579a <HAL_FDCAN_Init+0x32>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005790:	f7fe fe32 	bl	80043f8 <HAL_GetTick>
 8005794:	1b43      	subs	r3, r0, r5
 8005796:	2b0a      	cmp	r3, #10
 8005798:	d85a      	bhi.n	8005850 <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	699a      	ldr	r2, [r3, #24]
 800579e:	0711      	lsls	r1, r2, #28
 80057a0:	d4f6      	bmi.n	8005790 <HAL_FDCAN_Init+0x28>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80057a2:	699a      	ldr	r2, [r3, #24]
 80057a4:	f042 0201 	orr.w	r2, r2, #1
 80057a8:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057aa:	f7fe fe25 	bl	80043f8 <HAL_GetTick>
 80057ae:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80057b0:	e004      	b.n	80057bc <HAL_FDCAN_Init+0x54>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80057b2:	f7fe fe21 	bl	80043f8 <HAL_GetTick>
 80057b6:	1b40      	subs	r0, r0, r5
 80057b8:	280a      	cmp	r0, #10
 80057ba:	d849      	bhi.n	8005850 <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	699a      	ldr	r2, [r3, #24]
 80057c0:	07d2      	lsls	r2, r2, #31
 80057c2:	d5f6      	bpl.n	80057b2 <HAL_FDCAN_Init+0x4a>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80057c4:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80057c6:	4959      	ldr	r1, [pc, #356]	; (800592c <HAL_FDCAN_Init+0x1c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80057c8:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 80057cc:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80057ce:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 80057d0:	f000 80a1 	beq.w	8005916 <HAL_FDCAN_Init+0x1ae>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80057d4:	7c22      	ldrb	r2, [r4, #16]
 80057d6:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80057d8:	699a      	ldr	r2, [r3, #24]
 80057da:	bf0c      	ite	eq
 80057dc:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80057e0:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 80057e4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80057e6:	7c62      	ldrb	r2, [r4, #17]
 80057e8:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80057ea:	699a      	ldr	r2, [r3, #24]
 80057ec:	bf0c      	ite	eq
 80057ee:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80057f2:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 80057f6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80057f8:	7ca2      	ldrb	r2, [r4, #18]
 80057fa:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	bf0c      	ite	eq
 8005800:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005804:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8005808:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800580a:	699a      	ldr	r2, [r3, #24]
 800580c:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800580e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005810:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005814:	4302      	orrs	r2, r0
 8005816:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005818:	699a      	ldr	r2, [r3, #24]
 800581a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800581e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005820:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005822:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005824:	f022 0210 	bic.w	r2, r2, #16
 8005828:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800582a:	d01f      	beq.n	800586c <HAL_FDCAN_Init+0x104>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800582c:	b311      	cbz	r1, 8005874 <HAL_FDCAN_Init+0x10c>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800582e:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005830:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005832:	d077      	beq.n	8005924 <HAL_FDCAN_Init+0x1bc>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005834:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005838:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800583a:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800583c:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800583e:	f042 0210 	orr.w	r2, r2, #16
 8005842:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005844:	d116      	bne.n	8005874 <HAL_FDCAN_Init+0x10c>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005846:	699a      	ldr	r2, [r3, #24]
 8005848:	f042 0220 	orr.w	r2, r2, #32
 800584c:	619a      	str	r2, [r3, #24]
 800584e:	e011      	b.n	8005874 <HAL_FDCAN_Init+0x10c>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005850:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005852:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005854:	f043 0301 	orr.w	r3, r3, #1
 8005858:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800585a:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 800585e:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8005860:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8005862:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8005866:	f7fe f9bf 	bl	8003be8 <HAL_FDCAN_MspInit>
 800586a:	e788      	b.n	800577e <HAL_FDCAN_Init+0x16>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	f042 0204 	orr.w	r2, r2, #4
 8005872:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005874:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005878:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800587a:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800587c:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800587e:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005882:	6a21      	ldr	r1, [r4, #32]
 8005884:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005886:	430a      	orrs	r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005888:	6961      	ldr	r1, [r4, #20]
 800588a:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800588c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005890:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005894:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005896:	d10e      	bne.n	80058b6 <HAL_FDCAN_Init+0x14e>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005898:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	; 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800589c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800589e:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80058a0:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80058a2:	0112      	lsls	r2, r2, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80058a4:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80058a6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80058aa:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80058ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80058ae:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80058b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80058b4:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80058b6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80058ba:	6be0      	ldr	r0, [r4, #60]	; 0x3c

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80058bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80058be:	4302      	orrs	r2, r0
 80058c0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80058c4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80058c8:	4819      	ldr	r0, [pc, #100]	; (8005930 <HAL_FDCAN_Init+0x1c8>)
 80058ca:	6420      	str	r0, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80058cc:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80058d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80058d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80058d8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80058dc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80058de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058e2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80058e6:	4913      	ldr	r1, [pc, #76]	; (8005934 <HAL_FDCAN_Init+0x1cc>)
 80058e8:	6461      	str	r1, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80058ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80058ee:	4b12      	ldr	r3, [pc, #72]	; (8005938 <HAL_FDCAN_Init+0x1d0>)

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80058f0:	4a12      	ldr	r2, [pc, #72]	; (800593c <HAL_FDCAN_Init+0x1d4>)
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80058f2:	3140      	adds	r1, #64	; 0x40
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80058f4:	e9c4 1312 	strd	r1, r3, [r4, #72]	; 0x48

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80058f8:	33f0      	adds	r3, #240	; 0xf0
 80058fa:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80058fe:	2100      	movs	r1, #0
 8005900:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005904:	f004 fa54 	bl	8009db0 <memset>
  hfdcan->LatestTxFifoQRequest = 0U;
 8005908:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800590a:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800590c:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800590e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8005912:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8005914:	bd38      	pop	{r3, r4, r5, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005916:	4a0a      	ldr	r2, [pc, #40]	; (8005940 <HAL_FDCAN_Init+0x1d8>)
 8005918:	6861      	ldr	r1, [r4, #4]
 800591a:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
 800591e:	e759      	b.n	80057d4 <HAL_FDCAN_Init+0x6c>
    return HAL_ERROR;
 8005920:	2001      	movs	r0, #1
}
 8005922:	4770      	bx	lr
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005924:	f042 0220 	orr.w	r2, r2, #32
 8005928:	619a      	str	r2, [r3, #24]
 800592a:	e7a3      	b.n	8005874 <HAL_FDCAN_Init+0x10c>
 800592c:	40006400 	.word	0x40006400
 8005930:	4000a400 	.word	0x4000a400
 8005934:	4000a470 	.word	0x4000a470
 8005938:	4000a588 	.word	0x4000a588
 800593c:	4000a660 	.word	0x4000a660
 8005940:	40006000 	.word	0x40006000

08005944 <HAL_FDCAN_GetRxMessage>:
{
 8005944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005946:	4604      	mov	r4, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005948:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 800594c:	2802      	cmp	r0, #2
 800594e:	d10d      	bne.n	800596c <HAL_FDCAN_GetRxMessage+0x28>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005950:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005952:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005956:	d00f      	beq.n	8005978 <HAL_FDCAN_GetRxMessage+0x34>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005958:	f8dc 0098 	ldr.w	r0, [ip, #152]	; 0x98
 800595c:	0700      	lsls	r0, r0, #28
 800595e:	d15f      	bne.n	8005a20 <HAL_FDCAN_GetRxMessage+0xdc>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005960:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        return HAL_ERROR;
 8005966:	2001      	movs	r0, #1
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005968:	6623      	str	r3, [r4, #96]	; 0x60
}
 800596a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800596c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800596e:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 8005972:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005974:	6623      	str	r3, [r4, #96]	; 0x60
}
 8005976:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005978:	f8dc 0090 	ldr.w	r0, [ip, #144]	; 0x90
 800597c:	0705      	lsls	r5, r0, #28
 800597e:	d0ef      	beq.n	8005960 <HAL_FDCAN_GetRxMessage+0x1c>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005980:	f8dc 7090 	ldr.w	r7, [ip, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005984:	6ca5      	ldr	r5, [r4, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005986:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800598a:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 800598e:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005992:	6828      	ldr	r0, [r5, #0]
 8005994:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8005998:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800599a:	2800      	cmp	r0, #0
 800599c:	d14f      	bne.n	8005a3e <HAL_FDCAN_GetRxMessage+0xfa>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800599e:	6828      	ldr	r0, [r5, #0]
 80059a0:	f3c0 408a 	ubfx	r0, r0, #18, #11
 80059a4:	6010      	str	r0, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80059a6:	6828      	ldr	r0, [r5, #0]
 80059a8:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 80059ac:	6090      	str	r0, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80059ae:	6828      	ldr	r0, [r5, #0]
 80059b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80059b4:	6110      	str	r0, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80059b6:	88a8      	ldrh	r0, [r5, #4]
 80059b8:	61d0      	str	r0, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80059ba:	6868      	ldr	r0, [r5, #4]
 80059bc:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
 80059c0:	60d0      	str	r0, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80059c2:	686e      	ldr	r6, [r5, #4]
 80059c4:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 80059c8:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80059ca:	686e      	ldr	r6, [r5, #4]
 80059cc:	f406 1600 	and.w	r6, r6, #2097152	; 0x200000
 80059d0:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80059d2:	79ee      	ldrb	r6, [r5, #7]
 80059d4:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80059d8:	0c00      	lsrs	r0, r0, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80059da:	6216      	str	r6, [r2, #32]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80059dc:	4e1a      	ldr	r6, [pc, #104]	; (8005a48 <HAL_FDCAN_GetRxMessage+0x104>)
 80059de:	f816 e000 	ldrb.w	lr, [r6, r0]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80059e2:	6868      	ldr	r0, [r5, #4]
 80059e4:	0fc0      	lsrs	r0, r0, #31
 80059e6:	6250      	str	r0, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80059e8:	f1be 0f00 	cmp.w	lr, #0
 80059ec:	d010      	beq.n	8005a10 <HAL_FDCAN_GetRxMessage+0xcc>
 80059ee:	f103 3eff 	add.w	lr, r3, #4294967295
 80059f2:	f105 0c07 	add.w	ip, r5, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 80059f6:	4663      	mov	r3, ip
 80059f8:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 80059fc:	f80e 0f01 	strb.w	r0, [lr, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005a00:	89d0      	ldrh	r0, [r2, #14]
 8005a02:	3b06      	subs	r3, #6
 8005a04:	5c30      	ldrb	r0, [r6, r0]
 8005a06:	1b5b      	subs	r3, r3, r5
 8005a08:	4298      	cmp	r0, r3
 8005a0a:	d8f4      	bhi.n	80059f6 <HAL_FDCAN_GetRxMessage+0xb2>
 8005a0c:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005a10:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8005a12:	bf0c      	ite	eq
 8005a14:	f8cc 7094 	streq.w	r7, [ip, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8005a18:	f8cc 709c 	strne.w	r7, [ip, #156]	; 0x9c
    return HAL_OK;
 8005a1c:	2000      	movs	r0, #0
}
 8005a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005a20:	f8dc 7098 	ldr.w	r7, [ip, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005a24:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005a26:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005a2a:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8005a2e:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005a32:	6828      	ldr	r0, [r5, #0]
 8005a34:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8005a38:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	d0af      	beq.n	800599e <HAL_FDCAN_GetRxMessage+0x5a>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005a3e:	6828      	ldr	r0, [r5, #0]
 8005a40:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8005a44:	e7ae      	b.n	80059a4 <HAL_FDCAN_GetRxMessage+0x60>
 8005a46:	bf00      	nop
 8005a48:	0800a0f0 	.word	0x0800a0f0

08005a4c <HAL_FDCAN_TxEventFifoCallback>:
}
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop

08005a50 <HAL_FDCAN_RxFifo1Callback>:
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop

08005a54 <HAL_FDCAN_TxFifoEmptyCallback>:
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop

08005a58 <HAL_FDCAN_TxBufferCompleteCallback>:
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop

08005a5c <HAL_FDCAN_TxBufferAbortCallback>:
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop

08005a60 <HAL_FDCAN_TimestampWraparoundCallback>:
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop

08005a64 <HAL_FDCAN_TimeoutOccurredCallback>:
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop

08005a68 <HAL_FDCAN_HighPriorityMessageCallback>:
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop

08005a6c <HAL_FDCAN_ErrorCallback>:
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop

08005a70 <HAL_FDCAN_ErrorStatusCallback>:
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop

08005a74 <HAL_FDCAN_IRQHandler>:
{
 8005a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005a78:	6803      	ldr	r3, [r0, #0]
 8005a7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005a7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a7e:	ea02 0901 	and.w	r9, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005a82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005a84:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005a86:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005a88:	ea02 0801 	and.w	r8, r2, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005a8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005a8e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005a90:	4017      	ands	r7, r2
  Errors &= hfdcan->Instance->IE;
 8005a92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005a94:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8005a96:	4015      	ands	r5, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005a98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a9a:	4016      	ands	r6, r2
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005a9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a9e:	0652      	lsls	r2, r2, #25
{
 8005aa0:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005aa2:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005aa6:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005aaa:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 8005aae:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005ab2:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005ab6:	d502      	bpl.n	8005abe <HAL_FDCAN_IRQHandler+0x4a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8005ab8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aba:	0651      	lsls	r1, r2, #25
 8005abc:	d473      	bmi.n	8005ba6 <HAL_FDCAN_IRQHandler+0x132>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8005abe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ac0:	05d2      	lsls	r2, r2, #23
 8005ac2:	d502      	bpl.n	8005aca <HAL_FDCAN_IRQHandler+0x56>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005ac4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ac6:	05d0      	lsls	r0, r2, #23
 8005ac8:	d45d      	bmi.n	8005b86 <HAL_FDCAN_IRQHandler+0x112>
  if (TxEventFifoITs != 0U)
 8005aca:	f1b9 0f00 	cmp.w	r9, #0
 8005ace:	d14a      	bne.n	8005b66 <HAL_FDCAN_IRQHandler+0xf2>
  if (RxFifo0ITs != 0U)
 8005ad0:	f1b8 0f00 	cmp.w	r8, #0
 8005ad4:	d137      	bne.n	8005b46 <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 8005ad6:	2f00      	cmp	r7, #0
 8005ad8:	d13e      	bne.n	8005b58 <HAL_FDCAN_IRQHandler+0xe4>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8005ada:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005adc:	0591      	lsls	r1, r2, #22
 8005ade:	d502      	bpl.n	8005ae6 <HAL_FDCAN_IRQHandler+0x72>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8005ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ae2:	0592      	lsls	r2, r2, #22
 8005ae4:	d475      	bmi.n	8005bd2 <HAL_FDCAN_IRQHandler+0x15e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8005ae6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ae8:	0617      	lsls	r7, r2, #24
 8005aea:	d502      	bpl.n	8005af2 <HAL_FDCAN_IRQHandler+0x7e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8005aec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aee:	0610      	lsls	r0, r2, #24
 8005af0:	d477      	bmi.n	8005be2 <HAL_FDCAN_IRQHandler+0x16e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8005af2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005af4:	0491      	lsls	r1, r2, #18
 8005af6:	d502      	bpl.n	8005afe <HAL_FDCAN_IRQHandler+0x8a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8005af8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005afa:	0492      	lsls	r2, r2, #18
 8005afc:	d459      	bmi.n	8005bb2 <HAL_FDCAN_IRQHandler+0x13e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8005afe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b00:	0417      	lsls	r7, r2, #16
 8005b02:	d502      	bpl.n	8005b0a <HAL_FDCAN_IRQHandler+0x96>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8005b04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b06:	0410      	lsls	r0, r2, #16
 8005b08:	d45b      	bmi.n	8005bc2 <HAL_FDCAN_IRQHandler+0x14e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8005b0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b0c:	0451      	lsls	r1, r2, #17
 8005b0e:	d509      	bpl.n	8005b24 <HAL_FDCAN_IRQHandler+0xb0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8005b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b12:	0452      	lsls	r2, r2, #17
 8005b14:	d506      	bpl.n	8005b24 <HAL_FDCAN_IRQHandler+0xb0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005b16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b1a:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005b1c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005b1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b22:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8005b24:	b94e      	cbnz	r6, 8005b3a <HAL_FDCAN_IRQHandler+0xc6>
  if (Errors != 0U)
 8005b26:	b125      	cbz	r5, 8005b32 <HAL_FDCAN_IRQHandler+0xbe>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8005b2c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005b2e:	431d      	orrs	r5, r3
 8005b30:	6625      	str	r5, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005b32:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005b34:	bb13      	cbnz	r3, 8005b7c <HAL_FDCAN_IRQHandler+0x108>
}
 8005b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005b3a:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005b3c:	4631      	mov	r1, r6
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f7ff ff96 	bl	8005a70 <HAL_FDCAN_ErrorStatusCallback>
 8005b44:	e7ef      	b.n	8005b26 <HAL_FDCAN_IRQHandler+0xb2>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005b46:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005b4a:	4641      	mov	r1, r8
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f7fb f86b 	bl	8000c28 <HAL_FDCAN_RxFifo0Callback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005b52:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 8005b54:	2f00      	cmp	r7, #0
 8005b56:	d0c0      	beq.n	8005ada <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005b58:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005b5a:	4639      	mov	r1, r7
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f7ff ff77 	bl	8005a50 <HAL_FDCAN_RxFifo1Callback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	e7b9      	b.n	8005ada <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005b66:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f7ff ff6d 	bl	8005a4c <HAL_FDCAN_TxEventFifoCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005b72:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 8005b74:	f1b8 0f00 	cmp.w	r8, #0
 8005b78:	d0ad      	beq.n	8005ad6 <HAL_FDCAN_IRQHandler+0x62>
 8005b7a:	e7e4      	b.n	8005b46 <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f7ff ff75 	bl	8005a6c <HAL_FDCAN_ErrorCallback>
}
 8005b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005b86:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005b8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005b8e:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b94:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005b96:	4620      	mov	r0, r4
 8005b98:	f7ff ff60 	bl	8005a5c <HAL_FDCAN_TxBufferAbortCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005b9c:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 8005b9e:	f1b9 0f00 	cmp.w	r9, #0
 8005ba2:	d095      	beq.n	8005ad0 <HAL_FDCAN_IRQHandler+0x5c>
 8005ba4:	e7df      	b.n	8005b66 <HAL_FDCAN_IRQHandler+0xf2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005ba6:	2240      	movs	r2, #64	; 0x40
 8005ba8:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005baa:	f7ff ff5d 	bl	8005a68 <HAL_FDCAN_HighPriorityMessageCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	e785      	b.n	8005abe <HAL_FDCAN_IRQHandler+0x4a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005bb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005bb6:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f7ff ff51 	bl	8005a60 <HAL_FDCAN_TimestampWraparoundCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	e79d      	b.n	8005afe <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005bc2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005bc6:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f7ff ff4b 	bl	8005a64 <HAL_FDCAN_TimeoutOccurredCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	e79b      	b.n	8005b0a <HAL_FDCAN_IRQHandler+0x96>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bd6:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005bd8:	4620      	mov	r0, r4
 8005bda:	f7ff ff3b 	bl	8005a54 <HAL_FDCAN_TxFifoEmptyCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	e781      	b.n	8005ae6 <HAL_FDCAN_IRQHandler+0x72>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005be2:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005be6:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005bea:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005bec:	2280      	movs	r2, #128	; 0x80
 8005bee:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f7ff ff31 	bl	8005a58 <HAL_FDCAN_TxBufferCompleteCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8005bf6:	6823      	ldr	r3, [r4, #0]
 8005bf8:	e77b      	b.n	8005af2 <HAL_FDCAN_IRQHandler+0x7e>
 8005bfa:	bf00      	nop

08005bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c00:	680c      	ldr	r4, [r1, #0]
{
 8005c02:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c04:	2c00      	cmp	r4, #0
 8005c06:	f000 8083 	beq.w	8005d10 <HAL_GPIO_Init+0x114>
 8005c0a:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c0e:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8005de8 <HAL_GPIO_Init+0x1ec>
  uint32_t position = 0x00U;
 8005c12:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c14:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c18:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c1a:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 8005c1e:	ea15 0804 	ands.w	r8, r5, r4
 8005c22:	d06f      	beq.n	8005d04 <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005c24:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8005c28:	f007 0203 	and.w	r2, r7, #3
 8005c2c:	1e51      	subs	r1, r2, #1
 8005c2e:	2901      	cmp	r1, #1
 8005c30:	d971      	bls.n	8005d16 <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c32:	2a03      	cmp	r2, #3
 8005c34:	f040 80b0 	bne.w	8005d98 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c38:	fa02 f20c 	lsl.w	r2, r2, ip
 8005c3c:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 8005c3e:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c40:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c42:	430a      	orrs	r2, r1
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c44:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 8005c48:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c4a:	d05b      	beq.n	8005d04 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c4c:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8005c50:	f042 0201 	orr.w	r2, r2, #1
 8005c54:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
 8005c58:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8005c5c:	f002 0201 	and.w	r2, r2, #1
 8005c60:	9203      	str	r2, [sp, #12]
 8005c62:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005c64:	f023 0203 	bic.w	r2, r3, #3
 8005c68:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005c6c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c70:	f003 0503 	and.w	r5, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8005c74:	6891      	ldr	r1, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c76:	00ad      	lsls	r5, r5, #2
 8005c78:	260f      	movs	r6, #15
 8005c7a:	fa06 fe05 	lsl.w	lr, r6, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c7e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c82:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c86:	d019      	beq.n	8005cbc <HAL_GPIO_Init+0xc0>
 8005c88:	4e51      	ldr	r6, [pc, #324]	; (8005dd0 <HAL_GPIO_Init+0x1d4>)
 8005c8a:	42b0      	cmp	r0, r6
 8005c8c:	f000 808f 	beq.w	8005dae <HAL_GPIO_Init+0x1b2>
 8005c90:	4e50      	ldr	r6, [pc, #320]	; (8005dd4 <HAL_GPIO_Init+0x1d8>)
 8005c92:	42b0      	cmp	r0, r6
 8005c94:	f000 808f 	beq.w	8005db6 <HAL_GPIO_Init+0x1ba>
 8005c98:	4e4f      	ldr	r6, [pc, #316]	; (8005dd8 <HAL_GPIO_Init+0x1dc>)
 8005c9a:	42b0      	cmp	r0, r6
 8005c9c:	f000 8081 	beq.w	8005da2 <HAL_GPIO_Init+0x1a6>
 8005ca0:	4e4e      	ldr	r6, [pc, #312]	; (8005ddc <HAL_GPIO_Init+0x1e0>)
 8005ca2:	42b0      	cmp	r0, r6
 8005ca4:	f000 808d 	beq.w	8005dc2 <HAL_GPIO_Init+0x1c6>
 8005ca8:	4e4d      	ldr	r6, [pc, #308]	; (8005de0 <HAL_GPIO_Init+0x1e4>)
 8005caa:	42b0      	cmp	r0, r6
 8005cac:	bf0c      	ite	eq
 8005cae:	f04f 0e05 	moveq.w	lr, #5
 8005cb2:	f04f 0e06 	movne.w	lr, #6
 8005cb6:	fa0e f505 	lsl.w	r5, lr, r5
 8005cba:	4329      	orrs	r1, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cbc:	6091      	str	r1, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005cbe:	4a49      	ldr	r2, [pc, #292]	; (8005de4 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8005cc0:	4948      	ldr	r1, [pc, #288]	; (8005de4 <HAL_GPIO_Init+0x1e8>)
        temp = EXTI->RTSR1;
 8005cc2:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
 8005cc4:	ea6f 0508 	mvn.w	r5, r8
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cc8:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 8005cca:	bf54      	ite	pl
 8005ccc:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8005cce:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR1 = temp;
 8005cd2:	608a      	str	r2, [r1, #8]

        temp = EXTI->FTSR1;
 8005cd4:	68ca      	ldr	r2, [r1, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cd6:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8005cd8:	4942      	ldr	r1, [pc, #264]	; (8005de4 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8005cda:	bf54      	ite	pl
 8005cdc:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8005cde:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 8005ce2:	60ca      	str	r2, [r1, #12]

        temp = EXTI->EMR1;
 8005ce4:	6849      	ldr	r1, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8005ce6:	4a3f      	ldr	r2, [pc, #252]	; (8005de4 <HAL_GPIO_Init+0x1e8>)
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ce8:	03be      	lsls	r6, r7, #14
        temp &= ~(iocurrent);
 8005cea:	bf54      	ite	pl
 8005cec:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8005cee:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->EMR1 = temp;
 8005cf2:	6051      	str	r1, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005cf4:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cf6:	03f9      	lsls	r1, r7, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8005cf8:	493a      	ldr	r1, [pc, #232]	; (8005de4 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8005cfa:	bf54      	ite	pl
 8005cfc:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8005cfe:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR1 = temp;
 8005d02:	600a      	str	r2, [r1, #0]
      }
    }

    position++;
 8005d04:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d06:	fa34 f203 	lsrs.w	r2, r4, r3
 8005d0a:	f10c 0c02 	add.w	ip, ip, #2
 8005d0e:	d184      	bne.n	8005c1a <HAL_GPIO_Init+0x1e>
  }
}
 8005d10:	b005      	add	sp, #20
 8005d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8005d16:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d18:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d1c:	f04f 0e03 	mov.w	lr, #3
 8005d20:	fa0e fe0c 	lsl.w	lr, lr, ip
 8005d24:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d28:	fa06 f60c 	lsl.w	r6, r6, ip
 8005d2c:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 8005d2e:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d30:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 8005d34:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d38:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d3c:	f3c7 1500 	ubfx	r5, r7, #4, #1
 8005d40:	409d      	lsls	r5, r3
 8005d42:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 8005d46:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8005d48:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d4a:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d4e:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8005d52:	fa05 f50c 	lsl.w	r5, r5, ip
 8005d56:	ea45 050e 	orr.w	r5, r5, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d5a:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8005d5c:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d5e:	fa02 f20c 	lsl.w	r2, r2, ip
 8005d62:	f47f af6c 	bne.w	8005c3e <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 8005d66:	08dd      	lsrs	r5, r3, #3
 8005d68:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8005d6c:	9501      	str	r5, [sp, #4]
 8005d6e:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d70:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8005d74:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d76:	f003 0e07 	and.w	lr, r3, #7
 8005d7a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005d7e:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d80:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d84:	fa06 fe0e 	lsl.w	lr, r6, lr
 8005d88:	9e00      	ldr	r6, [sp, #0]
 8005d8a:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005d8e:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d90:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005d94:	6235      	str	r5, [r6, #32]
 8005d96:	e752      	b.n	8005c3e <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d98:	2103      	movs	r1, #3
 8005d9a:	fa01 f10c 	lsl.w	r1, r1, ip
 8005d9e:	43c9      	mvns	r1, r1
 8005da0:	e7d2      	b.n	8005d48 <HAL_GPIO_Init+0x14c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005da2:	f04f 0e03 	mov.w	lr, #3
 8005da6:	fa0e f505 	lsl.w	r5, lr, r5
 8005daa:	4329      	orrs	r1, r5
 8005dac:	e786      	b.n	8005cbc <HAL_GPIO_Init+0xc0>
 8005dae:	fa0b f505 	lsl.w	r5, fp, r5
 8005db2:	4329      	orrs	r1, r5
 8005db4:	e782      	b.n	8005cbc <HAL_GPIO_Init+0xc0>
 8005db6:	f04f 0e02 	mov.w	lr, #2
 8005dba:	fa0e f505 	lsl.w	r5, lr, r5
 8005dbe:	4329      	orrs	r1, r5
 8005dc0:	e77c      	b.n	8005cbc <HAL_GPIO_Init+0xc0>
 8005dc2:	f04f 0e04 	mov.w	lr, #4
 8005dc6:	fa0e f505 	lsl.w	r5, lr, r5
 8005dca:	4329      	orrs	r1, r5
 8005dcc:	e776      	b.n	8005cbc <HAL_GPIO_Init+0xc0>
 8005dce:	bf00      	nop
 8005dd0:	48000400 	.word	0x48000400
 8005dd4:	48000800 	.word	0x48000800
 8005dd8:	48000c00 	.word	0x48000c00
 8005ddc:	48001000 	.word	0x48001000
 8005de0:	48001400 	.word	0x48001400
 8005de4:	40010400 	.word	0x40010400
 8005de8:	40021000 	.word	0x40021000

08005dec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005dec:	b10a      	cbz	r2, 8005df2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005dee:	6181      	str	r1, [r0, #24]
 8005df0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005df2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop

08005df8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005df8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005dfa:	ea01 0203 	and.w	r2, r1, r3
 8005dfe:	ea21 0103 	bic.w	r1, r1, r3
 8005e02:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005e06:	6181      	str	r1, [r0, #24]
}
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop

08005e0c <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	d07f      	beq.n	8005f10 <HAL_OPAMP_Init+0x104>
{
 8005e10:	b530      	push	{r4, r5, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005e12:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005e16:	2b05      	cmp	r3, #5
{
 8005e18:	b083      	sub	sp, #12
 8005e1a:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005e1c:	d057      	beq.n	8005ece <HAL_OPAMP_Init+0xc2>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8005e1e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d053      	beq.n	8005ece <HAL_OPAMP_Init+0xc2>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e26:	4b3b      	ldr	r3, [pc, #236]	; (8005f14 <HAL_OPAMP_Init+0x108>)
 8005e28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e2a:	f042 0201 	orr.w	r2, r2, #1
 8005e2e:	661a      	str	r2, [r3, #96]	; 0x60
 8005e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	9301      	str	r3, [sp, #4]
 8005e38:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005e3a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005e3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005e42:	b90b      	cbnz	r3, 8005e48 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8005e44:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8005e48:	4620      	mov	r0, r4
 8005e4a:	f7fd ff41 	bl	8003cd0 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8005e4e:	68a3      	ldr	r3, [r4, #8]
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8005e50:	6821      	ldr	r1, [r4, #0]
 8005e52:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8005e54:	f023 0220 	bic.w	r2, r3, #32
 8005e58:	2a40      	cmp	r2, #64	; 0x40
      MODIFY_REG(hopamp->Instance->CSR,
 8005e5a:	680a      	ldr	r2, [r1, #0]
 8005e5c:	f022 0210 	bic.w	r2, r2, #16
 8005e60:	ea42 0200 	orr.w	r2, r2, r0
 8005e64:	600a      	str	r2, [r1, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8005e66:	d035      	beq.n	8005ed4 <HAL_OPAMP_Init+0xc8>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8005e68:	6808      	ldr	r0, [r1, #0]
 8005e6a:	4a2b      	ldr	r2, [pc, #172]	; (8005f18 <HAL_OPAMP_Init+0x10c>)
 8005e6c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005e6e:	4002      	ands	r2, r0
 8005e70:	6860      	ldr	r0, [r4, #4]
 8005e72:	4303      	orrs	r3, r0
 8005e74:	68e0      	ldr	r0, [r4, #12]
 8005e76:	4303      	orrs	r3, r0
 8005e78:	6920      	ldr	r0, [r4, #16]
 8005e7a:	4303      	orrs	r3, r0
 8005e7c:	432b      	orrs	r3, r5
 8005e7e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005e80:	7d20      	ldrb	r0, [r4, #20]
 8005e82:	432b      	orrs	r3, r5
 8005e84:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005e86:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
 8005e8a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005e8c:	2801      	cmp	r0, #1
 8005e8e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005e92:	bf0c      	ite	eq
 8005e94:	f44f 7080 	moveq.w	r0, #256	; 0x100
 8005e98:	2000      	movne	r0, #0
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	4303      	orrs	r3, r0
 8005e9e:	600b      	str	r3, [r1, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8005ea0:	698b      	ldr	r3, [r1, #24]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	db09      	blt.n	8005eba <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8005ea6:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8005eaa:	698a      	ldr	r2, [r1, #24]
 8005eac:	4303      	orrs	r3, r0
 8005eae:	6a20      	ldr	r0, [r4, #32]
 8005eb0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005eb4:	4303      	orrs	r3, r0
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	618b      	str	r3, [r1, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005eba:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8005ebe:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8005ec2:	bb13      	cbnz	r3, 8005f0a <HAL_OPAMP_Init+0xfe>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
  }
}
 8005eca:	b003      	add	sp, #12
 8005ecc:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005ece:	2001      	movs	r0, #1
}
 8005ed0:	b003      	add	sp, #12
 8005ed2:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 8005ed4:	680a      	ldr	r2, [r1, #0]
 8005ed6:	4810      	ldr	r0, [pc, #64]	; (8005f18 <HAL_OPAMP_Init+0x10c>)
 8005ed8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005eda:	4010      	ands	r0, r2
 8005edc:	6862      	ldr	r2, [r4, #4]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	6922      	ldr	r2, [r4, #16]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	432b      	orrs	r3, r5
 8005ee6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005ee8:	7d22      	ldrb	r2, [r4, #20]
 8005eea:	432b      	orrs	r3, r5
 8005eec:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005eee:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
 8005ef2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005ef4:	2a01      	cmp	r2, #1
 8005ef6:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005efa:	bf0c      	ite	eq
 8005efc:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8005f00:	2200      	movne	r2, #0
 8005f02:	4303      	orrs	r3, r0
 8005f04:	4313      	orrs	r3, r2
 8005f06:	600b      	str	r3, [r1, #0]
 8005f08:	e7ca      	b.n	8005ea0 <HAL_OPAMP_Init+0x94>
    return status;
 8005f0a:	2000      	movs	r0, #0
}
 8005f0c:	b003      	add	sp, #12
 8005f0e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005f10:	2001      	movs	r0, #1
}
 8005f12:	4770      	bx	lr
 8005f14:	40021000 	.word	0x40021000
 8005f18:	e0003e11 	.word	0xe0003e11

08005f1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f1c:	b410      	push	{r4}
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f1e:	4a3b      	ldr	r2, [pc, #236]	; (800600c <HAL_PWREx_ControlVoltageScaling+0xf0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005f20:	b970      	cbnz	r0, 8005f40 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f22:	6813      	ldr	r3, [r2, #0]
 8005f24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f2c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f30:	d023      	beq.n	8005f7a <HAL_PWREx_ControlVoltageScaling+0x5e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8005f36:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f3a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8005f3e:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f40:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005f44:	d009      	beq.n	8005f5a <HAL_PWREx_ControlVoltageScaling+0x3e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f46:	6813      	ldr	r3, [r2, #0]
}
 8005f48:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  return HAL_OK;
 8005f54:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f56:	6013      	str	r3, [r2, #0]
}
 8005f58:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f5a:	6813      	ldr	r3, [r2, #0]
 8005f5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f64:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f68:	d02f      	beq.n	8005fca <HAL_PWREx_ControlVoltageScaling+0xae>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8005f6e:	2000      	movs	r0, #0
}
 8005f70:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8005f78:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f7e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f82:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f84:	4c22      	ldr	r4, [pc, #136]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005f86:	4823      	ldr	r0, [pc, #140]	; (8006014 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f88:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8005f8c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005f90:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	2132      	movs	r1, #50	; 0x32
 8005f96:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f9a:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f9c:	fba0 0303 	umull	r0, r3, r0, r3
 8005fa0:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fa2:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005fa4:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fa8:	d506      	bpl.n	8005fb8 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8005faa:	e000      	b.n	8005fae <HAL_PWREx_ControlVoltageScaling+0x92>
 8005fac:	b123      	cbz	r3, 8005fb8 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8005fae:	6951      	ldr	r1, [r2, #20]
 8005fb0:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005fb2:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fb6:	d4f9      	bmi.n	8005fac <HAL_PWREx_ControlVoltageScaling+0x90>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005fb8:	4b14      	ldr	r3, [pc, #80]	; (800600c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	055c      	lsls	r4, r3, #21
  return HAL_OK;
 8005fbe:	bf54      	ite	pl
 8005fc0:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 8005fc2:	2003      	movmi	r0, #3
}
 8005fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fc8:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005fd2:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005fd4:	4c0e      	ldr	r4, [pc, #56]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005fd6:	480f      	ldr	r0, [pc, #60]	; (8006014 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005fd8:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8005fdc:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005fe0:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	2132      	movs	r1, #50	; 0x32
 8005fe6:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fea:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005fec:	fba0 0303 	umull	r0, r3, r0, r3
 8005ff0:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ff2:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ff4:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ff8:	d5de      	bpl.n	8005fb8 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8005ffa:	e001      	b.n	8006000 <HAL_PWREx_ControlVoltageScaling+0xe4>
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d0db      	beq.n	8005fb8 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8006000:	6951      	ldr	r1, [r2, #20]
 8006002:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8006004:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006008:	d5d6      	bpl.n	8005fb8 <HAL_PWREx_ControlVoltageScaling+0x9c>
 800600a:	e7f7      	b.n	8005ffc <HAL_PWREx_ControlVoltageScaling+0xe0>
 800600c:	40007000 	.word	0x40007000
 8006010:	20000434 	.word	0x20000434
 8006014:	431bde83 	.word	0x431bde83

08006018 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006018:	4a02      	ldr	r2, [pc, #8]	; (8006024 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800601a:	6893      	ldr	r3, [r2, #8]
 800601c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006020:	6093      	str	r3, [r2, #8]
}
 8006022:	4770      	bx	lr
 8006024:	40007000 	.word	0x40007000

08006028 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006028:	2800      	cmp	r0, #0
 800602a:	f000 81c3 	beq.w	80063b4 <HAL_RCC_OscConfig+0x38c>
{
 800602e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006032:	6803      	ldr	r3, [r0, #0]
 8006034:	07d9      	lsls	r1, r3, #31
{
 8006036:	b082      	sub	sp, #8
 8006038:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800603a:	d52d      	bpl.n	8006098 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800603c:	49a6      	ldr	r1, [pc, #664]	; (80062d8 <HAL_RCC_OscConfig+0x2b0>)
 800603e:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006040:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006042:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006046:	2a0c      	cmp	r2, #12
 8006048:	f000 810a 	beq.w	8006260 <HAL_RCC_OscConfig+0x238>
 800604c:	2a08      	cmp	r2, #8
 800604e:	f000 810c 	beq.w	800626a <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006052:	6863      	ldr	r3, [r4, #4]
 8006054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006058:	f000 8133 	beq.w	80062c2 <HAL_RCC_OscConfig+0x29a>
 800605c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006060:	f000 819b 	beq.w	800639a <HAL_RCC_OscConfig+0x372>
 8006064:	4d9c      	ldr	r5, [pc, #624]	; (80062d8 <HAL_RCC_OscConfig+0x2b0>)
 8006066:	682a      	ldr	r2, [r5, #0]
 8006068:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800606c:	602a      	str	r2, [r5, #0]
 800606e:	682a      	ldr	r2, [r5, #0]
 8006070:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006074:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006076:	2b00      	cmp	r3, #0
 8006078:	f040 8128 	bne.w	80062cc <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607c:	f7fe f9bc 	bl	80043f8 <HAL_GetTick>
 8006080:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006082:	e005      	b.n	8006090 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006084:	f7fe f9b8 	bl	80043f8 <HAL_GetTick>
 8006088:	1b80      	subs	r0, r0, r6
 800608a:	2864      	cmp	r0, #100	; 0x64
 800608c:	f200 8142 	bhi.w	8006314 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006090:	682b      	ldr	r3, [r5, #0]
 8006092:	039f      	lsls	r7, r3, #14
 8006094:	d4f6      	bmi.n	8006084 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	079e      	lsls	r6, r3, #30
 800609a:	d528      	bpl.n	80060ee <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800609c:	4a8e      	ldr	r2, [pc, #568]	; (80062d8 <HAL_RCC_OscConfig+0x2b0>)
 800609e:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060a0:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060a2:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80060a6:	2b0c      	cmp	r3, #12
 80060a8:	f000 80ec 	beq.w	8006284 <HAL_RCC_OscConfig+0x25c>
 80060ac:	2b04      	cmp	r3, #4
 80060ae:	f000 80ee 	beq.w	800628e <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060b2:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060b4:	4d88      	ldr	r5, [pc, #544]	; (80062d8 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 811d 	beq.w	80062f6 <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060c2:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c4:	f7fe f998 	bl	80043f8 <HAL_GetTick>
 80060c8:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060ca:	e005      	b.n	80060d8 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060cc:	f7fe f994 	bl	80043f8 <HAL_GetTick>
 80060d0:	1b80      	subs	r0, r0, r6
 80060d2:	2802      	cmp	r0, #2
 80060d4:	f200 811e 	bhi.w	8006314 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060d8:	682b      	ldr	r3, [r5, #0]
 80060da:	0558      	lsls	r0, r3, #21
 80060dc:	d5f6      	bpl.n	80060cc <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060de:	686b      	ldr	r3, [r5, #4]
 80060e0:	6922      	ldr	r2, [r4, #16]
 80060e2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80060e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80060ea:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	071a      	lsls	r2, r3, #28
 80060f0:	d519      	bpl.n	8006126 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060f2:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060f4:	4d78      	ldr	r5, [pc, #480]	; (80062d8 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 809e 	beq.w	8006238 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 80060fc:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006100:	f043 0301 	orr.w	r3, r3, #1
 8006104:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006108:	f7fe f976 	bl	80043f8 <HAL_GetTick>
 800610c:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800610e:	e005      	b.n	800611c <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006110:	f7fe f972 	bl	80043f8 <HAL_GetTick>
 8006114:	1b80      	subs	r0, r0, r6
 8006116:	2802      	cmp	r0, #2
 8006118:	f200 80fc 	bhi.w	8006314 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800611c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006120:	079f      	lsls	r7, r3, #30
 8006122:	d5f5      	bpl.n	8006110 <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006124:	6823      	ldr	r3, [r4, #0]
 8006126:	0759      	lsls	r1, r3, #29
 8006128:	d541      	bpl.n	80061ae <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800612a:	4b6b      	ldr	r3, [pc, #428]	; (80062d8 <HAL_RCC_OscConfig+0x2b0>)
 800612c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800612e:	00d2      	lsls	r2, r2, #3
 8006130:	f100 80f4 	bmi.w	800631c <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006134:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006136:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800613a:	659a      	str	r2, [r3, #88]	; 0x58
 800613c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006142:	9301      	str	r3, [sp, #4]
 8006144:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006146:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006148:	4e64      	ldr	r6, [pc, #400]	; (80062dc <HAL_RCC_OscConfig+0x2b4>)
 800614a:	6833      	ldr	r3, [r6, #0]
 800614c:	05df      	lsls	r7, r3, #23
 800614e:	f140 8113 	bpl.w	8006378 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006152:	68a3      	ldr	r3, [r4, #8]
 8006154:	2b01      	cmp	r3, #1
 8006156:	f000 80e3 	beq.w	8006320 <HAL_RCC_OscConfig+0x2f8>
 800615a:	2b05      	cmp	r3, #5
 800615c:	f000 8169 	beq.w	8006432 <HAL_RCC_OscConfig+0x40a>
 8006160:	4e5d      	ldr	r6, [pc, #372]	; (80062d8 <HAL_RCC_OscConfig+0x2b0>)
 8006162:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8006166:	f022 0201 	bic.w	r2, r2, #1
 800616a:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 800616e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8006172:	f022 0204 	bic.w	r2, r2, #4
 8006176:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800617a:	2b00      	cmp	r3, #0
 800617c:	f040 80d7 	bne.w	800632e <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006180:	f7fe f93a 	bl	80043f8 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006184:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006188:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800618a:	e005      	b.n	8006198 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800618c:	f7fe f934 	bl	80043f8 <HAL_GetTick>
 8006190:	1bc0      	subs	r0, r0, r7
 8006192:	4540      	cmp	r0, r8
 8006194:	f200 80be 	bhi.w	8006314 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006198:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800619c:	079a      	lsls	r2, r3, #30
 800619e:	d4f5      	bmi.n	800618c <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80061a0:	b125      	cbz	r5, 80061ac <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061a2:	4a4d      	ldr	r2, [pc, #308]	; (80062d8 <HAL_RCC_OscConfig+0x2b0>)
 80061a4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80061a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	069b      	lsls	r3, r3, #26
 80061b0:	d518      	bpl.n	80061e4 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80061b2:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061b4:	4d48      	ldr	r5, [pc, #288]	; (80062d8 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 80ca 	beq.w	8006350 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 80061bc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80061c0:	f043 0301 	orr.w	r3, r3, #1
 80061c4:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c8:	f7fe f916 	bl	80043f8 <HAL_GetTick>
 80061cc:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061ce:	e005      	b.n	80061dc <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061d0:	f7fe f912 	bl	80043f8 <HAL_GetTick>
 80061d4:	1b80      	subs	r0, r0, r6
 80061d6:	2802      	cmp	r0, #2
 80061d8:	f200 809c 	bhi.w	8006314 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061dc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80061e0:	079f      	lsls	r7, r3, #30
 80061e2:	d5f5      	bpl.n	80061d0 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80061e4:	69e0      	ldr	r0, [r4, #28]
 80061e6:	b318      	cbz	r0, 8006230 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061e8:	4d3b      	ldr	r5, [pc, #236]	; (80062d8 <HAL_RCC_OscConfig+0x2b0>)
 80061ea:	68ab      	ldr	r3, [r5, #8]
 80061ec:	f003 030c 	and.w	r3, r3, #12
 80061f0:	2b0c      	cmp	r3, #12
 80061f2:	f000 812c 	beq.w	800644e <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061f6:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80061f8:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80061fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061fe:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006200:	f000 80da 	beq.w	80063b8 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006204:	68eb      	ldr	r3, [r5, #12]
 8006206:	f023 0303 	bic.w	r3, r3, #3
 800620a:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800620c:	68eb      	ldr	r3, [r5, #12]
 800620e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006216:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006218:	f7fe f8ee 	bl	80043f8 <HAL_GetTick>
 800621c:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800621e:	e004      	b.n	800622a <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006220:	f7fe f8ea 	bl	80043f8 <HAL_GetTick>
 8006224:	1b00      	subs	r0, r0, r4
 8006226:	2802      	cmp	r0, #2
 8006228:	d874      	bhi.n	8006314 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800622a:	682b      	ldr	r3, [r5, #0]
 800622c:	019b      	lsls	r3, r3, #6
 800622e:	d4f7      	bmi.n	8006220 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8006230:	2000      	movs	r0, #0
}
 8006232:	b002      	add	sp, #8
 8006234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8006238:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800623c:	f023 0301 	bic.w	r3, r3, #1
 8006240:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006244:	f7fe f8d8 	bl	80043f8 <HAL_GetTick>
 8006248:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800624a:	e004      	b.n	8006256 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800624c:	f7fe f8d4 	bl	80043f8 <HAL_GetTick>
 8006250:	1b80      	subs	r0, r0, r6
 8006252:	2802      	cmp	r0, #2
 8006254:	d85e      	bhi.n	8006314 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006256:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800625a:	0798      	lsls	r0, r3, #30
 800625c:	d4f6      	bmi.n	800624c <HAL_RCC_OscConfig+0x224>
 800625e:	e761      	b.n	8006124 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006260:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006264:	2903      	cmp	r1, #3
 8006266:	f47f aef4 	bne.w	8006052 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800626a:	4a1b      	ldr	r2, [pc, #108]	; (80062d8 <HAL_RCC_OscConfig+0x2b0>)
 800626c:	6812      	ldr	r2, [r2, #0]
 800626e:	0392      	lsls	r2, r2, #14
 8006270:	f57f af12 	bpl.w	8006098 <HAL_RCC_OscConfig+0x70>
 8006274:	6862      	ldr	r2, [r4, #4]
 8006276:	2a00      	cmp	r2, #0
 8006278:	f47f af0e 	bne.w	8006098 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 800627c:	2001      	movs	r0, #1
}
 800627e:	b002      	add	sp, #8
 8006280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006284:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006288:	2a02      	cmp	r2, #2
 800628a:	f47f af12 	bne.w	80060b2 <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800628e:	4b12      	ldr	r3, [pc, #72]	; (80062d8 <HAL_RCC_OscConfig+0x2b0>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	055d      	lsls	r5, r3, #21
 8006294:	d502      	bpl.n	800629c <HAL_RCC_OscConfig+0x274>
 8006296:	68e3      	ldr	r3, [r4, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d0ef      	beq.n	800627c <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800629c:	4a0e      	ldr	r2, [pc, #56]	; (80062d8 <HAL_RCC_OscConfig+0x2b0>)
 800629e:	6920      	ldr	r0, [r4, #16]
 80062a0:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80062a2:	490f      	ldr	r1, [pc, #60]	; (80062e0 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062a4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80062a8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80062ac:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80062ae:	6808      	ldr	r0, [r1, #0]
 80062b0:	f7fe f860 	bl	8004374 <HAL_InitTick>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	d1e1      	bne.n	800627c <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	071a      	lsls	r2, r3, #28
 80062bc:	f57f af33 	bpl.w	8006126 <HAL_RCC_OscConfig+0xfe>
 80062c0:	e717      	b.n	80060f2 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062c2:	4a05      	ldr	r2, [pc, #20]	; (80062d8 <HAL_RCC_OscConfig+0x2b0>)
 80062c4:	6813      	ldr	r3, [r2, #0]
 80062c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ca:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80062cc:	f7fe f894 	bl	80043f8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062d0:	4e01      	ldr	r6, [pc, #4]	; (80062d8 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80062d2:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062d4:	e00b      	b.n	80062ee <HAL_RCC_OscConfig+0x2c6>
 80062d6:	bf00      	nop
 80062d8:	40021000 	.word	0x40021000
 80062dc:	40007000 	.word	0x40007000
 80062e0:	2000043c 	.word	0x2000043c
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062e4:	f7fe f888 	bl	80043f8 <HAL_GetTick>
 80062e8:	1b40      	subs	r0, r0, r5
 80062ea:	2864      	cmp	r0, #100	; 0x64
 80062ec:	d812      	bhi.n	8006314 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062ee:	6833      	ldr	r3, [r6, #0]
 80062f0:	039b      	lsls	r3, r3, #14
 80062f2:	d5f7      	bpl.n	80062e4 <HAL_RCC_OscConfig+0x2bc>
 80062f4:	e6cf      	b.n	8006096 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 80062f6:	682b      	ldr	r3, [r5, #0]
 80062f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80062fe:	f7fe f87b 	bl	80043f8 <HAL_GetTick>
 8006302:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	0559      	lsls	r1, r3, #21
 8006308:	d5d6      	bpl.n	80062b8 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800630a:	f7fe f875 	bl	80043f8 <HAL_GetTick>
 800630e:	1b80      	subs	r0, r0, r6
 8006310:	2802      	cmp	r0, #2
 8006312:	d9f7      	bls.n	8006304 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8006314:	2003      	movs	r0, #3
}
 8006316:	b002      	add	sp, #8
 8006318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 800631c:	2500      	movs	r5, #0
 800631e:	e713      	b.n	8006148 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006320:	4a65      	ldr	r2, [pc, #404]	; (80064b8 <HAL_RCC_OscConfig+0x490>)
 8006322:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006326:	f043 0301 	orr.w	r3, r3, #1
 800632a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800632e:	f7fe f863 	bl	80043f8 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006332:	4f61      	ldr	r7, [pc, #388]	; (80064b8 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8006334:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006336:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800633a:	e004      	b.n	8006346 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800633c:	f7fe f85c 	bl	80043f8 <HAL_GetTick>
 8006340:	1b80      	subs	r0, r0, r6
 8006342:	4540      	cmp	r0, r8
 8006344:	d8e6      	bhi.n	8006314 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006346:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800634a:	0799      	lsls	r1, r3, #30
 800634c:	d5f6      	bpl.n	800633c <HAL_RCC_OscConfig+0x314>
 800634e:	e727      	b.n	80061a0 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8006350:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006354:	f023 0301 	bic.w	r3, r3, #1
 8006358:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 800635c:	f7fe f84c 	bl	80043f8 <HAL_GetTick>
 8006360:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006362:	e004      	b.n	800636e <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006364:	f7fe f848 	bl	80043f8 <HAL_GetTick>
 8006368:	1b80      	subs	r0, r0, r6
 800636a:	2802      	cmp	r0, #2
 800636c:	d8d2      	bhi.n	8006314 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800636e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006372:	0798      	lsls	r0, r3, #30
 8006374:	d4f6      	bmi.n	8006364 <HAL_RCC_OscConfig+0x33c>
 8006376:	e735      	b.n	80061e4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006378:	6833      	ldr	r3, [r6, #0]
 800637a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800637e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006380:	f7fe f83a 	bl	80043f8 <HAL_GetTick>
 8006384:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006386:	6833      	ldr	r3, [r6, #0]
 8006388:	05d8      	lsls	r0, r3, #23
 800638a:	f53f aee2 	bmi.w	8006152 <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800638e:	f7fe f833 	bl	80043f8 <HAL_GetTick>
 8006392:	1bc0      	subs	r0, r0, r7
 8006394:	2802      	cmp	r0, #2
 8006396:	d9f6      	bls.n	8006386 <HAL_RCC_OscConfig+0x35e>
 8006398:	e7bc      	b.n	8006314 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800639a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800639e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80063b0:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063b2:	e78b      	b.n	80062cc <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 80063b4:	2001      	movs	r0, #1
}
 80063b6:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80063b8:	f7fe f81e 	bl	80043f8 <HAL_GetTick>
 80063bc:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063be:	e004      	b.n	80063ca <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c0:	f7fe f81a 	bl	80043f8 <HAL_GetTick>
 80063c4:	1b80      	subs	r0, r0, r6
 80063c6:	2802      	cmp	r0, #2
 80063c8:	d8a4      	bhi.n	8006314 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063ca:	682b      	ldr	r3, [r5, #0]
 80063cc:	0199      	lsls	r1, r3, #6
 80063ce:	d4f7      	bmi.n	80063c0 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063d0:	68e9      	ldr	r1, [r5, #12]
 80063d2:	4b3a      	ldr	r3, [pc, #232]	; (80064bc <HAL_RCC_OscConfig+0x494>)
 80063d4:	6a22      	ldr	r2, [r4, #32]
 80063d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063d8:	4e37      	ldr	r6, [pc, #220]	; (80064b8 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063da:	400b      	ands	r3, r1
 80063dc:	4313      	orrs	r3, r2
 80063de:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 80063e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80063e6:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80063ea:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 80063ee:	3801      	subs	r0, #1
 80063f0:	0849      	lsrs	r1, r1, #1
 80063f2:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80063f6:	3901      	subs	r1, #1
 80063f8:	0852      	lsrs	r2, r2, #1
 80063fa:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80063fe:	3a01      	subs	r2, #1
 8006400:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8006404:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8006406:	682b      	ldr	r3, [r5, #0]
 8006408:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800640c:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800640e:	68eb      	ldr	r3, [r5, #12]
 8006410:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006414:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8006416:	f7fd ffef 	bl	80043f8 <HAL_GetTick>
 800641a:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800641c:	e005      	b.n	800642a <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800641e:	f7fd ffeb 	bl	80043f8 <HAL_GetTick>
 8006422:	1b00      	subs	r0, r0, r4
 8006424:	2802      	cmp	r0, #2
 8006426:	f63f af75 	bhi.w	8006314 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800642a:	6833      	ldr	r3, [r6, #0]
 800642c:	019a      	lsls	r2, r3, #6
 800642e:	d5f6      	bpl.n	800641e <HAL_RCC_OscConfig+0x3f6>
 8006430:	e6fe      	b.n	8006230 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006432:	4b21      	ldr	r3, [pc, #132]	; (80064b8 <HAL_RCC_OscConfig+0x490>)
 8006434:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006438:	f042 0204 	orr.w	r2, r2, #4
 800643c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006440:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006444:	f042 0201 	orr.w	r2, r2, #1
 8006448:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800644c:	e76f      	b.n	800632e <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800644e:	2801      	cmp	r0, #1
 8006450:	f43f aeef 	beq.w	8006232 <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8006454:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006456:	6a22      	ldr	r2, [r4, #32]
 8006458:	f003 0103 	and.w	r1, r3, #3
 800645c:	4291      	cmp	r1, r2
 800645e:	f47f af0d 	bne.w	800627c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006462:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006464:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006468:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800646a:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800646e:	f47f af05 	bne.w	800627c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006472:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006474:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006478:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800647c:	f47f aefe 	bne.w	800627c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006480:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006482:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006486:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800648a:	f47f aef7 	bne.w	800627c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800648e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006490:	0852      	lsrs	r2, r2, #1
 8006492:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8006496:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006498:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800649c:	f47f aeee 	bne.w	800627c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80064a0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80064a2:	0852      	lsrs	r2, r2, #1
 80064a4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80064a8:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064aa:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 80064ae:	bf14      	ite	ne
 80064b0:	2001      	movne	r0, #1
 80064b2:	2000      	moveq	r0, #0
 80064b4:	e6bd      	b.n	8006232 <HAL_RCC_OscConfig+0x20a>
 80064b6:	bf00      	nop
 80064b8:	40021000 	.word	0x40021000
 80064bc:	019f800c 	.word	0x019f800c

080064c0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80064c0:	4b18      	ldr	r3, [pc, #96]	; (8006524 <HAL_RCC_GetSysClockFreq+0x64>)
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	f002 020c 	and.w	r2, r2, #12
 80064c8:	2a04      	cmp	r2, #4
 80064ca:	d027      	beq.n	800651c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80064cc:	689a      	ldr	r2, [r3, #8]
 80064ce:	f002 020c 	and.w	r2, r2, #12
 80064d2:	2a08      	cmp	r2, #8
 80064d4:	d024      	beq.n	8006520 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	f002 020c 	and.w	r2, r2, #12
 80064dc:	2a0c      	cmp	r2, #12
 80064de:	d001      	beq.n	80064e4 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 80064e0:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 80064e2:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064e4:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064e6:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064e8:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 80064ec:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064ee:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80064f2:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064f6:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064f8:	bf0c      	ite	eq
 80064fa:	4b0b      	ldreq	r3, [pc, #44]	; (8006528 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064fc:	4b0b      	ldrne	r3, [pc, #44]	; (800652c <HAL_RCC_GetSysClockFreq+0x6c>)
 80064fe:	fbb3 f2f2 	udiv	r2, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006502:	4b08      	ldr	r3, [pc, #32]	; (8006524 <HAL_RCC_GetSysClockFreq+0x64>)
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f3c3 6341 	ubfx	r3, r3, #25, #2
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800650a:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800650e:	3301      	adds	r3, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006510:	fb02 f000 	mul.w	r0, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006514:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8006516:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 800651a:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800651c:	4803      	ldr	r0, [pc, #12]	; (800652c <HAL_RCC_GetSysClockFreq+0x6c>)
 800651e:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8006520:	4801      	ldr	r0, [pc, #4]	; (8006528 <HAL_RCC_GetSysClockFreq+0x68>)
 8006522:	4770      	bx	lr
 8006524:	40021000 	.word	0x40021000
 8006528:	007a1200 	.word	0x007a1200
 800652c:	00f42400 	.word	0x00f42400

08006530 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006530:	2800      	cmp	r0, #0
 8006532:	f000 80ee 	beq.w	8006712 <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006536:	4a7f      	ldr	r2, [pc, #508]	; (8006734 <HAL_RCC_ClockConfig+0x204>)
{
 8006538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800653c:	6813      	ldr	r3, [r2, #0]
 800653e:	f003 030f 	and.w	r3, r3, #15
 8006542:	428b      	cmp	r3, r1
 8006544:	460d      	mov	r5, r1
 8006546:	4604      	mov	r4, r0
 8006548:	d20c      	bcs.n	8006564 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800654a:	6813      	ldr	r3, [r2, #0]
 800654c:	f023 030f 	bic.w	r3, r3, #15
 8006550:	430b      	orrs	r3, r1
 8006552:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006554:	6813      	ldr	r3, [r2, #0]
 8006556:	f003 030f 	and.w	r3, r3, #15
 800655a:	428b      	cmp	r3, r1
 800655c:	d002      	beq.n	8006564 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800655e:	2001      	movs	r0, #1
}
 8006560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	07df      	lsls	r7, r3, #31
 8006568:	d563      	bpl.n	8006632 <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800656a:	6862      	ldr	r2, [r4, #4]
 800656c:	2a03      	cmp	r2, #3
 800656e:	f000 809a 	beq.w	80066a6 <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006572:	4b71      	ldr	r3, [pc, #452]	; (8006738 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006574:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006576:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006578:	f000 8091 	beq.w	800669e <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800657c:	055b      	lsls	r3, r3, #21
 800657e:	d5ee      	bpl.n	800655e <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006580:	f7ff ff9e 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8006584:	4b6d      	ldr	r3, [pc, #436]	; (800673c <HAL_RCC_ClockConfig+0x20c>)
 8006586:	4298      	cmp	r0, r3
 8006588:	f200 80c5 	bhi.w	8006716 <HAL_RCC_ClockConfig+0x1e6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800658c:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800658e:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006592:	4e69      	ldr	r6, [pc, #420]	; (8006738 <HAL_RCC_ClockConfig+0x208>)
 8006594:	68b3      	ldr	r3, [r6, #8]
 8006596:	f023 0303 	bic.w	r3, r3, #3
 800659a:	431a      	orrs	r2, r3
 800659c:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 800659e:	f7fd ff2b 	bl	80043f8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065a2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80065a6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065a8:	e004      	b.n	80065b4 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065aa:	f7fd ff25 	bl	80043f8 <HAL_GetTick>
 80065ae:	1bc0      	subs	r0, r0, r7
 80065b0:	4540      	cmp	r0, r8
 80065b2:	d871      	bhi.n	8006698 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065b4:	68b3      	ldr	r3, [r6, #8]
 80065b6:	6862      	ldr	r2, [r4, #4]
 80065b8:	f003 030c 	and.w	r3, r3, #12
 80065bc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80065c0:	d1f3      	bne.n	80065aa <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	079f      	lsls	r7, r3, #30
 80065c6:	d436      	bmi.n	8006636 <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 80065c8:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 80065cc:	d103      	bne.n	80065d6 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80065ce:	68b3      	ldr	r3, [r6, #8]
 80065d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065d4:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065d6:	4e57      	ldr	r6, [pc, #348]	; (8006734 <HAL_RCC_ClockConfig+0x204>)
 80065d8:	6833      	ldr	r3, [r6, #0]
 80065da:	f003 030f 	and.w	r3, r3, #15
 80065de:	42ab      	cmp	r3, r5
 80065e0:	d846      	bhi.n	8006670 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	075a      	lsls	r2, r3, #29
 80065e6:	d506      	bpl.n	80065f6 <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065e8:	4953      	ldr	r1, [pc, #332]	; (8006738 <HAL_RCC_ClockConfig+0x208>)
 80065ea:	68e0      	ldr	r0, [r4, #12]
 80065ec:	688a      	ldr	r2, [r1, #8]
 80065ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065f2:	4302      	orrs	r2, r0
 80065f4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065f6:	071b      	lsls	r3, r3, #28
 80065f8:	d507      	bpl.n	800660a <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065fa:	4a4f      	ldr	r2, [pc, #316]	; (8006738 <HAL_RCC_ClockConfig+0x208>)
 80065fc:	6921      	ldr	r1, [r4, #16]
 80065fe:	6893      	ldr	r3, [r2, #8]
 8006600:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006604:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006608:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800660a:	f7ff ff59 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 800660e:	4a4a      	ldr	r2, [pc, #296]	; (8006738 <HAL_RCC_ClockConfig+0x208>)
 8006610:	4c4b      	ldr	r4, [pc, #300]	; (8006740 <HAL_RCC_ClockConfig+0x210>)
 8006612:	6892      	ldr	r2, [r2, #8]
 8006614:	494b      	ldr	r1, [pc, #300]	; (8006744 <HAL_RCC_ClockConfig+0x214>)
 8006616:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800661a:	4603      	mov	r3, r0
 800661c:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 800661e:	484a      	ldr	r0, [pc, #296]	; (8006748 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006620:	f002 021f 	and.w	r2, r2, #31
 8006624:	40d3      	lsrs	r3, r2
 8006626:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8006628:	6800      	ldr	r0, [r0, #0]
}
 800662a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 800662e:	f7fd bea1 	b.w	8004374 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006632:	079e      	lsls	r6, r3, #30
 8006634:	d5cf      	bpl.n	80065d6 <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006636:	0758      	lsls	r0, r3, #29
 8006638:	d504      	bpl.n	8006644 <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800663a:	493f      	ldr	r1, [pc, #252]	; (8006738 <HAL_RCC_ClockConfig+0x208>)
 800663c:	688a      	ldr	r2, [r1, #8]
 800663e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006642:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006644:	0719      	lsls	r1, r3, #28
 8006646:	d506      	bpl.n	8006656 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006648:	4a3b      	ldr	r2, [pc, #236]	; (8006738 <HAL_RCC_ClockConfig+0x208>)
 800664a:	6893      	ldr	r3, [r2, #8]
 800664c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006650:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006654:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006656:	4a38      	ldr	r2, [pc, #224]	; (8006738 <HAL_RCC_ClockConfig+0x208>)
 8006658:	68a1      	ldr	r1, [r4, #8]
 800665a:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800665c:	4e35      	ldr	r6, [pc, #212]	; (8006734 <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800665e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006662:	430b      	orrs	r3, r1
 8006664:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006666:	6833      	ldr	r3, [r6, #0]
 8006668:	f003 030f 	and.w	r3, r3, #15
 800666c:	42ab      	cmp	r3, r5
 800666e:	d9b8      	bls.n	80065e2 <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006670:	6833      	ldr	r3, [r6, #0]
 8006672:	f023 030f 	bic.w	r3, r3, #15
 8006676:	432b      	orrs	r3, r5
 8006678:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800667a:	f7fd febd 	bl	80043f8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800667e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006682:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006684:	6833      	ldr	r3, [r6, #0]
 8006686:	f003 030f 	and.w	r3, r3, #15
 800668a:	42ab      	cmp	r3, r5
 800668c:	d0a9      	beq.n	80065e2 <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800668e:	f7fd feb3 	bl	80043f8 <HAL_GetTick>
 8006692:	1bc0      	subs	r0, r0, r7
 8006694:	4540      	cmp	r0, r8
 8006696:	d9f5      	bls.n	8006684 <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 8006698:	2003      	movs	r0, #3
}
 800669a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800669e:	039a      	lsls	r2, r3, #14
 80066a0:	f53f af6e 	bmi.w	8006580 <HAL_RCC_ClockConfig+0x50>
 80066a4:	e75b      	b.n	800655e <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066a6:	4924      	ldr	r1, [pc, #144]	; (8006738 <HAL_RCC_ClockConfig+0x208>)
 80066a8:	6808      	ldr	r0, [r1, #0]
 80066aa:	0180      	lsls	r0, r0, #6
 80066ac:	f57f af57 	bpl.w	800655e <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066b0:	68ce      	ldr	r6, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066b2:	68c8      	ldr	r0, [r1, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066b4:	68c9      	ldr	r1, [r1, #12]
      if(pllfreq > 80000000U)
 80066b6:	4f21      	ldr	r7, [pc, #132]	; (800673c <HAL_RCC_ClockConfig+0x20c>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066b8:	f006 0603 	and.w	r6, r6, #3
  switch (pllsource)
 80066bc:	2e03      	cmp	r6, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066be:	f3c0 1003 	ubfx	r0, r0, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066c2:	bf0c      	ite	eq
 80066c4:	4e21      	ldreq	r6, [pc, #132]	; (800674c <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066c6:	4e22      	ldrne	r6, [pc, #136]	; (8006750 <HAL_RCC_ClockConfig+0x220>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066c8:	3001      	adds	r0, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066ca:	fbb6 f0f0 	udiv	r0, r6, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066ce:	4e1a      	ldr	r6, [pc, #104]	; (8006738 <HAL_RCC_ClockConfig+0x208>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066d0:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80066d4:	fb00 f101 	mul.w	r1, r0, r1
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066d8:	68f0      	ldr	r0, [r6, #12]
 80066da:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80066de:	3001      	adds	r0, #1
 80066e0:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 80066e2:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 80066e6:	42b9      	cmp	r1, r7
 80066e8:	d920      	bls.n	800672c <HAL_RCC_ClockConfig+0x1fc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80066ea:	68b1      	ldr	r1, [r6, #8]
 80066ec:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 80066f0:	d005      	beq.n	80066fe <HAL_RCC_ClockConfig+0x1ce>
 80066f2:	f013 0902 	ands.w	r9, r3, #2
 80066f6:	f43f af4c 	beq.w	8006592 <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80066fa:	68a3      	ldr	r3, [r4, #8]
 80066fc:	b9b3      	cbnz	r3, 800672c <HAL_RCC_ClockConfig+0x1fc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80066fe:	490e      	ldr	r1, [pc, #56]	; (8006738 <HAL_RCC_ClockConfig+0x208>)
 8006700:	688b      	ldr	r3, [r1, #8]
 8006702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800670a:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 800670c:	f04f 0980 	mov.w	r9, #128	; 0x80
 8006710:	e73f      	b.n	8006592 <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 8006712:	2001      	movs	r0, #1
}
 8006714:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006716:	4a08      	ldr	r2, [pc, #32]	; (8006738 <HAL_RCC_ClockConfig+0x208>)
 8006718:	6893      	ldr	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800671a:	f04f 0980 	mov.w	r9, #128	; 0x80
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800671e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006722:	ea43 0309 	orr.w	r3, r3, r9
 8006726:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006728:	6862      	ldr	r2, [r4, #4]
 800672a:	e732      	b.n	8006592 <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800672c:	f04f 0900 	mov.w	r9, #0
 8006730:	e72f      	b.n	8006592 <HAL_RCC_ClockConfig+0x62>
 8006732:	bf00      	nop
 8006734:	40022000 	.word	0x40022000
 8006738:	40021000 	.word	0x40021000
 800673c:	04c4b400 	.word	0x04c4b400
 8006740:	0800a0d8 	.word	0x0800a0d8
 8006744:	20000434 	.word	0x20000434
 8006748:	2000043c 	.word	0x2000043c
 800674c:	007a1200 	.word	0x007a1200
 8006750:	00f42400 	.word	0x00f42400

08006754 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8006754:	4b01      	ldr	r3, [pc, #4]	; (800675c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8006756:	6818      	ldr	r0, [r3, #0]
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	20000434 	.word	0x20000434

08006760 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006760:	4b05      	ldr	r3, [pc, #20]	; (8006778 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006762:	4a06      	ldr	r2, [pc, #24]	; (800677c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006764:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006766:	4906      	ldr	r1, [pc, #24]	; (8006780 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006768:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800676c:	6808      	ldr	r0, [r1, #0]
 800676e:	5cd3      	ldrb	r3, [r2, r3]
 8006770:	f003 031f 	and.w	r3, r3, #31
}
 8006774:	40d8      	lsrs	r0, r3
 8006776:	4770      	bx	lr
 8006778:	40021000 	.word	0x40021000
 800677c:	0800a0e8 	.word	0x0800a0e8
 8006780:	20000434 	.word	0x20000434

08006784 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006784:	4b05      	ldr	r3, [pc, #20]	; (800679c <HAL_RCC_GetPCLK2Freq+0x18>)
 8006786:	4a06      	ldr	r2, [pc, #24]	; (80067a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006788:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800678a:	4906      	ldr	r1, [pc, #24]	; (80067a4 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800678c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006790:	6808      	ldr	r0, [r1, #0]
 8006792:	5cd3      	ldrb	r3, [r2, r3]
 8006794:	f003 031f 	and.w	r3, r3, #31
}
 8006798:	40d8      	lsrs	r0, r3
 800679a:	4770      	bx	lr
 800679c:	40021000 	.word	0x40021000
 80067a0:	0800a0e8 	.word	0x0800a0e8
 80067a4:	20000434 	.word	0x20000434

080067a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067ac:	6803      	ldr	r3, [r0, #0]
{
 80067ae:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067b0:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 80067b4:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067b6:	d056      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067b8:	4b9f      	ldr	r3, [pc, #636]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80067ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80067bc:	00d5      	lsls	r5, r2, #3
 80067be:	f140 810c 	bpl.w	80069da <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 80067c2:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067c4:	4d9d      	ldr	r5, [pc, #628]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80067c6:	682b      	ldr	r3, [r5, #0]
 80067c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067cc:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067ce:	f7fd fe13 	bl	80043f8 <HAL_GetTick>
 80067d2:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067d4:	e005      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067d6:	f7fd fe0f 	bl	80043f8 <HAL_GetTick>
 80067da:	1b83      	subs	r3, r0, r6
 80067dc:	2b02      	cmp	r3, #2
 80067de:	f200 8107 	bhi.w	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067e2:	682b      	ldr	r3, [r5, #0]
 80067e4:	05d8      	lsls	r0, r3, #23
 80067e6:	d5f6      	bpl.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80067e8:	4d93      	ldr	r5, [pc, #588]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80067ea:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80067ee:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80067f2:	d027      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80067f4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d025      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80067fa:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80067fe:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006806:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800680a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800680e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006812:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006816:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800681a:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 800681c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006820:	f140 8108 	bpl.w	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006824:	f7fd fde8 	bl	80043f8 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006828:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800682c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800682e:	e005      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006830:	f7fd fde2 	bl	80043f8 <HAL_GetTick>
 8006834:	1b80      	subs	r0, r0, r6
 8006836:	4540      	cmp	r0, r8
 8006838:	f200 80da 	bhi.w	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800683c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006840:	079b      	lsls	r3, r3, #30
 8006842:	d5f5      	bpl.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x88>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006844:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006846:	497c      	ldr	r1, [pc, #496]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006848:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800684c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006850:	4313      	orrs	r3, r2
 8006852:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006856:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006858:	b127      	cbz	r7, 8006864 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800685a:	4a77      	ldr	r2, [pc, #476]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800685c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800685e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006862:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006864:	6823      	ldr	r3, [r4, #0]
 8006866:	07de      	lsls	r6, r3, #31
 8006868:	d508      	bpl.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800686a:	4973      	ldr	r1, [pc, #460]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800686c:	6865      	ldr	r5, [r4, #4]
 800686e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006872:	f022 0203 	bic.w	r2, r2, #3
 8006876:	432a      	orrs	r2, r5
 8006878:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800687c:	079d      	lsls	r5, r3, #30
 800687e:	d508      	bpl.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006880:	496d      	ldr	r1, [pc, #436]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006882:	68a5      	ldr	r5, [r4, #8]
 8006884:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006888:	f022 020c 	bic.w	r2, r2, #12
 800688c:	432a      	orrs	r2, r5
 800688e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006892:	0759      	lsls	r1, r3, #29
 8006894:	d508      	bpl.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006896:	4968      	ldr	r1, [pc, #416]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006898:	68e5      	ldr	r5, [r4, #12]
 800689a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800689e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80068a2:	432a      	orrs	r2, r5
 80068a4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80068a8:	071a      	lsls	r2, r3, #28
 80068aa:	d508      	bpl.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80068ac:	4962      	ldr	r1, [pc, #392]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80068ae:	6925      	ldr	r5, [r4, #16]
 80068b0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80068b4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80068b8:	432a      	orrs	r2, r5
 80068ba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068be:	069f      	lsls	r7, r3, #26
 80068c0:	d508      	bpl.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068c2:	495d      	ldr	r1, [pc, #372]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80068c4:	6965      	ldr	r5, [r4, #20]
 80068c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80068ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80068ce:	432a      	orrs	r2, r5
 80068d0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068d4:	065e      	lsls	r6, r3, #25
 80068d6:	d508      	bpl.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068d8:	4957      	ldr	r1, [pc, #348]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80068da:	69a5      	ldr	r5, [r4, #24]
 80068dc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80068e0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80068e4:	432a      	orrs	r2, r5
 80068e6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80068ea:	061d      	lsls	r5, r3, #24
 80068ec:	d508      	bpl.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80068ee:	4952      	ldr	r1, [pc, #328]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80068f0:	69e5      	ldr	r5, [r4, #28]
 80068f2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80068f6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80068fa:	432a      	orrs	r2, r5
 80068fc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006900:	05d9      	lsls	r1, r3, #23
 8006902:	d508      	bpl.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006904:	494c      	ldr	r1, [pc, #304]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006906:	6a25      	ldr	r5, [r4, #32]
 8006908:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800690c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8006910:	432a      	orrs	r2, r5
 8006912:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006916:	059a      	lsls	r2, r3, #22
 8006918:	d508      	bpl.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800691a:	4947      	ldr	r1, [pc, #284]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800691c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800691e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006922:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8006926:	432a      	orrs	r2, r5
 8006928:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800692c:	055f      	lsls	r7, r3, #21
 800692e:	d50b      	bpl.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006930:	4941      	ldr	r1, [pc, #260]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006932:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006934:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006938:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800693c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800693e:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006942:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006946:	d055      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006948:	051e      	lsls	r6, r3, #20
 800694a:	d50b      	bpl.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800694c:	493a      	ldr	r1, [pc, #232]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800694e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8006950:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006954:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006958:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800695a:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800695e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006962:	d04c      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006964:	04dd      	lsls	r5, r3, #19
 8006966:	d50b      	bpl.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006968:	4933      	ldr	r1, [pc, #204]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800696a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800696c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006970:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006974:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006976:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800697a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800697e:	d043      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006980:	0499      	lsls	r1, r3, #18
 8006982:	d50b      	bpl.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006984:	492c      	ldr	r1, [pc, #176]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006986:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006988:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800698c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006990:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006992:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006996:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800699a:	d03a      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800699c:	045a      	lsls	r2, r3, #17
 800699e:	d50b      	bpl.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069a0:	4925      	ldr	r1, [pc, #148]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80069a2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80069a4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80069a8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80069ac:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80069ae:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069b2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80069b6:	d031      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80069b8:	041b      	lsls	r3, r3, #16
 80069ba:	d50b      	bpl.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80069bc:	4a1e      	ldr	r2, [pc, #120]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80069be:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80069c0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80069c4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80069c8:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80069ca:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80069ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80069d2:	d028      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 80069d4:	b002      	add	sp, #8
 80069d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80069da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80069dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80069e0:	659a      	str	r2, [r3, #88]	; 0x58
 80069e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069e8:	9301      	str	r3, [sp, #4]
 80069ea:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80069ec:	2701      	movs	r7, #1
 80069ee:	e6e9      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 80069f0:	2003      	movs	r0, #3
 80069f2:	e731      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069f4:	68ca      	ldr	r2, [r1, #12]
 80069f6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80069fa:	60ca      	str	r2, [r1, #12]
 80069fc:	e7a4      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069fe:	68ca      	ldr	r2, [r1, #12]
 8006a00:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006a04:	60ca      	str	r2, [r1, #12]
 8006a06:	e7ad      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a08:	68ca      	ldr	r2, [r1, #12]
 8006a0a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006a0e:	60ca      	str	r2, [r1, #12]
 8006a10:	e7b6      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a12:	68ca      	ldr	r2, [r1, #12]
 8006a14:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006a18:	60ca      	str	r2, [r1, #12]
 8006a1a:	e7bf      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a1c:	68ca      	ldr	r2, [r1, #12]
 8006a1e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006a22:	60ca      	str	r2, [r1, #12]
 8006a24:	e7c8      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a26:	68d3      	ldr	r3, [r2, #12]
 8006a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a2c:	60d3      	str	r3, [r2, #12]
}
 8006a2e:	b002      	add	sp, #8
 8006a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a34:	4613      	mov	r3, r2
 8006a36:	e706      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8006a38:	40021000 	.word	0x40021000
 8006a3c:	40007000 	.word	0x40007000

08006a40 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a40:	6a03      	ldr	r3, [r0, #32]
 8006a42:	f023 0301 	bic.w	r3, r3, #1
 8006a46:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a48:	6a03      	ldr	r3, [r0, #32]
{
 8006a4a:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a4c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a4e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a50:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a52:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a56:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006a5a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a5c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8006a5e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8006a62:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a64:	4d13      	ldr	r5, [pc, #76]	; (8006ab4 <TIM_OC1_SetConfig+0x74>)
 8006a66:	42a8      	cmp	r0, r5
 8006a68:	d00f      	beq.n	8006a8a <TIM_OC1_SetConfig+0x4a>
 8006a6a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006a6e:	42a8      	cmp	r0, r5
 8006a70:	d00b      	beq.n	8006a8a <TIM_OC1_SetConfig+0x4a>
 8006a72:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006a76:	42a8      	cmp	r0, r5
 8006a78:	d007      	beq.n	8006a8a <TIM_OC1_SetConfig+0x4a>
 8006a7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006a7e:	42a8      	cmp	r0, r5
 8006a80:	d003      	beq.n	8006a8a <TIM_OC1_SetConfig+0x4a>
 8006a82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006a86:	42a8      	cmp	r0, r5
 8006a88:	d10d      	bne.n	8006aa6 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a8a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a8c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006a90:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a92:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a96:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a9a:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a9e:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006aa2:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006aa6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006aa8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006aaa:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006aac:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8006aae:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8006ab0:	6203      	str	r3, [r0, #32]
}
 8006ab2:	4770      	bx	lr
 8006ab4:	40012c00 	.word	0x40012c00

08006ab8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ab8:	6a03      	ldr	r3, [r0, #32]
 8006aba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006abe:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac0:	6a03      	ldr	r3, [r0, #32]
{
 8006ac2:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ac6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ac8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006aca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006ace:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006ad2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ad4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8006ad6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ada:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ade:	4d15      	ldr	r5, [pc, #84]	; (8006b34 <TIM_OC3_SetConfig+0x7c>)
 8006ae0:	42a8      	cmp	r0, r5
 8006ae2:	d010      	beq.n	8006b06 <TIM_OC3_SetConfig+0x4e>
 8006ae4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006ae8:	42a8      	cmp	r0, r5
 8006aea:	d00c      	beq.n	8006b06 <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aec:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006af0:	42a8      	cmp	r0, r5
 8006af2:	d00f      	beq.n	8006b14 <TIM_OC3_SetConfig+0x5c>
 8006af4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006af8:	42a8      	cmp	r0, r5
 8006afa:	d00b      	beq.n	8006b14 <TIM_OC3_SetConfig+0x5c>
 8006afc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006b00:	42a8      	cmp	r0, r5
 8006b02:	d10f      	bne.n	8006b24 <TIM_OC3_SetConfig+0x6c>
 8006b04:	e006      	b.n	8006b14 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b06:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b0c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b14:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b18:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b1c:	ea46 0c05 	orr.w	ip, r6, r5
 8006b20:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b24:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006b26:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006b28:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006b2a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8006b2c:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8006b2e:	6203      	str	r3, [r0, #32]
}
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	40012c00 	.word	0x40012c00

08006b38 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b38:	6a03      	ldr	r3, [r0, #32]
 8006b3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b3e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b40:	6a03      	ldr	r3, [r0, #32]
{
 8006b42:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b44:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b46:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b48:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b4a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006b4e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b52:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b56:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8006b58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b5c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006b60:	4d14      	ldr	r5, [pc, #80]	; (8006bb4 <TIM_OC4_SetConfig+0x7c>)
 8006b62:	42a8      	cmp	r0, r5
 8006b64:	d010      	beq.n	8006b88 <TIM_OC4_SetConfig+0x50>
 8006b66:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006b6a:	42a8      	cmp	r0, r5
 8006b6c:	d00c      	beq.n	8006b88 <TIM_OC4_SetConfig+0x50>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b6e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006b72:	42a8      	cmp	r0, r5
 8006b74:	d00f      	beq.n	8006b96 <TIM_OC4_SetConfig+0x5e>
 8006b76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006b7a:	42a8      	cmp	r0, r5
 8006b7c:	d00b      	beq.n	8006b96 <TIM_OC4_SetConfig+0x5e>
 8006b7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006b82:	42a8      	cmp	r0, r5
 8006b84:	d10f      	bne.n	8006ba6 <TIM_OC4_SetConfig+0x6e>
 8006b86:	e006      	b.n	8006b96 <TIM_OC4_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006b88:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8006b8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006b8e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8006b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006b96:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006b9a:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006b9e:	ea46 0c05 	orr.w	ip, r6, r5
 8006ba2:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ba6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006ba8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006baa:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006bac:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8006bae:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8006bb0:	6203      	str	r3, [r0, #32]
}
 8006bb2:	4770      	bx	lr
 8006bb4:	40012c00 	.word	0x40012c00

08006bb8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	f000 8081 	beq.w	8006cc0 <HAL_TIM_Base_Init+0x108>
{
 8006bbe:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006bc0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006bc4:	4604      	mov	r4, r0
 8006bc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d06d      	beq.n	8006caa <HAL_TIM_Base_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bce:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bd0:	493c      	ldr	r1, [pc, #240]	; (8006cc4 <HAL_TIM_Base_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bd8:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8006bda:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bdc:	d051      	beq.n	8006c82 <HAL_TIM_Base_Init+0xca>
 8006bde:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8006be2:	d021      	beq.n	8006c28 <HAL_TIM_Base_Init+0x70>
 8006be4:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8006be8:	428a      	cmp	r2, r1
 8006bea:	d01d      	beq.n	8006c28 <HAL_TIM_Base_Init+0x70>
 8006bec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006bf0:	428a      	cmp	r2, r1
 8006bf2:	d019      	beq.n	8006c28 <HAL_TIM_Base_Init+0x70>
 8006bf4:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8006bf8:	428a      	cmp	r2, r1
 8006bfa:	d042      	beq.n	8006c82 <HAL_TIM_Base_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bfc:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8006c00:	428a      	cmp	r2, r1
 8006c02:	d057      	beq.n	8006cb4 <HAL_TIM_Base_Init+0xfc>
 8006c04:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006c08:	428a      	cmp	r2, r1
 8006c0a:	d053      	beq.n	8006cb4 <HAL_TIM_Base_Init+0xfc>
 8006c0c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006c10:	428a      	cmp	r2, r1
 8006c12:	d04f      	beq.n	8006cb4 <HAL_TIM_Base_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c14:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c16:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c1c:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8006c1e:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8006c20:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c22:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006c24:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c26:	e010      	b.n	8006c4a <HAL_TIM_Base_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8006c28:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c2a:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006c30:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c36:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c38:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c3e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c40:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8006c42:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006c44:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c46:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006c48:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c4e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c52:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006c56:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006c5a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006c5e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006c62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006c6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c72:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006c76:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006c7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006c7e:	2000      	movs	r0, #0
}
 8006c80:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8006c82:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c84:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006c8a:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c90:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c92:	69a1      	ldr	r1, [r4, #24]
 8006c94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c98:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8006c9a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c9c:	68e3      	ldr	r3, [r4, #12]
 8006c9e:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006ca0:	6863      	ldr	r3, [r4, #4]
 8006ca2:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006ca4:	6963      	ldr	r3, [r4, #20]
 8006ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8006ca8:	e7cf      	b.n	8006c4a <HAL_TIM_Base_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8006caa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006cae:	f7fd f883 	bl	8003db8 <HAL_TIM_Base_MspInit>
 8006cb2:	e78c      	b.n	8006bce <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cb4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cb6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cbc:	4303      	orrs	r3, r0
 8006cbe:	e7e9      	b.n	8006c94 <HAL_TIM_Base_Init+0xdc>
    return HAL_ERROR;
 8006cc0:	2001      	movs	r0, #1
}
 8006cc2:	4770      	bx	lr
 8006cc4:	40012c00 	.word	0x40012c00

08006cc8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006cc8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d122      	bne.n	8006d16 <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cd0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cd2:	4917      	ldr	r1, [pc, #92]	; (8006d30 <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cda:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cdc:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cde:	f042 0201 	orr.w	r2, r2, #1
 8006ce2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce4:	d019      	beq.n	8006d1a <HAL_TIM_Base_Start_IT+0x52>
 8006ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cea:	d016      	beq.n	8006d1a <HAL_TIM_Base_Start_IT+0x52>
 8006cec:	4a11      	ldr	r2, [pc, #68]	; (8006d34 <HAL_TIM_Base_Start_IT+0x6c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d013      	beq.n	8006d1a <HAL_TIM_Base_Start_IT+0x52>
 8006cf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00f      	beq.n	8006d1a <HAL_TIM_Base_Start_IT+0x52>
 8006cfa:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00b      	beq.n	8006d1a <HAL_TIM_Base_Start_IT+0x52>
 8006d02:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d007      	beq.n	8006d1a <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8006d10:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	4770      	bx	lr
    return HAL_ERROR;
 8006d16:	2001      	movs	r0, #1
 8006d18:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d1a:	6899      	ldr	r1, [r3, #8]
 8006d1c:	4a06      	ldr	r2, [pc, #24]	; (8006d38 <HAL_TIM_Base_Start_IT+0x70>)
 8006d1e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d20:	2a06      	cmp	r2, #6
 8006d22:	d002      	beq.n	8006d2a <HAL_TIM_Base_Start_IT+0x62>
 8006d24:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006d28:	d1ef      	bne.n	8006d0a <HAL_TIM_Base_Start_IT+0x42>
  return HAL_OK;
 8006d2a:	2000      	movs	r0, #0
}
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	40012c00 	.word	0x40012c00
 8006d34:	40000400 	.word	0x40000400
 8006d38:	00010007 	.word	0x00010007

08006d3c <HAL_TIM_PWM_MspInit>:
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop

08006d40 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006d40:	2800      	cmp	r0, #0
 8006d42:	f000 8081 	beq.w	8006e48 <HAL_TIM_PWM_Init+0x108>
{
 8006d46:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006d48:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d06d      	beq.n	8006e32 <HAL_TIM_PWM_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d56:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d58:	493c      	ldr	r1, [pc, #240]	; (8006e4c <HAL_TIM_PWM_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d60:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8006d62:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d64:	d051      	beq.n	8006e0a <HAL_TIM_PWM_Init+0xca>
 8006d66:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8006d6a:	d021      	beq.n	8006db0 <HAL_TIM_PWM_Init+0x70>
 8006d6c:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8006d70:	428a      	cmp	r2, r1
 8006d72:	d01d      	beq.n	8006db0 <HAL_TIM_PWM_Init+0x70>
 8006d74:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006d78:	428a      	cmp	r2, r1
 8006d7a:	d019      	beq.n	8006db0 <HAL_TIM_PWM_Init+0x70>
 8006d7c:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8006d80:	428a      	cmp	r2, r1
 8006d82:	d042      	beq.n	8006e0a <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d84:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8006d88:	428a      	cmp	r2, r1
 8006d8a:	d057      	beq.n	8006e3c <HAL_TIM_PWM_Init+0xfc>
 8006d8c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006d90:	428a      	cmp	r2, r1
 8006d92:	d053      	beq.n	8006e3c <HAL_TIM_PWM_Init+0xfc>
 8006d94:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006d98:	428a      	cmp	r2, r1
 8006d9a:	d04f      	beq.n	8006e3c <HAL_TIM_PWM_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d9c:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d9e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006da0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006da4:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8006da6:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8006da8:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006daa:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006dac:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dae:	e010      	b.n	8006dd2 <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8006db0:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006db2:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006db8:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dbe:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dc0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dc6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dc8:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8006dca:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006dcc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dce:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006dd0:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dd6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dda:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006dde:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006de2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006de6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006dea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006df2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006df6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006dfa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006dfe:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006e02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006e06:	2000      	movs	r0, #0
}
 8006e08:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8006e0a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e0c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006e12:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e18:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e1a:	69a1      	ldr	r1, [r4, #24]
 8006e1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e20:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8006e22:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e24:	68e3      	ldr	r3, [r4, #12]
 8006e26:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006e28:	6863      	ldr	r3, [r4, #4]
 8006e2a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006e2c:	6963      	ldr	r3, [r4, #20]
 8006e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8006e30:	e7cf      	b.n	8006dd2 <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8006e32:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006e36:	f7ff ff81 	bl	8006d3c <HAL_TIM_PWM_MspInit>
 8006e3a:	e78c      	b.n	8006d56 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e3c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e3e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e44:	4303      	orrs	r3, r0
 8006e46:	e7e9      	b.n	8006e1c <HAL_TIM_PWM_Init+0xdc>
    return HAL_ERROR;
 8006e48:	2001      	movs	r0, #1
}
 8006e4a:	4770      	bx	lr
 8006e4c:	40012c00 	.word	0x40012c00

08006e50 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8006e50:	2800      	cmp	r0, #0
 8006e52:	f000 8096 	beq.w	8006f82 <HAL_TIM_Encoder_Init+0x132>
{
 8006e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006e58:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006e5c:	460d      	mov	r5, r1
 8006e5e:	4604      	mov	r4, r0
 8006e60:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 8087 	beq.w	8006f78 <HAL_TIM_Encoder_Init+0x128>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e6a:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e6c:	4946      	ldr	r1, [pc, #280]	; (8006f88 <HAL_TIM_Encoder_Init+0x138>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e74:	689a      	ldr	r2, [r3, #8]
 8006e76:	f422 32a0 	bic.w	r2, r2, #81920	; 0x14000
 8006e7a:	f022 0207 	bic.w	r2, r2, #7
 8006e7e:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e80:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8006e82:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e84:	d064      	beq.n	8006f50 <HAL_TIM_Encoder_Init+0x100>
 8006e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e8a:	d018      	beq.n	8006ebe <HAL_TIM_Encoder_Init+0x6e>
 8006e8c:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8006e90:	428b      	cmp	r3, r1
 8006e92:	d014      	beq.n	8006ebe <HAL_TIM_Encoder_Init+0x6e>
 8006e94:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006e98:	428b      	cmp	r3, r1
 8006e9a:	d010      	beq.n	8006ebe <HAL_TIM_Encoder_Init+0x6e>
 8006e9c:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8006ea0:	428b      	cmp	r3, r1
 8006ea2:	d055      	beq.n	8006f50 <HAL_TIM_Encoder_Init+0x100>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ea4:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8006ea8:	428b      	cmp	r3, r1
 8006eaa:	d055      	beq.n	8006f58 <HAL_TIM_Encoder_Init+0x108>
 8006eac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006eb0:	428b      	cmp	r3, r1
 8006eb2:	d051      	beq.n	8006f58 <HAL_TIM_Encoder_Init+0x108>
 8006eb4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006eb8:	428b      	cmp	r3, r1
 8006eba:	d108      	bne.n	8006ece <HAL_TIM_Encoder_Init+0x7e>
 8006ebc:	e04c      	b.n	8006f58 <HAL_TIM_Encoder_Init+0x108>
    tmpcr1 |= Structure->CounterMode;
 8006ebe:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ec0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006ec4:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ec6:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ec8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ecc:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ece:	69a1      	ldr	r1, [r4, #24]
 8006ed0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ed4:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ed6:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8006ed8:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006eda:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006edc:	6862      	ldr	r2, [r4, #4]
 8006ede:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006ee0:	2601      	movs	r6, #1
 8006ee2:	615e      	str	r6, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 8006ee4:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8006ee6:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ee8:	68af      	ldr	r7, [r5, #8]
 8006eea:	69aa      	ldr	r2, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006eec:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8006ef0:	f021 0103 	bic.w	r1, r1, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ef4:	ea47 2202 	orr.w	r2, r7, r2, lsl #8
 8006ef8:	430a      	orrs	r2, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006efa:	f422 417c 	bic.w	r1, r2, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006efe:	692a      	ldr	r2, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006f00:	69ef      	ldr	r7, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006f02:	0112      	lsls	r2, r2, #4
 8006f04:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8006f08:	68ef      	ldr	r7, [r5, #12]
 8006f0a:	433a      	orrs	r2, r7
  tmpccer = htim->Instance->CCER;
 8006f0c:	6a1f      	ldr	r7, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006f0e:	f027 0caa 	bic.w	ip, r7, #170	; 0xaa
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006f12:	6a2f      	ldr	r7, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006f14:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006f18:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
 8006f1c:	430a      	orrs	r2, r1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f1e:	696f      	ldr	r7, [r5, #20]
 8006f20:	6869      	ldr	r1, [r5, #4]
  tmpsmcr |= sConfig->EncoderMode;
 8006f22:	682d      	ldr	r5, [r5, #0]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f24:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 8006f28:	4328      	orrs	r0, r5
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f2a:	ea41 010c 	orr.w	r1, r1, ip
  htim->Instance->SMCR = tmpsmcr;
 8006f2e:	6098      	str	r0, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8006f30:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 8006f32:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f34:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f38:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f3c:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f40:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f44:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006f48:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  return HAL_OK;
 8006f4c:	2000      	movs	r0, #0
}
 8006f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8006f50:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006f56:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f58:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f5a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f5e:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f60:	69a1      	ldr	r1, [r4, #24]
 8006f62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f66:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8006f68:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f6a:	68e2      	ldr	r2, [r4, #12]
 8006f6c:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006f6e:	6862      	ldr	r2, [r4, #4]
 8006f70:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006f72:	6962      	ldr	r2, [r4, #20]
 8006f74:	631a      	str	r2, [r3, #48]	; 0x30
 8006f76:	e7b3      	b.n	8006ee0 <HAL_TIM_Encoder_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 8006f78:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8006f7c:	f7fc ff50 	bl	8003e20 <HAL_TIM_Encoder_MspInit>
 8006f80:	e773      	b.n	8006e6a <HAL_TIM_Encoder_Init+0x1a>
    return HAL_ERROR;
 8006f82:	2001      	movs	r0, #1
}
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	40012c00 	.word	0x40012c00

08006f8c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006f8c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	f000 8089 	beq.w	80070a8 <HAL_TIM_ConfigClockSource+0x11c>
{
 8006f96:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8006f98:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8006f9a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006f9c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006fa6:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fa8:	4b5f      	ldr	r3, [pc, #380]	; (8007128 <HAL_TIM_ConfigClockSource+0x19c>)
 8006faa:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8006fac:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8006fae:	680b      	ldr	r3, [r1, #0]
 8006fb0:	2b70      	cmp	r3, #112	; 0x70
 8006fb2:	f000 80a8 	beq.w	8007106 <HAL_TIM_ConfigClockSource+0x17a>
 8006fb6:	d828      	bhi.n	800700a <HAL_TIM_ConfigClockSource+0x7e>
 8006fb8:	2b50      	cmp	r3, #80	; 0x50
 8006fba:	d078      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0x122>
 8006fbc:	d93e      	bls.n	800703c <HAL_TIM_ConfigClockSource+0xb0>
 8006fbe:	2b60      	cmp	r3, #96	; 0x60
 8006fc0:	d11a      	bne.n	8006ff8 <HAL_TIM_ConfigClockSource+0x6c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fc2:	68cb      	ldr	r3, [r1, #12]
 8006fc4:	684d      	ldr	r5, [r1, #4]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fc6:	6a21      	ldr	r1, [r4, #32]
 8006fc8:	f021 0110 	bic.w	r1, r1, #16
 8006fcc:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fce:	69a2      	ldr	r2, [r4, #24]
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fd0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fd4:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
  tmpccer = TIMx->CCER;
 8006fd8:	6a23      	ldr	r3, [r4, #32]
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fda:	61a2      	str	r2, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fe0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8006fe4:	6223      	str	r3, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fe6:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fe8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ff0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8006ff4:	2200      	movs	r2, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ff6:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8006ff8:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8006ffa:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006ffc:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007000:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8007004:	bc70      	pop	{r4, r5, r6}
 8007006:	4610      	mov	r0, r2
 8007008:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800700a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800700e:	d069      	beq.n	80070e4 <HAL_TIM_ConfigClockSource+0x158>
 8007010:	d938      	bls.n	8007084 <HAL_TIM_ConfigClockSource+0xf8>
 8007012:	4946      	ldr	r1, [pc, #280]	; (800712c <HAL_TIM_ConfigClockSource+0x1a0>)
 8007014:	428b      	cmp	r3, r1
 8007016:	d006      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0x9a>
 8007018:	d92d      	bls.n	8007076 <HAL_TIM_ConfigClockSource+0xea>
 800701a:	4945      	ldr	r1, [pc, #276]	; (8007130 <HAL_TIM_ConfigClockSource+0x1a4>)
 800701c:	428b      	cmp	r3, r1
 800701e:	d002      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0x9a>
 8007020:	3130      	adds	r1, #48	; 0x30
 8007022:	428b      	cmp	r3, r1
 8007024:	d1e8      	bne.n	8006ff8 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr = TIMx->SMCR;
 8007026:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007028:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800702c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007030:	430b      	orrs	r3, r1
 8007032:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8007036:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 8007038:	60a3      	str	r3, [r4, #8]
}
 800703a:	e7dd      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 800703c:	2b40      	cmp	r3, #64	; 0x40
 800703e:	d126      	bne.n	800708e <HAL_TIM_ConfigClockSource+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007040:	684a      	ldr	r2, [r1, #4]
 8007042:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8007044:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007046:	6a25      	ldr	r5, [r4, #32]
 8007048:	f025 0501 	bic.w	r5, r5, #1
 800704c:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800704e:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007050:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007054:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8007058:	4311      	orrs	r1, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800705a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800705e:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8007060:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8007062:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007064:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800706c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8007070:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 8007072:	60a3      	str	r3, [r4, #8]
}
 8007074:	e7c0      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 8007076:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800707a:	d0d4      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0x9a>
 800707c:	3910      	subs	r1, #16
 800707e:	428b      	cmp	r3, r1
 8007080:	d0d1      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0x9a>
 8007082:	e7b9      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
 8007084:	f5b3 5280 	subs.w	r2, r3, #4096	; 0x1000
 8007088:	bf18      	it	ne
 800708a:	2201      	movne	r2, #1
 800708c:	e7b4      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 800708e:	d8b3      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x6c>
 8007090:	2b20      	cmp	r3, #32
 8007092:	d0c8      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0x9a>
 8007094:	d903      	bls.n	800709e <HAL_TIM_ConfigClockSource+0x112>
 8007096:	2b30      	cmp	r3, #48	; 0x30
 8007098:	d0c5      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0x9a>
 800709a:	2201      	movs	r2, #1
 800709c:	e7ac      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x6c>
 800709e:	f033 0210 	bics.w	r2, r3, #16
 80070a2:	d0c0      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0x9a>
 80070a4:	2201      	movs	r2, #1
 80070a6:	e7a7      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x6c>
  __HAL_LOCK(htim);
 80070a8:	2202      	movs	r2, #2
}
 80070aa:	4610      	mov	r0, r2
 80070ac:	4770      	bx	lr
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ae:	684a      	ldr	r2, [r1, #4]
 80070b0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80070b2:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070b4:	6a25      	ldr	r5, [r4, #32]
 80070b6:	f025 0501 	bic.w	r5, r5, #1
 80070ba:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070bc:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070be:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80070c6:	4311      	orrs	r1, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070c8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80070cc:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80070ce:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80070d0:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80070d2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80070d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070da:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 80070de:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 80070e0:	60a3      	str	r3, [r4, #8]
}
 80070e2:	e789      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x6c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070e4:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80070e8:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070ea:	68c9      	ldr	r1, [r1, #12]
 80070ec:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070ee:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80070f6:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070f8:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070fa:	68a3      	ldr	r3, [r4, #8]
 80070fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8007100:	2200      	movs	r2, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007102:	60a3      	str	r3, [r4, #8]
      break;
 8007104:	e778      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007106:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800710a:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800710c:	68c9      	ldr	r1, [r1, #12]
 800710e:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007110:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007114:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007118:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 800711a:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800711c:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800711e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8007122:	2200      	movs	r2, #0
      htim->Instance->SMCR = tmpsmcr;
 8007124:	60a3      	str	r3, [r4, #8]
      break;
 8007126:	e767      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x6c>
 8007128:	ffce0088 	.word	0xffce0088
 800712c:	00100030 	.word	0x00100030
 8007130:	00100040 	.word	0x00100040

08007134 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8007134:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007138:	2b01      	cmp	r3, #1
 800713a:	d069      	beq.n	8007210 <HAL_TIM_SlaveConfigSynchro+0xdc>
 800713c:	4684      	mov	ip, r0
 800713e:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 8007140:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007142:	2302      	movs	r3, #2
{
 8007144:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8007146:	f88c 203c 	strb.w	r2, [ip, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800714a:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800714e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007150:	684b      	ldr	r3, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007152:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007154:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007158:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800715c:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 800715e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007162:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007166:	4322      	orrs	r2, r4
  switch (sSlaveConfig->InputTrigger)
 8007168:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 800716a:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 800716c:	d05e      	beq.n	800722c <HAL_TIM_SlaveConfigSynchro+0xf8>
 800716e:	d816      	bhi.n	800719e <HAL_TIM_SlaveConfigSynchro+0x6a>
 8007170:	2b40      	cmp	r3, #64	; 0x40
 8007172:	d06e      	beq.n	8007252 <HAL_TIM_SlaveConfigSynchro+0x11e>
 8007174:	d933      	bls.n	80071de <HAL_TIM_SlaveConfigSynchro+0xaa>
 8007176:	2b50      	cmp	r3, #80	; 0x50
 8007178:	d141      	bne.n	80071fe <HAL_TIM_SlaveConfigSynchro+0xca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800717a:	688a      	ldr	r2, [r1, #8]
 800717c:	690c      	ldr	r4, [r1, #16]
  tmpccer = TIMx->CCER;
 800717e:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007180:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007184:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007186:	6a01      	ldr	r1, [r0, #32]
 8007188:	f021 0101 	bic.w	r1, r1, #1
 800718c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800718e:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007190:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007194:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007198:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800719a:	6202      	str	r2, [r0, #32]
 800719c:	e00d      	b.n	80071ba <HAL_TIM_SlaveConfigSynchro+0x86>
  switch (sSlaveConfig->InputTrigger)
 800719e:	2b70      	cmp	r3, #112	; 0x70
 80071a0:	d038      	beq.n	8007214 <HAL_TIM_SlaveConfigSynchro+0xe0>
 80071a2:	2b6f      	cmp	r3, #111	; 0x6f
 80071a4:	d92b      	bls.n	80071fe <HAL_TIM_SlaveConfigSynchro+0xca>
 80071a6:	4a34      	ldr	r2, [pc, #208]	; (8007278 <HAL_TIM_SlaveConfigSynchro+0x144>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d006      	beq.n	80071ba <HAL_TIM_SlaveConfigSynchro+0x86>
 80071ac:	d91d      	bls.n	80071ea <HAL_TIM_SlaveConfigSynchro+0xb6>
 80071ae:	4a33      	ldr	r2, [pc, #204]	; (800727c <HAL_TIM_SlaveConfigSynchro+0x148>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d002      	beq.n	80071ba <HAL_TIM_SlaveConfigSynchro+0x86>
 80071b4:	3230      	adds	r2, #48	; 0x30
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d121      	bne.n	80071fe <HAL_TIM_SlaveConfigSynchro+0xca>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80071ba:	68c3      	ldr	r3, [r0, #12]
 80071bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071c0:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80071c2:	68c3      	ldr	r3, [r0, #12]
  __HAL_UNLOCK(htim);
 80071c4:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80071c6:	2101      	movs	r1, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80071c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071cc:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 80071ce:	f88c 103d 	strb.w	r1, [ip, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80071d2:	f88c 203c 	strb.w	r2, [ip, #60]	; 0x3c
  return HAL_OK;
 80071d6:	4610      	mov	r0, r2
}
 80071d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071dc:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80071de:	2b20      	cmp	r3, #32
 80071e0:	d0eb      	beq.n	80071ba <HAL_TIM_SlaveConfigSynchro+0x86>
 80071e2:	d909      	bls.n	80071f8 <HAL_TIM_SlaveConfigSynchro+0xc4>
 80071e4:	2b30      	cmp	r3, #48	; 0x30
 80071e6:	d10a      	bne.n	80071fe <HAL_TIM_SlaveConfigSynchro+0xca>
 80071e8:	e7e7      	b.n	80071ba <HAL_TIM_SlaveConfigSynchro+0x86>
 80071ea:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80071ee:	d0e4      	beq.n	80071ba <HAL_TIM_SlaveConfigSynchro+0x86>
 80071f0:	3a10      	subs	r2, #16
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d0e1      	beq.n	80071ba <HAL_TIM_SlaveConfigSynchro+0x86>
 80071f6:	e002      	b.n	80071fe <HAL_TIM_SlaveConfigSynchro+0xca>
 80071f8:	f033 0310 	bics.w	r3, r3, #16
 80071fc:	d0dd      	beq.n	80071ba <HAL_TIM_SlaveConfigSynchro+0x86>
    htim->State = HAL_TIM_STATE_READY;
 80071fe:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8007200:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8007202:	f88c 003d 	strb.w	r0, [ip, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007206:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
}
 800720a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800720e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007210:	2002      	movs	r0, #2
}
 8007212:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007214:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8007218:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800721a:	6909      	ldr	r1, [r1, #16]
 800721c:	4323      	orrs	r3, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800721e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007222:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007226:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8007228:	6083      	str	r3, [r0, #8]
 800722a:	e7c6      	b.n	80071ba <HAL_TIM_SlaveConfigSynchro+0x86>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800722c:	690b      	ldr	r3, [r1, #16]
 800722e:	688c      	ldr	r4, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007230:	6a01      	ldr	r1, [r0, #32]
 8007232:	f021 0110 	bic.w	r1, r1, #16
 8007236:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007238:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800723a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800723e:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
  tmpccer = TIMx->CCER;
 8007242:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8007244:	6182      	str	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007246:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800724a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCER = tmpccer;
 800724e:	6203      	str	r3, [r0, #32]
 8007250:	e7b3      	b.n	80071ba <HAL_TIM_SlaveConfigSynchro+0x86>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8007252:	2c05      	cmp	r4, #5
 8007254:	d0d3      	beq.n	80071fe <HAL_TIM_SlaveConfigSynchro+0xca>
 8007256:	f1b4 1f01 	cmp.w	r4, #65537	; 0x10001
 800725a:	d0d0      	beq.n	80071fe <HAL_TIM_SlaveConfigSynchro+0xca>
      tmpccer = htim->Instance->CCER;
 800725c:	6a04      	ldr	r4, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800725e:	6a02      	ldr	r2, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007260:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007262:	f022 0201 	bic.w	r2, r2, #1
 8007266:	6202      	str	r2, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007268:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800726a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800726e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8007272:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8007274:	6204      	str	r4, [r0, #32]
      break;
 8007276:	e7a0      	b.n	80071ba <HAL_TIM_SlaveConfigSynchro+0x86>
 8007278:	00100030 	.word	0x00100030
 800727c:	00100040 	.word	0x00100040

08007280 <HAL_TIM_OC_DelayElapsedCallback>:
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop

08007284 <HAL_TIM_IC_CaptureCallback>:
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop

08007288 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop

0800728c <HAL_TIM_TriggerCallback>:
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop

08007290 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007290:	6803      	ldr	r3, [r0, #0]
 8007292:	691a      	ldr	r2, [r3, #16]
 8007294:	0791      	lsls	r1, r2, #30
{
 8007296:	b510      	push	{r4, lr}
 8007298:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800729a:	d503      	bpl.n	80072a4 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800729c:	68da      	ldr	r2, [r3, #12]
 800729e:	0792      	lsls	r2, r2, #30
 80072a0:	f100 808a 	bmi.w	80073b8 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072a4:	691a      	ldr	r2, [r3, #16]
 80072a6:	0752      	lsls	r2, r2, #29
 80072a8:	d502      	bpl.n	80072b0 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072aa:	68da      	ldr	r2, [r3, #12]
 80072ac:	0750      	lsls	r0, r2, #29
 80072ae:	d470      	bmi.n	8007392 <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072b0:	691a      	ldr	r2, [r3, #16]
 80072b2:	0711      	lsls	r1, r2, #28
 80072b4:	d502      	bpl.n	80072bc <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	0712      	lsls	r2, r2, #28
 80072ba:	d458      	bmi.n	800736e <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072bc:	691a      	ldr	r2, [r3, #16]
 80072be:	06d1      	lsls	r1, r2, #27
 80072c0:	d502      	bpl.n	80072c8 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	06d2      	lsls	r2, r2, #27
 80072c6:	d43e      	bmi.n	8007346 <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072c8:	691a      	ldr	r2, [r3, #16]
 80072ca:	07d0      	lsls	r0, r2, #31
 80072cc:	d503      	bpl.n	80072d6 <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072ce:	68da      	ldr	r2, [r3, #12]
 80072d0:	07d1      	lsls	r1, r2, #31
 80072d2:	f100 808a 	bmi.w	80073ea <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072d6:	691a      	ldr	r2, [r3, #16]
 80072d8:	0612      	lsls	r2, r2, #24
 80072da:	d503      	bpl.n	80072e4 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	0610      	lsls	r0, r2, #24
 80072e0:	f100 808b 	bmi.w	80073fa <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80072e4:	691a      	ldr	r2, [r3, #16]
 80072e6:	05d1      	lsls	r1, r2, #23
 80072e8:	d503      	bpl.n	80072f2 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072ea:	68da      	ldr	r2, [r3, #12]
 80072ec:	0612      	lsls	r2, r2, #24
 80072ee:	f100 808c 	bmi.w	800740a <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072f2:	691a      	ldr	r2, [r3, #16]
 80072f4:	0650      	lsls	r0, r2, #25
 80072f6:	d503      	bpl.n	8007300 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072f8:	68da      	ldr	r2, [r3, #12]
 80072fa:	0651      	lsls	r1, r2, #25
 80072fc:	f100 808d 	bmi.w	800741a <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007300:	691a      	ldr	r2, [r3, #16]
 8007302:	0692      	lsls	r2, r2, #26
 8007304:	d503      	bpl.n	800730e <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007306:	68da      	ldr	r2, [r3, #12]
 8007308:	0690      	lsls	r0, r2, #26
 800730a:	f100 808e 	bmi.w	800742a <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800730e:	691a      	ldr	r2, [r3, #16]
 8007310:	02d1      	lsls	r1, r2, #11
 8007312:	d503      	bpl.n	800731c <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007314:	68da      	ldr	r2, [r3, #12]
 8007316:	02d2      	lsls	r2, r2, #11
 8007318:	f100 808f 	bmi.w	800743a <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800731c:	691a      	ldr	r2, [r3, #16]
 800731e:	0290      	lsls	r0, r2, #10
 8007320:	d503      	bpl.n	800732a <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007322:	68da      	ldr	r2, [r3, #12]
 8007324:	0291      	lsls	r1, r2, #10
 8007326:	f100 8090 	bmi.w	800744a <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800732a:	691a      	ldr	r2, [r3, #16]
 800732c:	0252      	lsls	r2, r2, #9
 800732e:	d503      	bpl.n	8007338 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007330:	68da      	ldr	r2, [r3, #12]
 8007332:	0250      	lsls	r0, r2, #9
 8007334:	f100 8091 	bmi.w	800745a <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007338:	691a      	ldr	r2, [r3, #16]
 800733a:	0211      	lsls	r1, r2, #8
 800733c:	d502      	bpl.n	8007344 <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800733e:	68da      	ldr	r2, [r3, #12]
 8007340:	0212      	lsls	r2, r2, #8
 8007342:	d44a      	bmi.n	80073da <HAL_TIM_IRQHandler+0x14a>
}
 8007344:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007346:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800734a:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800734c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800734e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007356:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007358:	f040 8090 	bne.w	800747c <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800735c:	f7ff ff90 	bl	8007280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007360:	4620      	mov	r0, r4
 8007362:	f7ff ff91 	bl	8007288 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007366:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007368:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800736a:	7722      	strb	r2, [r4, #28]
 800736c:	e7ac      	b.n	80072c8 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800736e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007372:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007374:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007376:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800737c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800737e:	d17a      	bne.n	8007476 <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007380:	f7ff ff7e 	bl	8007280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007384:	4620      	mov	r0, r4
 8007386:	f7ff ff7f 	bl	8007288 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800738a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800738c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800738e:	7722      	strb	r2, [r4, #28]
 8007390:	e794      	b.n	80072bc <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007392:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007396:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007398:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800739a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80073a2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073a4:	d164      	bne.n	8007470 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073a6:	f7ff ff6b 	bl	8007280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073aa:	4620      	mov	r0, r4
 80073ac:	f7ff ff6c 	bl	8007288 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073b0:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073b2:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073b4:	7722      	strb	r2, [r4, #28]
 80073b6:	e77b      	b.n	80072b0 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073b8:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073bc:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073be:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073c0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	0799      	lsls	r1, r3, #30
 80073c6:	d150      	bne.n	800746a <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073c8:	f7ff ff5a 	bl	8007280 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073cc:	4620      	mov	r0, r4
 80073ce:	f7ff ff5b 	bl	8007288 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073d2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80073d4:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073d6:	7722      	strb	r2, [r4, #28]
 80073d8:	e764      	b.n	80072a4 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80073da:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 80073de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80073e0:	611a      	str	r2, [r3, #16]
}
 80073e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 80073e6:	f000 ba8b 	b.w	8007900 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073ea:	f06f 0201 	mvn.w	r2, #1
 80073ee:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80073f0:	4620      	mov	r0, r4
 80073f2:	f7f9 fc33 	bl	8000c5c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	e76d      	b.n	80072d6 <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073fe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007400:	4620      	mov	r0, r4
 8007402:	f000 fa73 	bl	80078ec <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	e76c      	b.n	80072e4 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800740a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800740e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007410:	4620      	mov	r0, r4
 8007412:	f000 fa6d 	bl	80078f0 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	e76b      	b.n	80072f2 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800741a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800741e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007420:	4620      	mov	r0, r4
 8007422:	f7ff ff33 	bl	800728c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	e76a      	b.n	8007300 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800742a:	f06f 0220 	mvn.w	r2, #32
 800742e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007430:	4620      	mov	r0, r4
 8007432:	f000 fa59 	bl	80078e8 <HAL_TIMEx_CommutCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	e769      	b.n	800730e <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800743a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800743e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007440:	4620      	mov	r0, r4
 8007442:	f000 fa57 	bl	80078f4 <HAL_TIMEx_EncoderIndexCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	e768      	b.n	800731c <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800744a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800744e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007450:	4620      	mov	r0, r4
 8007452:	f000 fa51 	bl	80078f8 <HAL_TIMEx_DirectionChangeCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	e767      	b.n	800732a <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800745a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800745e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8007460:	4620      	mov	r0, r4
 8007462:	f000 fa4b 	bl	80078fc <HAL_TIMEx_IndexErrorCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	e766      	b.n	8007338 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 800746a:	f7ff ff0b 	bl	8007284 <HAL_TIM_IC_CaptureCallback>
 800746e:	e7b0      	b.n	80073d2 <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8007470:	f7ff ff08 	bl	8007284 <HAL_TIM_IC_CaptureCallback>
 8007474:	e79c      	b.n	80073b0 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8007476:	f7ff ff05 	bl	8007284 <HAL_TIM_IC_CaptureCallback>
 800747a:	e786      	b.n	800738a <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 800747c:	f7ff ff02 	bl	8007284 <HAL_TIM_IC_CaptureCallback>
 8007480:	e771      	b.n	8007366 <HAL_TIM_IRQHandler+0xd6>
 8007482:	bf00      	nop

08007484 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007484:	6a03      	ldr	r3, [r0, #32]
 8007486:	f023 0310 	bic.w	r3, r3, #16
 800748a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800748c:	6a03      	ldr	r3, [r0, #32]
{
 800748e:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8007490:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007492:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007494:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007496:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800749a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800749e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074a2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80074a4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074ac:	4d14      	ldr	r5, [pc, #80]	; (8007500 <TIM_OC2_SetConfig+0x7c>)
 80074ae:	42a8      	cmp	r0, r5
 80074b0:	d010      	beq.n	80074d4 <TIM_OC2_SetConfig+0x50>
 80074b2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80074b6:	42a8      	cmp	r0, r5
 80074b8:	d00c      	beq.n	80074d4 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ba:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80074be:	42a8      	cmp	r0, r5
 80074c0:	d00f      	beq.n	80074e2 <TIM_OC2_SetConfig+0x5e>
 80074c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80074c6:	42a8      	cmp	r0, r5
 80074c8:	d00b      	beq.n	80074e2 <TIM_OC2_SetConfig+0x5e>
 80074ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80074ce:	42a8      	cmp	r0, r5
 80074d0:	d10f      	bne.n	80074f2 <TIM_OC2_SetConfig+0x6e>
 80074d2:	e006      	b.n	80074e2 <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074d4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80074d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074da:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80074de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074e2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074e6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074ea:	ea46 0c05 	orr.w	ip, r6, r5
 80074ee:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80074f2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80074f4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80074f6:	6182      	str	r2, [r0, #24]
}
 80074f8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 80074fa:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80074fc:	6203      	str	r3, [r0, #32]
}
 80074fe:	4770      	bx	lr
 8007500:	40012c00 	.word	0x40012c00

08007504 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8007504:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007508:	2b01      	cmp	r3, #1
 800750a:	f000 80f4 	beq.w	80076f6 <HAL_TIM_PWM_ConfigChannel+0x1f2>
 800750e:	2301      	movs	r3, #1
{
 8007510:	b570      	push	{r4, r5, r6, lr}
 8007512:	4604      	mov	r4, r0
 8007514:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8007516:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800751a:	2a14      	cmp	r2, #20
 800751c:	d80c      	bhi.n	8007538 <HAL_TIM_PWM_ConfigChannel+0x34>
 800751e:	e8df f002 	tbb	[pc, r2]
 8007522:	0b53      	.short	0x0b53
 8007524:	0b680b0b 	.word	0x0b680b0b
 8007528:	0b7e0b0b 	.word	0x0b7e0b0b
 800752c:	0b930b0b 	.word	0x0b930b0b
 8007530:	0ba90b0b 	.word	0x0ba90b0b
 8007534:	0b0b      	.short	0x0b0b
 8007536:	10          	.byte	0x10
 8007537:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8007538:	2300      	movs	r3, #0
 800753a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800753e:	2001      	movs	r0, #1
}
 8007540:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007542:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007544:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007546:	6a1a      	ldr	r2, [r3, #32]
 8007548:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800754c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800754e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8007550:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8007552:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007554:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8007558:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800755c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007560:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007562:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007566:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800756a:	4e64      	ldr	r6, [pc, #400]	; (80076fc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800756c:	42b3      	cmp	r3, r6
 800756e:	d00f      	beq.n	8007590 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8007570:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007574:	42b3      	cmp	r3, r6
 8007576:	d00b      	beq.n	8007590 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8007578:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800757c:	42b3      	cmp	r3, r6
 800757e:	d007      	beq.n	8007590 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8007580:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007584:	42b3      	cmp	r3, r6
 8007586:	d003      	beq.n	8007590 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8007588:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800758c:	42b3      	cmp	r3, r6
 800758e:	d104      	bne.n	800759a <HAL_TIM_PWM_ConfigChannel+0x96>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007590:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007592:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007596:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 800759a:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800759c:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 800759e:	6869      	ldr	r1, [r5, #4]
 80075a0:	64d9      	str	r1, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 80075a2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80075a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80075a6:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80075a8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80075ac:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80075ae:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80075b0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80075b4:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80075b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075b8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80075bc:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 80075be:	2300      	movs	r3, #0
 80075c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80075c4:	2000      	movs	r0, #0
}
 80075c6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075c8:	6800      	ldr	r0, [r0, #0]
 80075ca:	f7ff fa39 	bl	8006a40 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075ce:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075d0:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075d2:	6999      	ldr	r1, [r3, #24]
 80075d4:	f041 0108 	orr.w	r1, r1, #8
 80075d8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075da:	6999      	ldr	r1, [r3, #24]
 80075dc:	f021 0104 	bic.w	r1, r1, #4
 80075e0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075e2:	699a      	ldr	r2, [r3, #24]
 80075e4:	4302      	orrs	r2, r0
 80075e6:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80075e8:	2300      	movs	r3, #0
 80075ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80075ee:	2000      	movs	r0, #0
}
 80075f0:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075f2:	6800      	ldr	r0, [r0, #0]
 80075f4:	f7ff ff46 	bl	8007484 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075f8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075fa:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075fc:	6999      	ldr	r1, [r3, #24]
 80075fe:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007602:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007604:	6999      	ldr	r1, [r3, #24]
 8007606:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800760a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800760c:	699a      	ldr	r2, [r3, #24]
 800760e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007612:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8007614:	2300      	movs	r3, #0
 8007616:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800761a:	2000      	movs	r0, #0
}
 800761c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800761e:	6800      	ldr	r0, [r0, #0]
 8007620:	f7ff fa4a 	bl	8006ab8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007624:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007626:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007628:	69d9      	ldr	r1, [r3, #28]
 800762a:	f041 0108 	orr.w	r1, r1, #8
 800762e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007630:	69d9      	ldr	r1, [r3, #28]
 8007632:	f021 0104 	bic.w	r1, r1, #4
 8007636:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007638:	69da      	ldr	r2, [r3, #28]
 800763a:	4302      	orrs	r2, r0
 800763c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800763e:	2300      	movs	r3, #0
 8007640:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007644:	2000      	movs	r0, #0
}
 8007646:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007648:	6800      	ldr	r0, [r0, #0]
 800764a:	f7ff fa75 	bl	8006b38 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800764e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007650:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007652:	69d9      	ldr	r1, [r3, #28]
 8007654:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007658:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800765a:	69d9      	ldr	r1, [r3, #28]
 800765c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007660:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007662:	69da      	ldr	r2, [r3, #28]
 8007664:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007668:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800766a:	2300      	movs	r3, #0
 800766c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007670:	2000      	movs	r0, #0
}
 8007672:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007674:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8007676:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007678:	6a1a      	ldr	r2, [r3, #32]
 800767a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800767e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8007680:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8007682:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8007684:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007686:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800768a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800768e:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007690:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8007692:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007696:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800769a:	4e18      	ldr	r6, [pc, #96]	; (80076fc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800769c:	42b3      	cmp	r3, r6
 800769e:	d00f      	beq.n	80076c0 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 80076a0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80076a4:	42b3      	cmp	r3, r6
 80076a6:	d00b      	beq.n	80076c0 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 80076a8:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80076ac:	42b3      	cmp	r3, r6
 80076ae:	d007      	beq.n	80076c0 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 80076b0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80076b4:	42b3      	cmp	r3, r6
 80076b6:	d003      	beq.n	80076c0 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 80076b8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80076bc:	42b3      	cmp	r3, r6
 80076be:	d104      	bne.n	80076ca <HAL_TIM_PWM_ConfigChannel+0x1c6>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80076c0:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80076c2:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80076c6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 80076ca:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80076cc:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 80076ce:	6869      	ldr	r1, [r5, #4]
 80076d0:	6499      	str	r1, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 80076d2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80076d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80076d6:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80076d8:	f041 0108 	orr.w	r1, r1, #8
 80076dc:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80076de:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80076e0:	f021 0104 	bic.w	r1, r1, #4
 80076e4:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80076e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076e8:	432a      	orrs	r2, r5
 80076ea:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 80076ec:	2300      	movs	r3, #0
 80076ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80076f2:	2000      	movs	r0, #0
}
 80076f4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 80076f6:	2002      	movs	r0, #2
}
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	40012c00 	.word	0x40012c00

08007700 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007700:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007704:	2b01      	cmp	r3, #1
 8007706:	d03e      	beq.n	8007786 <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 8007708:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800770a:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800770c:	4d1f      	ldr	r5, [pc, #124]	; (800778c <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800770e:	2302      	movs	r3, #2
 8007710:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007714:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8007716:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8007718:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800771a:	d028      	beq.n	800776e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800771c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007720:	42aa      	cmp	r2, r5
 8007722:	d024      	beq.n	800776e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007724:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007726:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800772a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800772e:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007730:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8007734:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007736:	d00c      	beq.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8007738:	4b15      	ldr	r3, [pc, #84]	; (8007790 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800773a:	429a      	cmp	r2, r3
 800773c:	d009      	beq.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800773e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007742:	429a      	cmp	r2, r3
 8007744:	d005      	beq.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8007746:	42aa      	cmp	r2, r5
 8007748:	d003      	beq.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800774a:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800774e:	429a      	cmp	r2, r3
 8007750:	d104      	bne.n	800775c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007752:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007754:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007758:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800775a:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800775c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800775e:	2201      	movs	r2, #1
 8007760:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007764:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8007768:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 800776a:	4618      	mov	r0, r3
}
 800776c:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800776e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007770:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007774:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8007776:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800777a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800777c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007780:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8007782:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007784:	e7e5      	b.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0x52>
  __HAL_LOCK(htim);
 8007786:	2002      	movs	r0, #2
}
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	40012c00 	.word	0x40012c00
 8007790:	40000400 	.word	0x40000400

08007794 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007794:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007798:	2b01      	cmp	r3, #1
 800779a:	d045      	beq.n	8007828 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 800779c:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800779e:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80077a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077a6:	4602      	mov	r2, r0
 80077a8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80077aa:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80077ac:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80077ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077b2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80077b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80077b8:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80077ba:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80077bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80077c0:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80077c2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80077c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80077c8:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80077ca:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80077cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80077d0:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80077d2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80077d4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80077d8:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80077da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80077de:	4c13      	ldr	r4, [pc, #76]	; (800782c <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 80077e0:	42a0      	cmp	r0, r4
 80077e2:	d00b      	beq.n	80077fc <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 80077e4:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80077e8:	42a0      	cmp	r0, r4
 80077ea:	d007      	beq.n	80077fc <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80077ec:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80077ee:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80077f0:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 80077f4:	4608      	mov	r0, r1
}
 80077f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077fa:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80077fc:	69cc      	ldr	r4, [r1, #28]
 80077fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007802:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007804:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8007806:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800780a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800780e:	6a0c      	ldr	r4, [r1, #32]
 8007810:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007814:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007816:	6a4c      	ldr	r4, [r1, #36]	; 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007818:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800781a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800781e:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007820:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007824:	430b      	orrs	r3, r1
 8007826:	e7e1      	b.n	80077ec <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8007828:	2002      	movs	r0, #2
}
 800782a:	4770      	bx	lr
 800782c:	40012c00 	.word	0x40012c00

08007830 <HAL_TIMEx_ConfigBreakInput>:
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8007830:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007834:	2b01      	cmp	r3, #1
 8007836:	d04b      	beq.n	80078d0 <HAL_TIMEx_ConfigBreakInput+0xa0>

  switch (sBreakInputConfig->Source)
 8007838:	6813      	ldr	r3, [r2, #0]
 800783a:	3b01      	subs	r3, #1
 800783c:	2b0f      	cmp	r3, #15
{
 800783e:	b4f0      	push	{r4, r5, r6, r7}
 8007840:	d824      	bhi.n	800788c <HAL_TIMEx_ConfigBreakInput+0x5c>
 8007842:	4c25      	ldr	r4, [pc, #148]	; (80078d8 <HAL_TIMEx_ConfigBreakInput+0xa8>)
 8007844:	4e25      	ldr	r6, [pc, #148]	; (80078dc <HAL_TIMEx_ConfigBreakInput+0xac>)
 8007846:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800784a:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
 800784e:	4c24      	ldr	r4, [pc, #144]	; (80078e0 <HAL_TIMEx_ConfigBreakInput+0xb0>)
 8007850:	4e24      	ldr	r6, [pc, #144]	; (80078e4 <HAL_TIMEx_ConfigBreakInput+0xb4>)
 8007852:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8007856:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 800785a:	2901      	cmp	r1, #1
 800785c:	d01c      	beq.n	8007898 <HAL_TIMEx_ConfigBreakInput+0x68>
 800785e:	2902      	cmp	r1, #2
 8007860:	d12f      	bne.n	80078c2 <HAL_TIMEx_ConfigBreakInput+0x92>
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007862:	6851      	ldr	r1, [r2, #4]
      tmporx = htim->Instance->AF2;
 8007864:	6806      	ldr	r6, [r0, #0]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007866:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007868:	fa01 f30c 	lsl.w	r3, r1, ip
      tmporx = htim->Instance->AF2;
 800786c:	6e71      	ldr	r1, [r6, #100]	; 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800786e:	404b      	eors	r3, r1
 8007870:	402b      	ands	r3, r5
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007872:	40ba      	lsls	r2, r7
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007874:	404b      	eors	r3, r1
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007876:	405a      	eors	r2, r3
 8007878:	4014      	ands	r4, r2
 800787a:	4063      	eors	r3, r4
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 800787c:	2200      	movs	r2, #0
      htim->Instance->AF2 = tmporx;
 800787e:	6673      	str	r3, [r6, #100]	; 0x64
  __HAL_UNLOCK(htim);
 8007880:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007884:	2300      	movs	r3, #0

  return status;
}
 8007886:	4618      	mov	r0, r3
 8007888:	bcf0      	pop	{r4, r5, r6, r7}
 800788a:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 800788c:	2700      	movs	r7, #0
  switch (BreakInput)
 800788e:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8007890:	46bc      	mov	ip, r7
 8007892:	463c      	mov	r4, r7
 8007894:	463d      	mov	r5, r7
  switch (BreakInput)
 8007896:	d1e2      	bne.n	800785e <HAL_TIMEx_ConfigBreakInput+0x2e>
      tmporx = htim->Instance->AF1;
 8007898:	6806      	ldr	r6, [r0, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800789a:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF1;
 800789c:	6e31      	ldr	r1, [r6, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800789e:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80078a0:	fa03 f30c 	lsl.w	r3, r3, ip
 80078a4:	404b      	eors	r3, r1
 80078a6:	402b      	ands	r3, r5
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80078a8:	40ba      	lsls	r2, r7
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80078aa:	404b      	eors	r3, r1
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80078ac:	405a      	eors	r2, r3
 80078ae:	4014      	ands	r4, r2
 80078b0:	4063      	eors	r3, r4
  __HAL_UNLOCK(htim);
 80078b2:	2200      	movs	r2, #0
      htim->Instance->AF1 = tmporx;
 80078b4:	6633      	str	r3, [r6, #96]	; 0x60
  __HAL_UNLOCK(htim);
 80078b6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	bcf0      	pop	{r4, r5, r6, r7}
 80078c0:	4770      	bx	lr
  __HAL_UNLOCK(htim);
 80078c2:	2200      	movs	r2, #0
 80078c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  switch (BreakInput)
 80078c8:	2301      	movs	r3, #1
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	bcf0      	pop	{r4, r5, r6, r7}
 80078ce:	4770      	bx	lr
  __HAL_LOCK(htim);
 80078d0:	2302      	movs	r3, #2
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	0800a100 	.word	0x0800a100
 80078dc:	0800a180 	.word	0x0800a180
 80078e0:	0800a140 	.word	0x0800a140
 80078e4:	0800a1c0 	.word	0x0800a1c0

080078e8 <HAL_TIMEx_CommutCallback>:
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop

080078ec <HAL_TIMEx_BreakCallback>:
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop

080078f0 <HAL_TIMEx_Break2Callback>:
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop

080078f4 <HAL_TIMEx_EncoderIndexCallback>:
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop

080078f8 <HAL_TIMEx_DirectionChangeCallback>:
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop

080078fc <HAL_TIMEx_IndexErrorCallback>:
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop

08007900 <HAL_TIMEx_TransitionErrorCallback>:
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop

08007904 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007908:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800790a:	6882      	ldr	r2, [r0, #8]
 800790c:	6900      	ldr	r0, [r0, #16]
 800790e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007910:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007912:	4302      	orrs	r2, r0
 8007914:	430a      	orrs	r2, r1
 8007916:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007918:	49a6      	ldr	r1, [pc, #664]	; (8007bb4 <UART_SetConfig+0x2b0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800791a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800791c:	4029      	ands	r1, r5
 800791e:	430a      	orrs	r2, r1
 8007920:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007922:	685a      	ldr	r2, [r3, #4]
 8007924:	68e1      	ldr	r1, [r4, #12]
 8007926:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800792a:	430a      	orrs	r2, r1
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800792c:	49a2      	ldr	r1, [pc, #648]	; (8007bb8 <UART_SetConfig+0x2b4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800792e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007930:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007932:	69a2      	ldr	r2, [r4, #24]
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007934:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007936:	d06b      	beq.n	8007a10 <UART_SetConfig+0x10c>
    tmpreg |= huart->Init.OneBitSampling;
 8007938:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800793a:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800793e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8007942:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007944:	430a      	orrs	r2, r1
 8007946:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800794c:	f022 020f 	bic.w	r2, r2, #15
 8007950:	430a      	orrs	r2, r1
 8007952:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007954:	4a99      	ldr	r2, [pc, #612]	; (8007bbc <UART_SetConfig+0x2b8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d012      	beq.n	8007980 <UART_SetConfig+0x7c>
 800795a:	4a99      	ldr	r2, [pc, #612]	; (8007bc0 <UART_SetConfig+0x2bc>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d036      	beq.n	80079ce <UART_SetConfig+0xca>
 8007960:	4a98      	ldr	r2, [pc, #608]	; (8007bc4 <UART_SetConfig+0x2c0>)
 8007962:	4293      	cmp	r3, r2
 8007964:	f000 80fa 	beq.w	8007b5c <UART_SetConfig+0x258>
 8007968:	4a97      	ldr	r2, [pc, #604]	; (8007bc8 <UART_SetConfig+0x2c4>)
 800796a:	4293      	cmp	r3, r2
 800796c:	f000 80a5 	beq.w	8007aba <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 8007970:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007972:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8007974:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8007978:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800797c:	66a2      	str	r2, [r4, #104]	; 0x68

  return ret;
}
 800797e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007980:	4b92      	ldr	r3, [pc, #584]	; (8007bcc <UART_SetConfig+0x2c8>)
 8007982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007986:	f003 0303 	and.w	r3, r3, #3
 800798a:	3b01      	subs	r3, #1
 800798c:	2b02      	cmp	r3, #2
 800798e:	f240 808e 	bls.w	8007aae <UART_SetConfig+0x1aa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007992:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007996:	f000 80fe 	beq.w	8007b96 <UART_SetConfig+0x292>
        pclk = HAL_RCC_GetPCLK2Freq();
 800799a:	f7fe fef3 	bl	8006784 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800799e:	2800      	cmp	r0, #0
 80079a0:	f000 80da 	beq.w	8007b58 <UART_SetConfig+0x254>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80079a6:	6862      	ldr	r2, [r4, #4]
 80079a8:	4b89      	ldr	r3, [pc, #548]	; (8007bd0 <UART_SetConfig+0x2cc>)
 80079aa:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80079ae:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079b2:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079b6:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80079ba:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079be:	f1a3 0210 	sub.w	r2, r3, #16
 80079c2:	428a      	cmp	r2, r1
 80079c4:	d8d4      	bhi.n	8007970 <UART_SetConfig+0x6c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079c6:	6822      	ldr	r2, [r4, #0]
 80079c8:	2000      	movs	r0, #0
 80079ca:	60d3      	str	r3, [r2, #12]
 80079cc:	e7d1      	b.n	8007972 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079ce:	4b7f      	ldr	r3, [pc, #508]	; (8007bcc <UART_SetConfig+0x2c8>)
 80079d0:	4a80      	ldr	r2, [pc, #512]	; (8007bd4 <UART_SetConfig+0x2d0>)
 80079d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079d6:	f003 030c 	and.w	r3, r3, #12
 80079da:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079dc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80079e0:	d07d      	beq.n	8007ade <UART_SetConfig+0x1da>
    switch (clocksource)
 80079e2:	2b08      	cmp	r3, #8
 80079e4:	d8c4      	bhi.n	8007970 <UART_SetConfig+0x6c>
 80079e6:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <UART_SetConfig+0xe8>)
 80079e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ec:	08007b17 	.word	0x08007b17
 80079f0:	0800799b 	.word	0x0800799b
 80079f4:	08007b93 	.word	0x08007b93
 80079f8:	08007971 	.word	0x08007971
 80079fc:	08007ad9 	.word	0x08007ad9
 8007a00:	08007971 	.word	0x08007971
 8007a04:	08007971 	.word	0x08007971
 8007a08:	08007971 	.word	0x08007971
 8007a0c:	08007b83 	.word	0x08007b83
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a10:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8007a14:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a20:	486a      	ldr	r0, [pc, #424]	; (8007bcc <UART_SetConfig+0x2c8>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a22:	f022 020f 	bic.w	r2, r2, #15
 8007a26:	430a      	orrs	r2, r1
 8007a28:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a2a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007a2e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a36:	f000 80aa 	beq.w	8007b8e <UART_SetConfig+0x28a>
 8007a3a:	d80b      	bhi.n	8007a54 <UART_SetConfig+0x150>
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d039      	beq.n	8007ab4 <UART_SetConfig+0x1b0>
 8007a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a44:	d194      	bne.n	8007970 <UART_SetConfig+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 8007a46:	f7fe fd3b 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	f000 8084 	beq.w	8007b58 <UART_SetConfig+0x254>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a50:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007a52:	e004      	b.n	8007a5e <UART_SetConfig+0x15a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a58:	d18a      	bne.n	8007970 <UART_SetConfig+0x6c>
        pclk = (uint32_t) LSE_VALUE;
 8007a5a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a5e:	4b5c      	ldr	r3, [pc, #368]	; (8007bd0 <UART_SetConfig+0x2cc>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a60:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a62:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8007a66:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a6a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8007a6e:	4299      	cmp	r1, r3
 8007a70:	f63f af7e 	bhi.w	8007970 <UART_SetConfig+0x6c>
 8007a74:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007a78:	f63f af7a 	bhi.w	8007970 <UART_SetConfig+0x6c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	4619      	mov	r1, r3
 8007a80:	f7f8 fbca 	bl	8000218 <__aeabi_uldivmod>
 8007a84:	0209      	lsls	r1, r1, #8
 8007a86:	0203      	lsls	r3, r0, #8
 8007a88:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007a8c:	0868      	lsrs	r0, r5, #1
 8007a8e:	1818      	adds	r0, r3, r0
 8007a90:	462a      	mov	r2, r5
 8007a92:	f04f 0300 	mov.w	r3, #0
 8007a96:	f141 0100 	adc.w	r1, r1, #0
 8007a9a:	f7f8 fbbd 	bl	8000218 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a9e:	4a4e      	ldr	r2, [pc, #312]	; (8007bd8 <UART_SetConfig+0x2d4>)
 8007aa0:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8007aa4:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007aa6:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007aa8:	f63f af62 	bhi.w	8007970 <UART_SetConfig+0x6c>
 8007aac:	e78b      	b.n	80079c6 <UART_SetConfig+0xc2>
 8007aae:	4a4b      	ldr	r2, [pc, #300]	; (8007bdc <UART_SetConfig+0x2d8>)
 8007ab0:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ab2:	e793      	b.n	80079dc <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ab4:	f7fe fe54 	bl	8006760 <HAL_RCC_GetPCLK1Freq>
        break;
 8007ab8:	e7c7      	b.n	8007a4a <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007aba:	4b44      	ldr	r3, [pc, #272]	; (8007bcc <UART_SetConfig+0x2c8>)
 8007abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ac0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ac4:	2b80      	cmp	r3, #128	; 0x80
 8007ac6:	d06e      	beq.n	8007ba6 <UART_SetConfig+0x2a2>
 8007ac8:	d85e      	bhi.n	8007b88 <UART_SetConfig+0x284>
 8007aca:	b30b      	cbz	r3, 8007b10 <UART_SetConfig+0x20c>
 8007acc:	2b40      	cmp	r3, #64	; 0x40
 8007ace:	f47f af4f 	bne.w	8007970 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ad2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007ad6:	d021      	beq.n	8007b1c <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 8007ad8:	f7fe fcf2 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
        break;
 8007adc:	e75f      	b.n	800799e <UART_SetConfig+0x9a>
    switch (clocksource)
 8007ade:	2b08      	cmp	r3, #8
 8007ae0:	f63f af46 	bhi.w	8007970 <UART_SetConfig+0x6c>
 8007ae4:	a201      	add	r2, pc, #4	; (adr r2, 8007aec <UART_SetConfig+0x1e8>)
 8007ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aea:	bf00      	nop
 8007aec:	08007b9d 	.word	0x08007b9d
 8007af0:	08007b97 	.word	0x08007b97
 8007af4:	08007ba3 	.word	0x08007ba3
 8007af8:	08007971 	.word	0x08007971
 8007afc:	08007b1d 	.word	0x08007b1d
 8007b00:	08007971 	.word	0x08007971
 8007b04:	08007971 	.word	0x08007971
 8007b08:	08007971 	.word	0x08007971
 8007b0c:	08007b25 	.word	0x08007b25
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b10:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007b14:	d042      	beq.n	8007b9c <UART_SetConfig+0x298>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b16:	f7fe fe23 	bl	8006760 <HAL_RCC_GetPCLK1Freq>
        break;
 8007b1a:	e740      	b.n	800799e <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetSysClockFreq();
 8007b1c:	f7fe fcd0 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007b20:	b1d0      	cbz	r0, 8007b58 <UART_SetConfig+0x254>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b22:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007b24:	6862      	ldr	r2, [r4, #4]
 8007b26:	4b2a      	ldr	r3, [pc, #168]	; (8007bd0 <UART_SetConfig+0x2cc>)
 8007b28:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8007b2c:	fbb0 f0f1 	udiv	r0, r0, r1
 8007b30:	0853      	lsrs	r3, r2, #1
 8007b32:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b36:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b3a:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b3e:	f1a0 0210 	sub.w	r2, r0, #16
 8007b42:	429a      	cmp	r2, r3
 8007b44:	f63f af14 	bhi.w	8007970 <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b48:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8007b4c:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b4e:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b50:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8007b54:	4318      	orrs	r0, r3
 8007b56:	60d0      	str	r0, [r2, #12]
 8007b58:	2000      	movs	r0, #0
 8007b5a:	e70a      	b.n	8007972 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b5c:	4b1b      	ldr	r3, [pc, #108]	; (8007bcc <UART_SetConfig+0x2c8>)
 8007b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b62:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007b66:	2b20      	cmp	r3, #32
 8007b68:	d01d      	beq.n	8007ba6 <UART_SetConfig+0x2a2>
 8007b6a:	d804      	bhi.n	8007b76 <UART_SetConfig+0x272>
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d0cf      	beq.n	8007b10 <UART_SetConfig+0x20c>
 8007b70:	2b10      	cmp	r3, #16
 8007b72:	d0ae      	beq.n	8007ad2 <UART_SetConfig+0x1ce>
 8007b74:	e6fc      	b.n	8007970 <UART_SetConfig+0x6c>
 8007b76:	2b30      	cmp	r3, #48	; 0x30
 8007b78:	f47f aefa 	bne.w	8007970 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b7c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007b80:	d0d0      	beq.n	8007b24 <UART_SetConfig+0x220>
    switch (clocksource)
 8007b82:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007b86:	e70e      	b.n	80079a6 <UART_SetConfig+0xa2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b88:	2bc0      	cmp	r3, #192	; 0xc0
 8007b8a:	d0f7      	beq.n	8007b7c <UART_SetConfig+0x278>
 8007b8c:	e6f0      	b.n	8007970 <UART_SetConfig+0x6c>
 8007b8e:	4814      	ldr	r0, [pc, #80]	; (8007be0 <UART_SetConfig+0x2dc>)
 8007b90:	e765      	b.n	8007a5e <UART_SetConfig+0x15a>
        pclk = (uint32_t) HSI_VALUE;
 8007b92:	4813      	ldr	r0, [pc, #76]	; (8007be0 <UART_SetConfig+0x2dc>)
 8007b94:	e707      	b.n	80079a6 <UART_SetConfig+0xa2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b96:	f7fe fdf5 	bl	8006784 <HAL_RCC_GetPCLK2Freq>
        break;
 8007b9a:	e7c1      	b.n	8007b20 <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b9c:	f7fe fde0 	bl	8006760 <HAL_RCC_GetPCLK1Freq>
        break;
 8007ba0:	e7be      	b.n	8007b20 <UART_SetConfig+0x21c>
        pclk = (uint32_t) HSI_VALUE;
 8007ba2:	480f      	ldr	r0, [pc, #60]	; (8007be0 <UART_SetConfig+0x2dc>)
 8007ba4:	e7be      	b.n	8007b24 <UART_SetConfig+0x220>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ba6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8007baa:	480d      	ldr	r0, [pc, #52]	; (8007be0 <UART_SetConfig+0x2dc>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bac:	f47f aefb 	bne.w	80079a6 <UART_SetConfig+0xa2>
 8007bb0:	e7b8      	b.n	8007b24 <UART_SetConfig+0x220>
 8007bb2:	bf00      	nop
 8007bb4:	cfff69f3 	.word	0xcfff69f3
 8007bb8:	40008000 	.word	0x40008000
 8007bbc:	40013800 	.word	0x40013800
 8007bc0:	40004400 	.word	0x40004400
 8007bc4:	40004800 	.word	0x40004800
 8007bc8:	40004c00 	.word	0x40004c00
 8007bcc:	40021000 	.word	0x40021000
 8007bd0:	0800a214 	.word	0x0800a214
 8007bd4:	0800a204 	.word	0x0800a204
 8007bd8:	000ffcff 	.word	0x000ffcff
 8007bdc:	0800a200 	.word	0x0800a200
 8007be0:	00f42400 	.word	0x00f42400

08007be4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007be4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007be6:	07da      	lsls	r2, r3, #31
{
 8007be8:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bea:	d506      	bpl.n	8007bfa <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bec:	6801      	ldr	r1, [r0, #0]
 8007bee:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8007bf0:	684a      	ldr	r2, [r1, #4]
 8007bf2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007bf6:	4322      	orrs	r2, r4
 8007bf8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bfa:	079c      	lsls	r4, r3, #30
 8007bfc:	d506      	bpl.n	8007c0c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bfe:	6801      	ldr	r1, [r0, #0]
 8007c00:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8007c02:	684a      	ldr	r2, [r1, #4]
 8007c04:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007c08:	4322      	orrs	r2, r4
 8007c0a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c0c:	0759      	lsls	r1, r3, #29
 8007c0e:	d506      	bpl.n	8007c1e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c10:	6801      	ldr	r1, [r0, #0]
 8007c12:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007c14:	684a      	ldr	r2, [r1, #4]
 8007c16:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c1a:	4322      	orrs	r2, r4
 8007c1c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c1e:	071a      	lsls	r2, r3, #28
 8007c20:	d506      	bpl.n	8007c30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c22:	6801      	ldr	r1, [r0, #0]
 8007c24:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007c26:	684a      	ldr	r2, [r1, #4]
 8007c28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c2c:	4322      	orrs	r2, r4
 8007c2e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c30:	06dc      	lsls	r4, r3, #27
 8007c32:	d506      	bpl.n	8007c42 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c34:	6801      	ldr	r1, [r0, #0]
 8007c36:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007c38:	688a      	ldr	r2, [r1, #8]
 8007c3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c3e:	4322      	orrs	r2, r4
 8007c40:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c42:	0699      	lsls	r1, r3, #26
 8007c44:	d506      	bpl.n	8007c54 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c46:	6801      	ldr	r1, [r0, #0]
 8007c48:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007c4a:	688a      	ldr	r2, [r1, #8]
 8007c4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c50:	4322      	orrs	r2, r4
 8007c52:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c54:	065a      	lsls	r2, r3, #25
 8007c56:	d509      	bpl.n	8007c6c <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c58:	6801      	ldr	r1, [r0, #0]
 8007c5a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007c5c:	684a      	ldr	r2, [r1, #4]
 8007c5e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8007c62:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c64:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c68:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c6a:	d00b      	beq.n	8007c84 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c6c:	061b      	lsls	r3, r3, #24
 8007c6e:	d506      	bpl.n	8007c7e <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c70:	6802      	ldr	r2, [r0, #0]
 8007c72:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007c74:	6853      	ldr	r3, [r2, #4]
 8007c76:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007c7a:	430b      	orrs	r3, r1
 8007c7c:	6053      	str	r3, [r2, #4]
  }
}
 8007c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c82:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c84:	684a      	ldr	r2, [r1, #4]
 8007c86:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8007c88:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8007c8c:	4322      	orrs	r2, r4
 8007c8e:	604a      	str	r2, [r1, #4]
 8007c90:	e7ec      	b.n	8007c6c <UART_AdvFeatureConfig+0x88>
 8007c92:	bf00      	nop

08007c94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c98:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c9c:	6804      	ldr	r4, [r0, #0]
{
 8007c9e:	4607      	mov	r7, r0
 8007ca0:	460e      	mov	r6, r1
 8007ca2:	4615      	mov	r5, r2
 8007ca4:	4699      	mov	r9, r3
 8007ca6:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007caa:	d10a      	bne.n	8007cc2 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cac:	69e3      	ldr	r3, [r4, #28]
 8007cae:	ea36 0303 	bics.w	r3, r6, r3
 8007cb2:	bf0c      	ite	eq
 8007cb4:	2301      	moveq	r3, #1
 8007cb6:	2300      	movne	r3, #0
 8007cb8:	429d      	cmp	r5, r3
 8007cba:	d0f7      	beq.n	8007cac <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8007cbc:	2000      	movs	r0, #0
}
 8007cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cc2:	69e3      	ldr	r3, [r4, #28]
 8007cc4:	ea36 0303 	bics.w	r3, r6, r3
 8007cc8:	bf0c      	ite	eq
 8007cca:	2301      	moveq	r3, #1
 8007ccc:	2300      	movne	r3, #0
 8007cce:	42ab      	cmp	r3, r5
 8007cd0:	d1f4      	bne.n	8007cbc <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cd2:	f7fc fb91 	bl	80043f8 <HAL_GetTick>
 8007cd6:	eba0 0009 	sub.w	r0, r0, r9
 8007cda:	4540      	cmp	r0, r8
 8007cdc:	d833      	bhi.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cde:	f1b8 0f00 	cmp.w	r8, #0
 8007ce2:	d030      	beq.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ce4:	683c      	ldr	r4, [r7, #0]
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	0759      	lsls	r1, r3, #29
 8007cea:	4622      	mov	r2, r4
 8007cec:	d5db      	bpl.n	8007ca6 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cee:	69e3      	ldr	r3, [r4, #28]
 8007cf0:	051b      	lsls	r3, r3, #20
 8007cf2:	d5d8      	bpl.n	8007ca6 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cf4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007cf8:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfa:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007cfe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d02:	e844 3100 	strex	r1, r3, [r4]
 8007d06:	b139      	cbz	r1, 8007d18 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d08:	e852 3f00 	ldrex	r3, [r2]
 8007d0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d10:	e842 3100 	strex	r1, r3, [r2]
 8007d14:	2900      	cmp	r1, #0
 8007d16:	d1f7      	bne.n	8007d08 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	f102 0308 	add.w	r3, r2, #8
 8007d1c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d20:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d24:	f102 0008 	add.w	r0, r2, #8
 8007d28:	e840 3100 	strex	r1, r3, [r0]
 8007d2c:	2900      	cmp	r1, #0
 8007d2e:	d1f3      	bne.n	8007d18 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8007d30:	2320      	movs	r3, #32
 8007d32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8007d36:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007d3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 8007d3e:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8007d44:	e7bb      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0x2a>
 8007d46:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d48:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d50:	e842 3100 	strex	r1, r3, [r2]
 8007d54:	2900      	cmp	r1, #0
 8007d56:	d1f7      	bne.n	8007d48 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d58:	f102 0308 	add.w	r3, r2, #8
 8007d5c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d60:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d64:	f102 0008 	add.w	r0, r2, #8
 8007d68:	e840 3100 	strex	r1, r3, [r0]
 8007d6c:	2900      	cmp	r1, #0
 8007d6e:	d1f3      	bne.n	8007d58 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 8007d70:	2320      	movs	r3, #32
 8007d72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8007d76:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007d7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 8007d7e:	2003      	movs	r0, #3
 8007d80:	e79d      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0x2a>
 8007d82:	bf00      	nop

08007d84 <HAL_UART_Init>:
  if (huart == NULL)
 8007d84:	2800      	cmp	r0, #0
 8007d86:	d066      	beq.n	8007e56 <HAL_UART_Init+0xd2>
{
 8007d88:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8007d8a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8007d8e:	b082      	sub	sp, #8
 8007d90:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d04c      	beq.n	8007e30 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 8007d96:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007d98:	2324      	movs	r3, #36	; 0x24
 8007d9a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8007d9e:	6813      	ldr	r3, [r2, #0]
 8007da0:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007da4:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8007da6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007da8:	f7ff fdac 	bl	8007904 <UART_SetConfig>
 8007dac:	2801      	cmp	r0, #1
 8007dae:	d03c      	beq.n	8007e2a <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007db0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d135      	bne.n	8007e22 <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007db6:	6823      	ldr	r3, [r4, #0]
 8007db8:	6859      	ldr	r1, [r3, #4]
 8007dba:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8007dbe:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dc0:	6899      	ldr	r1, [r3, #8]
 8007dc2:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 8007dc6:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007dc8:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dca:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 8007dcc:	f041 0101 	orr.w	r1, r1, #1
 8007dd0:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd2:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8007dd6:	f7fc fb0f 	bl	80043f8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007dda:	6823      	ldr	r3, [r4, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8007de0:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007de2:	d40e      	bmi.n	8007e02 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	075b      	lsls	r3, r3, #29
 8007de8:	d427      	bmi.n	8007e3a <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dea:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8007dec:	2220      	movs	r2, #32
 8007dee:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8007df2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007df6:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 8007dfa:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dfc:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8007dfe:	b002      	add	sp, #8
 8007e00:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	462a      	mov	r2, r5
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e10:	4620      	mov	r0, r4
 8007e12:	f7ff ff3f 	bl	8007c94 <UART_WaitOnFlagUntilTimeout>
 8007e16:	b9e0      	cbnz	r0, 8007e52 <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	075b      	lsls	r3, r3, #29
 8007e1e:	d40c      	bmi.n	8007e3a <HAL_UART_Init+0xb6>
 8007e20:	e7e3      	b.n	8007dea <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 8007e22:	4620      	mov	r0, r4
 8007e24:	f7ff fede 	bl	8007be4 <UART_AdvFeatureConfig>
 8007e28:	e7c5      	b.n	8007db6 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 8007e2a:	2001      	movs	r0, #1
}
 8007e2c:	b002      	add	sp, #8
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8007e30:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8007e34:	f7fc f88c 	bl	8003f50 <HAL_UART_MspInit>
 8007e38:	e7ad      	b.n	8007d96 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	2200      	movs	r2, #0
 8007e42:	4633      	mov	r3, r6
 8007e44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e48:	4620      	mov	r0, r4
 8007e4a:	f7ff ff23 	bl	8007c94 <UART_WaitOnFlagUntilTimeout>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d0cb      	beq.n	8007dea <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 8007e52:	2003      	movs	r0, #3
 8007e54:	e7d3      	b.n	8007dfe <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 8007e56:	2001      	movs	r0, #1
}
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop

08007e5c <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e5c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d017      	beq.n	8007e94 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e64:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007e66:	2324      	movs	r3, #36	; 0x24
{
 8007e68:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8007e6a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e6e:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e70:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e72:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8007e74:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e78:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8007e7c:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e7e:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e80:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e82:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8007e86:	2220      	movs	r2, #32
 8007e88:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 8007e8c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8007e90:	4618      	mov	r0, r3
}
 8007e92:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007e94:	2002      	movs	r0, #2
}
 8007e96:	4770      	bx	lr

08007e98 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e98:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8007e9c:	2a01      	cmp	r2, #1
 8007e9e:	d037      	beq.n	8007f10 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8007ea0:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ea2:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007ea4:	2024      	movs	r0, #36	; 0x24
{
 8007ea6:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007ea8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007eac:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007eae:	6810      	ldr	r0, [r2, #0]
 8007eb0:	f020 0001 	bic.w	r0, r0, #1
 8007eb4:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007eb6:	6890      	ldr	r0, [r2, #8]
 8007eb8:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8007ebc:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ebe:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ec0:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ec2:	b310      	cbz	r0, 8007f0a <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ec4:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ec6:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ec8:	4d12      	ldr	r5, [pc, #72]	; (8007f14 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007eca:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ece:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ed2:	4911      	ldr	r1, [pc, #68]	; (8007f18 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8007ed4:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ed8:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007edc:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ee0:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ee4:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ee6:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ee8:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007eec:	fbb1 f1f5 	udiv	r1, r1, r5
 8007ef0:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8007efa:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007efc:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8007efe:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8007f02:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007f04:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8007f08:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8007f0a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007f0c:	4608      	mov	r0, r1
 8007f0e:	e7ef      	b.n	8007ef0 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8007f10:	2002      	movs	r0, #2
}
 8007f12:	4770      	bx	lr
 8007f14:	0800a22c 	.word	0x0800a22c
 8007f18:	0800a234 	.word	0x0800a234

08007f1c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8007f1c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8007f20:	2a01      	cmp	r2, #1
 8007f22:	d037      	beq.n	8007f94 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8007f24:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f26:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007f28:	2024      	movs	r0, #36	; 0x24
{
 8007f2a:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007f2c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f30:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007f32:	6810      	ldr	r0, [r2, #0]
 8007f34:	f020 0001 	bic.w	r0, r0, #1
 8007f38:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f3a:	6890      	ldr	r0, [r2, #8]
 8007f3c:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8007f40:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f42:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f44:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f46:	b310      	cbz	r0, 8007f8e <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f48:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f4a:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f4c:	4d12      	ldr	r5, [pc, #72]	; (8007f98 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f4e:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f52:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f56:	4911      	ldr	r1, [pc, #68]	; (8007f9c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007f58:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f5c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f60:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f64:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f68:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f6a:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f6c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f70:	fbb1 f1f5 	udiv	r1, r1, r5
 8007f74:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8007f78:	2100      	movs	r1, #0
 8007f7a:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8007f7e:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f80:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8007f82:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8007f86:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007f88:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8007f8c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8007f8e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007f90:	4608      	mov	r0, r1
 8007f92:	e7ef      	b.n	8007f74 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8007f94:	2002      	movs	r0, #2
}
 8007f96:	4770      	bx	lr
 8007f98:	0800a22c 	.word	0x0800a22c
 8007f9c:	0800a234 	.word	0x0800a234

08007fa0 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8007fa0:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8007fa2:	8840      	ldrh	r0, [r0, #2]
 8007fa4:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8007fa8:	0c00      	lsrs	r0, r0, #16
 8007faa:	4770      	bx	lr

08007fac <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8007fac:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8007fae:	8803      	ldrh	r3, [r0, #0]
 8007fb0:	140d      	asrs	r5, r1, #16
{
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8007fb6:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 8007fba:	fb03 f303 	mul.w	r3, r3, r3
{
 8007fbe:	9101      	str	r1, [sp, #4]
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8007fc0:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 8007fc4:	428b      	cmp	r3, r1
 8007fc6:	da10      	bge.n	8007fea <Circle_Limitation+0x3e>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8007fc8:	8846      	ldrh	r6, [r0, #2]
 8007fca:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8007fce:	4282      	cmp	r2, r0
 8007fd0:	dd14      	ble.n	8007ffc <Circle_Limitation+0x50>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 8007fd2:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 8007fd4:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8007fd8:	bfb8      	it	lt
 8007fda:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8007fdc:	f7f9 fd42 	bl	8001a64 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 8007fe0:	2c00      	cmp	r4, #0
        {
          new_q = - new_q;
 8007fe2:	bfb8      	it	lt
 8007fe4:	4240      	neglt	r0, r0
        }
      }
      Local_Vqd.q = (int16_t)new_q;
      Local_Vqd.d = (int16_t)new_d;
 8007fe6:	b235      	sxth	r5, r6
      Local_Vqd.q = (int16_t)new_q;
 8007fe8:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (Local_Vqd);
 8007fea:	b2a4      	uxth	r4, r4
 8007fec:	2000      	movs	r0, #0
 8007fee:	f364 000f 	bfi	r0, r4, #0, #16
 8007ff2:	b2ad      	uxth	r5, r5
 8007ff4:	f365 401f 	bfi	r0, r5, #16, #16
}
 8007ff8:	b004      	add	sp, #16
 8007ffa:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8007ffc:	1a98      	subs	r0, r3, r2
 8007ffe:	f7f9 fd31 	bl	8001a64 <MCM_Sqrt>
        if (Vqd.q < 0)
 8008002:	2c00      	cmp	r4, #0
 8008004:	daf0      	bge.n	8007fe8 <Circle_Limitation+0x3c>
          new_q = -new_q;
 8008006:	4240      	negs	r0, r0
 8008008:	e7ee      	b.n	8007fe8 <Circle_Limitation+0x3c>
 800800a:	bf00      	nop

0800800c <EAC_Init>:
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pVSS = pVSS;
    pHandle->pENC = pENC;
    pHandle->EncAligned = false;
 800800c:	f04f 0c00 	mov.w	ip, #0
    pHandle->pVSS = pVSS;
 8008010:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pENC = pENC;
 8008014:	6083      	str	r3, [r0, #8]
    pHandle->EncAligned = false;
 8008016:	f8a0 c00e 	strh.w	ip, [r0, #14]
    pHandle->EncRestart = false;
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 800801a:	4770      	bx	lr

0800801c <EAC_StartAlignment>:
  * It configures the VSS (Virtual Speed Sensor) with the required angle and sets the
  * STC (Speed and Torque Controller) to execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak void EAC_StartAlignment(EncAlign_Handle_t *pHandle)
{
 800801c:	b510      	push	{r4, lr}
  {
#endif
    uint32_t wAux;

    /* Set pVSS mechanical speed to zero.*/
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 800801e:	2200      	movs	r2, #0
{
 8008020:	4604      	mov	r4, r0
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 8008022:	4611      	mov	r1, r2
 8008024:	6840      	ldr	r0, [r0, #4]
 8008026:	f001 fe49 	bl	8009cbc <VSS_SetMecAcceleration>

    /* Set pVSS mechanical angle.*/
    VSS_SetMecAngle(pHandle->pVSS, pHandle->hElAngle);
 800802a:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 800802e:	6860      	ldr	r0, [r4, #4]
 8008030:	f001 fe3c 	bl	8009cac <VSS_SetMecAngle>

    /* Set pSTC in MCM_TORQUE_MODE.*/
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8008034:	6820      	ldr	r0, [r4, #0]
 8008036:	2104      	movs	r1, #4
 8008038:	f001 fd9a 	bl	8009b70 <STC_SetControlMode>

    /* Set starting torque to Zero */
    (void)STC_ExecRamp(pHandle->pSTC, 0, 0U);
 800803c:	2200      	movs	r2, #0
 800803e:	4611      	mov	r1, r2
 8008040:	6820      	ldr	r0, [r4, #0]
 8008042:	f001 fd99 	bl	8009b78 <STC_ExecRamp>

    /* Execute the torque ramp.*/
    (void)STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, (uint32_t)pHandle->hDurationms);
 8008046:	8ae2      	ldrh	r2, [r4, #22]
 8008048:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 800804c:	6820      	ldr	r0, [r4, #0]
 800804e:	f001 fd93 	bl	8009b78 <STC_ExecRamp>
    /* Compute hRemainingTicks, the number of thick of alignment phase.*/
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8008052:	8ae3      	ldrh	r3, [r4, #22]
 8008054:	8a21      	ldrh	r1, [r4, #16]
    wAux /= 1000U;
 8008056:	4a04      	ldr	r2, [pc, #16]	; (8008068 <EAC_StartAlignment+0x4c>)
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8008058:	fb01 f303 	mul.w	r3, r1, r3
    wAux /= 1000U;
 800805c:	fba2 2303 	umull	r2, r3, r2, r3
 8008060:	099b      	lsrs	r3, r3, #6
    pHandle->hRemainingTicks = (uint16_t)wAux;
    pHandle->hRemainingTicks++;
 8008062:	3301      	adds	r3, #1
 8008064:	81a3      	strh	r3, [r4, #12]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8008066:	bd10      	pop	{r4, pc}
 8008068:	10624dd3 	.word	0x10624dd3

0800806c <EAC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingTicks > 0U)
 800806c:	8983      	ldrh	r3, [r0, #12]
 800806e:	b13b      	cbz	r3, 8008080 <EAC_Exec+0x14>
    {
      pHandle->hRemainingTicks--;
 8008070:	3b01      	subs	r3, #1
 8008072:	b29b      	uxth	r3, r3
{
 8008074:	b510      	push	{r4, lr}
 8008076:	4604      	mov	r4, r0
      pHandle->hRemainingTicks--;
 8008078:	8183      	strh	r3, [r0, #12]

      if (0U == pHandle->hRemainingTicks)
 800807a:	b11b      	cbz	r3, 8008084 <EAC_Exec+0x18>
        pHandle->EncAligned = true;
        retVal = true;
      }
      else
      {
        retVal = false;
 800807c:	2000      	movs	r0, #0
    }
#endif
  }

  return (retVal);
}
 800807e:	bd10      	pop	{r4, pc}
  bool retVal = true;
 8008080:	2001      	movs	r0, #1
}
 8008082:	4770      	bx	lr
        ENC_SetMecAngle(pHandle->pENC, pHandle->hElAngle / ((int16_t)pHandle->bElToMecRatio));
 8008084:	7e03      	ldrb	r3, [r0, #24]
 8008086:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 800808a:	6880      	ldr	r0, [r0, #8]
 800808c:	fb91 f1f3 	sdiv	r1, r1, r3
 8008090:	f000 f940 	bl	8008314 <ENC_SetMecAngle>
        pHandle->EncAligned = true;
 8008094:	2001      	movs	r0, #1
 8008096:	73a0      	strb	r0, [r4, #14]
}
 8008098:	bd10      	pop	{r4, pc}
 800809a:	bf00      	nop

0800809c <EAC_IsAligned>:
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  return ((NULL == pHandle) ? false : pHandle->EncAligned);
#else
  return (pHandle->EncAligned);
#endif
}
 800809c:	7b80      	ldrb	r0, [r0, #14]
 800809e:	4770      	bx	lr

080080a0 <EAC_SetRestartState>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->EncRestart = restart;
 80080a0:	73c1      	strb	r1, [r0, #15]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 80080a2:	4770      	bx	lr

080080a4 <ENC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;
 80080a4:	6a03      	ldr	r3, [r0, #32]
#endif
    /* Reset counter */
    LL_TIM_SetCounter(TIMx, 0);

    /*Calculations of convenience*/
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 80080a6:	f8b0 c06e 	ldrh.w	ip, [r0, #110]	; 0x6e
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
{
 80080b0:	b410      	push	{r4}
 80080b2:	601a      	str	r2, [r3, #0]
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 80080b4:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
 80080b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80080bc:	0052      	lsls	r2, r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 80080be:	2100      	movs	r1, #0
 80080c0:	6259      	str	r1, [r3, #36]	; 0x24
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 80080c2:	f04f 34ff 	mov.w	r4, #4294967295
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 80080c6:	6242      	str	r2, [r0, #36]	; 0x24
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 80080c8:	fbb4 f4fc 	udiv	r4, r4, ip
 80080cc:	6684      	str	r4, [r0, #104]	; 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80080ce:	699a      	ldr	r2, [r3, #24]

    /* Set IC filter for both channel 1 & 2*/
    LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ((uint32_t)pHandle->ICx_Filter << 20U));
 80080d0:	f890 4076 	ldrb.w	r4, [r0, #118]	; 0x76
 80080d4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80080d8:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 80080dc:	619a      	str	r2, [r3, #24]
 80080de:	699a      	ldr	r2, [r3, #24]
 80080e0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80080e4:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80080e8:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80080ec:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80080ee:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80080f0:	68da      	ldr	r2, [r3, #12]
 80080f2:	f042 0201 	orr.w	r2, r2, #1
 80080f6:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	f042 0201 	orr.w	r2, r2, #1
 80080fe:	601a      	str	r2, [r3, #0]

    /* Enable the counting timer*/
    LL_TIM_EnableCounter(TIMx);

    /* Erase speed buffer */
    bufferSize = pHandle->SpeedBufferSize;
 8008100:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74

    for (index = 0U; index < bufferSize; index++)
 8008104:	b12a      	cbz	r2, 8008112 <ENC_Init+0x6e>
      pHandle->DeltaCapturesBuffer[index] = 0;
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8008106:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->DeltaCapturesBuffer[index] = 0;
 800810a:	0092      	lsls	r2, r2, #2
 800810c:	3028      	adds	r0, #40	; 0x28
 800810e:	f001 be4f 	b.w	8009db0 <memset>
}
 8008112:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008116:	4770      	bx	lr

08008118 <ENC_Clear>:
  *         This function must be called before starting the motor to initialize
  *         the speed measurement process.
  * @param  pHandle: handler of the current instance of the encoder component
  */
__weak void ENC_Clear(ENCODER_Handle_t *pHandle)
{
 8008118:	b510      	push	{r4, lr}
  else
  {
#endif
    uint8_t index;

    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 800811a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
{
 800811e:	4604      	mov	r4, r0
    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8008120:	b122      	cbz	r2, 800812c <ENC_Clear+0x14>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 8008122:	0092      	lsls	r2, r2, #2
 8008124:	2100      	movs	r1, #0
 8008126:	3028      	adds	r0, #40	; 0x28
 8008128:	f001 fe42 	bl	8009db0 <memset>
    }
    pHandle->SensorIsReliable = true;
 800812c:	2301      	movs	r3, #1
 800812e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8008132:	bd10      	pop	{r4, pc}

08008134 <ENC_CalcAngle>:
  *         of the instantaneous value of the timer counter.
  * @param  pHandle: handler of the current instance of the encoder component
  * @retval Measured electrical angle in [s16degree](measurement_units.md) format.
  */
__weak int16_t ENC_CalcAngle(ENCODER_Handle_t *pHandle)
{
 8008134:	b410      	push	{r4}
    int16_t mecAngle; /* s16degree format */
    uint32_t uwtemp1;
    int32_t wtemp1;
    /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1
     if the overflow occurs just after the entry in the High frequency task */
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 8008136:	6a03      	ldr	r3, [r0, #32]
 8008138:	6e84      	ldr	r4, [r0, #104]	; 0x68
  return (uint32_t)(READ_REG(TIMx->CNT));
 800813a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    wtemp1 = (int32_t)uwtemp1 / 65536;
#endif
    /*Computes and stores the rotor mechanical angle*/
    mecAngle = (int16_t)wtemp1;

    int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 800813c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]

    pHandle->_Super.hMecAngle = mecAngle;

    /*Computes and stores the rotor electrical angle*/
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8008140:	7842      	ldrb	r2, [r0, #1]
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 8008142:	b29b      	uxth	r3, r3
 8008144:	fb04 f303 	mul.w	r3, r4, r3
    wtemp1 = (int32_t)uwtemp1 >> 16U;  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8008148:	141b      	asrs	r3, r3, #16
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 800814a:	fb03 f202 	mul.w	r2, r3, r2

    pHandle->_Super.hElAngle = elAngle;

    int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 800814e:	1a59      	subs	r1, r3, r1
    mecAngle = (int16_t)wtemp1;
 8008150:	80c3      	strh	r3, [r0, #6]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8008152:	6883      	ldr	r3, [r0, #8]
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  /*Returns rotor electrical angle*/
  return (elAngle);
}
 8008154:	f85d 4b04 	ldr.w	r4, [sp], #4
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8008158:	b212      	sxth	r2, r2
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 800815a:	fa03 f381 	sxtah	r3, r3, r1
    pHandle->_Super.hElAngle = elAngle;
 800815e:	8082      	strh	r2, [r0, #4]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8008160:	6083      	str	r3, [r0, #8]
}
 8008162:	4610      	mov	r0, r2
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop

08008168 <ENC_CalcAvrgMecSpeedUnit>:
  * @param  pMecSpeedUnit pointer used to return the rotor average mechanical speed
  *         expressed in the unit defined by #SPEED_UNIT
  * @retval true = sensor information is reliable. false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit(ENCODER_Handle_t *pHandle, int16_t *pMecSpeedUnit)
{
 8008168:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t wtemp2;
    uint32_t OverflowCntSample;
    uint32_t CntCapture;
    uint32_t directionSample;
    int32_t wOverallAngleVariation = 0;
    TIM_TypeDef *TIMx = pHandle->TIMx;
 800816a:	6a03      	ldr	r3, [r0, #32]
    uint8_t bBufferSize = pHandle->SpeedBufferSize;
 800816c:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008170:	68dc      	ldr	r4, [r3, #12]
 8008172:	f024 0401 	bic.w	r4, r4, #1
 8008176:	60dc      	str	r4, [r3, #12]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8008178:	6a5c      	ldr	r4, [r3, #36]	; 0x24
#ifdef TIM_CNT_UIFCPY
    /* disable Interrupt generation */
    LL_TIM_DisableIT_UPDATE(TIMx);
#endif
    CntCapture = LL_TIM_GetCounter(TIMx);
    OverflowCntSample = pHandle->TimerOverflowNb;
 800817a:	f8b0 5070 	ldrh.w	r5, [r0, #112]	; 0x70
    pHandle->TimerOverflowNb = 0;
    directionSample = LL_TIM_GetDirection(TIMx);
#ifdef TIM_CNT_UIFCPY
    OFbit = __LL_TIM_GETFLAG_UIFCPY(CntCapture);
    if (0U == OFbit)
 800817e:	0fe7      	lsrs	r7, r4, #31
    pHandle->TimerOverflowNb = 0;
 8008180:	f04f 0600 	mov.w	r6, #0
 8008184:	f8a0 6070 	strh.w	r6, [r0, #112]	; 0x70
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008188:	bf18      	it	ne
 800818a:	f06f 0c01 	mvnne.w	ip, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800818e:	681e      	ldr	r6, [r3, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008190:	bf18      	it	ne
 8008192:	f8c3 c010 	strne.w	ip, [r3, #16]
    OverflowCntSample = pHandle->TimerOverflowNb;
 8008196:	b2ad      	uxth	r5, r5
      into accout, we must not clear the interrupt in order to accumulate it */
      LL_TIM_ClearFlag_UPDATE(TIMx);
    }

    LL_TIM_EnableIT_UPDATE(TIMx);
    CLEAR_BIT(CntCapture, TIM_CNT_UIFCPY);
 8008198:	f024 4c00 	bic.w	ip, r4, #2147483648	; 0x80000000
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800819c:	68dc      	ldr	r4, [r3, #12]

    /* If UIFCPY is not present, OverflowCntSample can not be used safely for
    speed computation, but we still use it to check that we do not exceed one overflow
    (sample frequency not less than mechanical motor speed */

    if ((OverflowCntSample + OFbit) > ENC_MAX_OVERFLOW_NB)
 800819e:	443d      	add	r5, r7
 80081a0:	f044 0401 	orr.w	r4, r4, #1
 80081a4:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80081a8:	60dc      	str	r4, [r3, #12]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80081aa:	f006 0610 	and.w	r6, r6, #16
    {
      pHandle->TimerOverflowError = true;
 80081ae:	bf8a      	itet	hi
 80081b0:	2401      	movhi	r4, #1
    {
      /* nothing to do */
    }

    /*Checks the reliability status, then stores and returns it*/
    if (pHandle->TimerOverflowError)
 80081b2:	f890 4078 	ldrbls.w	r4, [r0, #120]	; 0x78
      pHandle->TimerOverflowError = true;
 80081b6:	f880 4078 	strbhi.w	r4, [r0, #120]	; 0x78
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
 80081ba:	2e00      	cmp	r6, #0
 80081bc:	f000 8093 	beq.w	80082e6 <ENC_CalcAvrgMecSpeedUnit+0x17e>
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80081c0:	f890 6077 	ldrb.w	r6, [r0, #119]	; 0x77
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 80081c4:	f8b0 3072 	ldrh.w	r3, [r0, #114]	; 0x72
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 80081c8:	f8b0 e06e 	ldrh.w	lr, [r0, #110]	; 0x6e
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80081cc:	360a      	adds	r6, #10
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 80081ce:	ebac 0303 	sub.w	r3, ip, r3
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 80081d2:	fb0e 3515 	mls	r5, lr, r5, r3
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80081d6:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80081da:	2a00      	cmp	r2, #0
 80081dc:	f000 8093 	beq.w	8008306 <ENC_CalcAvrgMecSpeedUnit+0x19e>
 80081e0:	2a01      	cmp	r2, #1
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80081e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80081e4:	d039      	beq.n	800825a <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80081e6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80081e8:	2a02      	cmp	r2, #2
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80081ea:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80081ec:	d035      	beq.n	800825a <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80081ee:	6b05      	ldr	r5, [r0, #48]	; 0x30
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80081f0:	2a03      	cmp	r2, #3
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80081f2:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80081f4:	d031      	beq.n	800825a <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80081f6:	6b45      	ldr	r5, [r0, #52]	; 0x34
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80081f8:	2a04      	cmp	r2, #4
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80081fa:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80081fc:	d02d      	beq.n	800825a <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80081fe:	6b85      	ldr	r5, [r0, #56]	; 0x38
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008200:	2a05      	cmp	r2, #5
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008202:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008204:	d029      	beq.n	800825a <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008206:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008208:	2a06      	cmp	r2, #6
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800820a:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800820c:	d025      	beq.n	800825a <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800820e:	6c05      	ldr	r5, [r0, #64]	; 0x40
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008210:	2a07      	cmp	r2, #7
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008212:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008214:	d021      	beq.n	800825a <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008216:	6c45      	ldr	r5, [r0, #68]	; 0x44
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008218:	2a08      	cmp	r2, #8
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800821a:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800821c:	d01d      	beq.n	800825a <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800821e:	6c85      	ldr	r5, [r0, #72]	; 0x48
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008220:	2a09      	cmp	r2, #9
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008222:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008224:	d019      	beq.n	800825a <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008226:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008228:	2a0a      	cmp	r2, #10
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800822a:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800822c:	d015      	beq.n	800825a <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800822e:	6d05      	ldr	r5, [r0, #80]	; 0x50
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008230:	2a0b      	cmp	r2, #11
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008232:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008234:	d011      	beq.n	800825a <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008236:	6d45      	ldr	r5, [r0, #84]	; 0x54
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008238:	2a0c      	cmp	r2, #12
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800823a:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800823c:	d00d      	beq.n	800825a <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800823e:	6d85      	ldr	r5, [r0, #88]	; 0x58
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008240:	2a0d      	cmp	r2, #13
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008242:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008244:	d009      	beq.n	800825a <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008246:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008248:	2a0e      	cmp	r2, #14
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800824a:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800824c:	d005      	beq.n	800825a <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800824e:	6e05      	ldr	r5, [r0, #96]	; 0x60
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008250:	2a0f      	cmp	r2, #15
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008252:	442b      	add	r3, r5
 8008254:	bf1c      	itt	ne
 8008256:	6e45      	ldrne	r5, [r0, #100]	; 0x64
 8008258:	195b      	addne	r3, r3, r5
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 800825a:	6a46      	ldr	r6, [r0, #36]	; 0x24
    wtemp2 = ((int32_t)pHandle->PulseNumber) * ((int32_t)pHandle->SpeedBufferSize);
 800825c:	fb0e f502 	mul.w	r5, lr, r2
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 8008260:	fb06 f303 	mul.w	r3, r6, r3
    wtemp1 = ((0 == wtemp2) ? wtemp1 : (wtemp1 / wtemp2));
 8008264:	b10d      	cbz	r5, 800826a <ENC_CalcAvrgMecSpeedUnit+0x102>
 8008266:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wtemp1;
 800826a:	b21e      	sxth	r6, r3
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 800826c:	b29b      	uxth	r3, r3
    *pMecSpeedUnit = (int16_t)wtemp1;
 800826e:	800e      	strh	r6, [r1, #0]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8008270:	f890 5077 	ldrb.w	r5, [r0, #119]	; 0x77
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8008274:	8987      	ldrh	r7, [r0, #12]
    pHandle->DeltaCapturesIndex++;
 8008276:	f890 e077 	ldrb.w	lr, [r0, #119]	; 0x77
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 800827a:	350a      	adds	r5, #10
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 800827c:	1bdb      	subs	r3, r3, r7
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 800827e:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8008282:	8243      	strh	r3, [r0, #18]
    pHandle->DeltaCapturesIndex++;
 8008284:	f10e 0e01 	add.w	lr, lr, #1
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8008288:	f8b0 306c 	ldrh.w	r3, [r0, #108]	; 0x6c
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wtemp1;
 800828c:	8186      	strh	r6, [r0, #12]
    pHandle->DeltaCapturesIndex++;
 800828e:	fa5f fe8e 	uxtb.w	lr, lr
 8008292:	f880 e077 	strb.w	lr, [r0, #119]	; 0x77
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8008296:	fb05 f303 	mul.w	r3, r5, r3
             * ((int32_t)pHandle->_Super.bElToMecRatio);
 800829a:	7845      	ldrb	r5, [r0, #1]
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 800829c:	f890 6077 	ldrb.w	r6, [r0, #119]	; 0x77
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 80082a0:	fb05 f303 	mul.w	r3, r5, r3
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 80082a4:	f64f 77fe 	movw	r7, #65534	; 0xfffe
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 80082a8:	69c5      	ldr	r5, [r0, #28]
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 80082aa:	f64f 7eff 	movw	lr, #65535	; 0xffff
 80082ae:	45bc      	cmp	ip, r7
 80082b0:	bf88      	it	hi
 80082b2:	46f4      	movhi	ip, lr
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 80082b4:	4296      	cmp	r6, r2
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 80082b6:	f8a0 c072 	strh.w	ip, [r0, #114]	; 0x72
    wtemp1 /= ((int32_t)pHandle->PulseNumber);
 80082ba:	f8b0 c06e 	ldrh.w	ip, [r0, #110]	; 0x6e
 80082be:	fb93 f3fc 	sdiv	r3, r3, ip
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 80082c2:	fb05 f303 	mul.w	r3, r5, r3
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 80082c6:	8b45      	ldrh	r5, [r0, #26]
 80082c8:	fb93 f3f5 	sdiv	r3, r3, r5
    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;
 80082cc:	81c3      	strh	r3, [r0, #14]
      pHandle->DeltaCapturesIndex = 0U;
 80082ce:	bf24      	itt	cs
 80082d0:	2300      	movcs	r3, #0
 80082d2:	f880 3077 	strbcs.w	r3, [r0, #119]	; 0x77
    if (pHandle->TimerOverflowError)
 80082d6:	b1cc      	cbz	r4, 800830c <ENC_CalcAvrgMecSpeedUnit+0x1a4>
    {
      bReliability = false;
      pHandle->SensorIsReliable = false;
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80082d8:	78c2      	ldrb	r2, [r0, #3]
 80082da:	7002      	strb	r2, [r0, #0]
      pHandle->SensorIsReliable = false;
 80082dc:	2300      	movs	r3, #0
 80082de:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  return (bReliability);
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80082e6:	f890 6077 	ldrb.w	r6, [r0, #119]	; 0x77
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 80082ea:	f8b0 3072 	ldrh.w	r3, [r0, #114]	; 0x72
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 80082ee:	f8b0 e06e 	ldrh.w	lr, [r0, #110]	; 0x6e
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80082f2:	360a      	adds	r6, #10
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 80082f4:	ebac 0303 	sub.w	r3, ip, r3
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 80082f8:	fb0e 3505 	mla	r5, lr, r5, r3
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80082fc:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008300:	2a00      	cmp	r2, #0
 8008302:	f47f af6d 	bne.w	80081e0 <ENC_CalcAvrgMecSpeedUnit+0x78>
 8008306:	4613      	mov	r3, r2
 8008308:	4616      	mov	r6, r2
 800830a:	e7b0      	b.n	800826e <ENC_CalcAvrgMecSpeedUnit+0x106>
}
 800830c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 8008310:	f001 bbc4 	b.w	8009a9c <SPD_IsMecSpeedReliable>

08008314 <ENC_SetMecAngle>:
    uint16_t hAngleCounts;
    uint16_t hMecAngleuint;
    int16_t localhMecAngle = hMecAngle;

    pHandle->_Super.hMecAngle = localhMecAngle;
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8008314:	7843      	ldrb	r3, [r0, #1]
    pHandle->_Super.hMecAngle = localhMecAngle;
 8008316:	80c1      	strh	r1, [r0, #6]
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8008318:	fb01 f303 	mul.w	r3, r1, r3
 800831c:	b28a      	uxth	r2, r1
    if (localhMecAngle < 0)
 800831e:	2900      	cmp	r1, #0
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8008320:	8083      	strh	r3, [r0, #4]
 8008322:	bfbc      	itt	lt
 8008324:	f102 33ff 	addlt.w	r3, r2, #4294967295
 8008328:	b29a      	uxthlt	r2, r3
    else
    {
      hMecAngleuint = (uint16_t)localhMecAngle;
    }

    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 800832a:	f8b0 306e 	ldrh.w	r3, [r0, #110]	; 0x6e
 800832e:	4906      	ldr	r1, [pc, #24]	; (8008348 <ENC_SetMecAngle+0x34>)
 8008330:	fb02 f303 	mul.w	r3, r2, r3
{
 8008334:	b410      	push	{r4}
    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8008336:	fba1 2303 	umull	r2, r3, r1, r3
    TIM_TypeDef *TIMx = pHandle->TIMx;
 800833a:	6a04      	ldr	r4, [r0, #32]
    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 800833c:	0bdb      	lsrs	r3, r3, #15

    TIMx->CNT = (uint16_t)hAngleCounts;
 800833e:	6263      	str	r3, [r4, #36]	; 0x24
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8008340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	80008001 	.word	0x80008001

0800834c <ENC_IRQHandler>:
/**
  * @brief  TIMER ENCODER Overflow interrupt counter update
  * @param  pHandleVoid: handler of the current instance of the encoder component
  */
__weak void *ENC_IRQHandler(void *pHandleVoid)
{
 800834c:	4602      	mov	r2, r0
  /*Updates the number of overflows occurred*/
  /* the handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1U;

  return (MC_NULL);
}
 800834e:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1U;
 8008350:	f8b2 3070 	ldrh.w	r3, [r2, #112]	; 0x70
 8008354:	3301      	adds	r3, #1
 8008356:	b29b      	uxth	r3, r3
 8008358:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
}
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop

08008360 <MCP_ReceivedPacket>:
#include "mc_config.h"
#include "mcp_config.h"
#include "mc_api.h"

void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8008360:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Nothing to do, txBuffer and txLength have not been modified */
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 8008362:	6845      	ldr	r5, [r0, #4]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8008364:	882a      	ldrh	r2, [r5, #0]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8008366:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800836a:	f022 0307 	bic.w	r3, r2, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 800836e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 8008372:	b083      	sub	sp, #12
 8008374:	4604      	mov	r4, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8008376:	b29b      	uxth	r3, r3
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8008378:	d04f      	beq.n	800841a <MCP_ReceivedPacket+0xba>
    }

    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);

    
    MCI_Handle_t *pMCI = &Mci[motorID];
 800837a:	4f59      	ldr	r7, [pc, #356]	; (80084e0 <MCP_ReceivedPacket+0x180>)
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 800837c:	3a01      	subs	r2, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 800837e:	f002 0207 	and.w	r2, r2, #7
    /* Removing MCP Header from RxBuffer*/
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8008382:	3502      	adds	r5, #2
    MCI_Handle_t *pMCI = &Mci[motorID];
 8008384:	eb07 1742 	add.w	r7, r7, r2, lsl #5
    /* Commands requiering payload response must be aware of space available for the payload*/
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8008388:	6822      	ldr	r2, [r4, #0]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 800838a:	6045      	str	r5, [r0, #4]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800838c:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 800838e:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8008392:	3802      	subs	r0, #2
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8008394:	f10c 3cff 	add.w	ip, ip, #4294967295
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8008398:	b280      	uxth	r0, r0
    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0;
 800839a:	2600      	movs	r6, #0

    switch (command)
 800839c:	2b38      	cmp	r3, #56	; 0x38
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800839e:	81a0      	strh	r0, [r4, #12]
    pHandle->txLength = 0;
 80083a0:	81e6      	strh	r6, [r4, #14]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80083a2:	fa1f f18c 	uxth.w	r1, ip
 80083a6:	fa0f f28c 	sxth.w	r2, ip
    switch (command)
 80083aa:	d829      	bhi.n	8008400 <MCP_ReceivedPacket+0xa0>
 80083ac:	2b38      	cmp	r3, #56	; 0x38
 80083ae:	d81e      	bhi.n	80083ee <MCP_ReceivedPacket+0x8e>
 80083b0:	e8df f003 	tbb	[pc, r3]
 80083b4:	1d1d1d5c 	.word	0x1d1d1d5c
 80083b8:	1d1d1d1d 	.word	0x1d1d1d1d
 80083bc:	1d1d1d64 	.word	0x1d1d1d64
 80083c0:	1d1d1d1d 	.word	0x1d1d1d1d
 80083c4:	1d1d1d57 	.word	0x1d1d1d57
 80083c8:	1d1d1d1d 	.word	0x1d1d1d1d
 80083cc:	1d1d1d4f 	.word	0x1d1d1d4f
 80083d0:	1d1d1d1d 	.word	0x1d1d1d1d
 80083d4:	1d1d1d49 	.word	0x1d1d1d49
 80083d8:	1d1d1d1d 	.word	0x1d1d1d1d
 80083dc:	1d1d1d69 	.word	0x1d1d1d69
 80083e0:	1d1d1d1d 	.word	0x1d1d1d1d
 80083e4:	1d1d1d45 	.word	0x1d1d1d45
 80083e8:	1d1d1d1d 	.word	0x1d1d1d1d
 80083ec:	74          	.byte	0x74
 80083ed:	00          	.byte	0x00
 80083ee:	2300      	movs	r3, #0
 80083f0:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80083f2:	68a2      	ldr	r2, [r4, #8]
 80083f4:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 80083f6:	89e3      	ldrh	r3, [r4, #14]
 80083f8:	3301      	adds	r3, #1
 80083fa:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 80083fc:	b003      	add	sp, #12
 80083fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 8008400:	2b68      	cmp	r3, #104	; 0x68
 8008402:	d062      	beq.n	80084ca <MCP_ReceivedPacket+0x16a>
 8008404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008408:	d068      	beq.n	80084dc <MCP_ReceivedPacket+0x17c>
 800840a:	2b48      	cmp	r3, #72	; 0x48
 800840c:	d1ef      	bne.n	80083ee <MCP_ReceivedPacket+0x8e>
        MCI_Clear_Iqdref(pMCI);
 800840e:	4638      	mov	r0, r7
 8008410:	f7f9 fa7a 	bl	8001908 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008414:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8008416:	4630      	mov	r0, r6
        break;
 8008418:	e7eb      	b.n	80083f2 <MCP_ReceivedPacket+0x92>
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800841a:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 800841c:	6822      	ldr	r2, [r4, #0]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800841e:	3802      	subs	r0, #2
      userCommand = (command >> 3) & 0x1f;
 8008420:	f3c3 03c7 	ubfx	r3, r3, #3, #8
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8008424:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8008426:	3502      	adds	r5, #2
    pHandle->txLength = 0;
 8008428:	2100      	movs	r1, #0
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 800842a:	f013 0f1e 	tst.w	r3, #30
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 800842e:	8992      	ldrh	r2, [r2, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8008430:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8008432:	6065      	str	r5, [r4, #4]
    pHandle->txLength = 0;
 8008434:	81e1      	strh	r1, [r4, #14]
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8008436:	d037      	beq.n	80084a8 <MCP_ReceivedPacket+0x148>
        MCPResponse = MCP_CMD_OK;
 8008438:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 800843a:	200d      	movs	r0, #13
 800843c:	e7d9      	b.n	80083f2 <MCP_ReceivedPacket+0x92>
        if (IDLE == MCI_GetSTMState(pMCI))
 800843e:	4638      	mov	r0, r7
 8008440:	f7f9 f99a 	bl	8001778 <MCI_GetSTMState>
 8008444:	b128      	cbz	r0, 8008452 <MCP_ReceivedPacket+0xf2>
          (void)MCI_StopMotor(pMCI);
 8008446:	4638      	mov	r0, r7
 8008448:	f7f9 f9b2 	bl	80017b0 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800844c:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_CMD_OK;
 800844e:	2000      	movs	r0, #0
 8008450:	e7cf      	b.n	80083f2 <MCP_ReceivedPacket+0x92>
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8008452:	4638      	mov	r0, r7
 8008454:	f7f9 f996 	bl	8001784 <MCI_StartMotor>
 8008458:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800845c:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 800845e:	b2c0      	uxtb	r0, r0
 8008460:	e7c7      	b.n	80083f2 <MCP_ReceivedPacket+0x92>
        MCPResponse = RI_GetRegCommandParser(pHandle, txSyncFreeSpace);
 8008462:	4620      	mov	r0, r4
 8008464:	f7fa fbd4 	bl	8002c10 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008468:	89e3      	ldrh	r3, [r4, #14]
        break;
 800846a:	e7c2      	b.n	80083f2 <MCP_ReceivedPacket+0x92>
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 800846c:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4;
 800846e:	2104      	movs	r1, #4
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8008470:	2201      	movs	r2, #1
        pHandle->txLength = 4;
 8008472:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8008474:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008476:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8008478:	2000      	movs	r0, #0
      break;
 800847a:	e7ba      	b.n	80083f2 <MCP_ReceivedPacket+0x92>
        MCPResponse = RI_SetRegCommandParser(pHandle, txSyncFreeSpace);
 800847c:	4620      	mov	r0, r4
 800847e:	f7fa f8ef 	bl	8002660 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008482:	89e3      	ldrh	r3, [r4, #14]
        break;
 8008484:	e7b5      	b.n	80083f2 <MCP_ReceivedPacket+0x92>
        if (RUN == MCI_GetSTMState(pMCI))
 8008486:	4638      	mov	r0, r7
 8008488:	f7f9 f976 	bl	8001778 <MCI_GetSTMState>
 800848c:	2806      	cmp	r0, #6
 800848e:	d1dd      	bne.n	800844c <MCP_ReceivedPacket+0xec>
          MCI_StopRamp(pMCI);
 8008490:	4638      	mov	r0, r7
 8008492:	f7f9 f9d1 	bl	8001838 <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008496:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8008498:	2000      	movs	r0, #0
 800849a:	e7aa      	b.n	80083f2 <MCP_ReceivedPacket+0x92>
        (void)MCI_FaultAcknowledged(pMCI);
 800849c:	4638      	mov	r0, r7
 800849e:	f7f9 f9a7 	bl	80017f0 <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80084a2:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80084a4:	2000      	movs	r0, #0
        break;
 80084a6:	e7a4      	b.n	80083f2 <MCP_ReceivedPacket+0x92>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80084a8:	3a01      	subs	r2, #1
      userCommand = (command >> 3) & 0x1f;
 80084aa:	f003 031f 	and.w	r3, r3, #31
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80084ae:	b212      	sxth	r2, r2
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 80084b0:	490c      	ldr	r1, [pc, #48]	; (80084e4 <MCP_ReceivedPacket+0x184>)
 80084b2:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
 80084b6:	2e00      	cmp	r6, #0
 80084b8:	d0be      	beq.n	8008438 <MCP_ReceivedPacket+0xd8>
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 80084ba:	68a3      	ldr	r3, [r4, #8]
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	4629      	mov	r1, r5
 80084c0:	f104 030e 	add.w	r3, r4, #14
 80084c4:	47b0      	blx	r6
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80084c6:	89e3      	ldrh	r3, [r4, #14]
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 80084c8:	e793      	b.n	80083f2 <MCP_ReceivedPacket+0x92>
  	    MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 80084ca:	68a3      	ldr	r3, [r4, #8]
 80084cc:	9300      	str	r3, [sp, #0]
 80084ce:	4629      	mov	r1, r5
 80084d0:	f104 030e 	add.w	r3, r4, #14
 80084d4:	f7f9 f8d4 	bl	8001680 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80084d8:	89e3      	ldrh	r3, [r4, #14]
        break;
 80084da:	e78a      	b.n	80083f2 <MCP_ReceivedPacket+0x92>
    switch (command)
 80084dc:	4633      	mov	r3, r6
 80084de:	e7e7      	b.n	80084b0 <MCP_ReceivedPacket+0x150>
 80084e0:	20000d90 	.word	0x20000d90
 80084e4:	20001f10 	.word	0x20001f10

080084e8 <MCPA_dataLog>:

uint32_t GLOBAL_TIMESTAMP = 0;
static void MCPA_stopDataLog (MCPA_Handle_t *pHandle);

void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 80084e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint8_t i;
    uint16_t *logValue16;
    uint32_t *logValue;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 80084ea:	7fc3      	ldrb	r3, [r0, #31]
 80084ec:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 80084f0:	429a      	cmp	r2, r3
{
 80084f2:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 80084f4:	d002      	beq.n	80084fc <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* nothing to log just waiting next call to MCPA_datalog*/
      pHandle->HFIndex++;
 80084f6:	3301      	adds	r3, #1
 80084f8:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 80084fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 80084fc:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 80084fe:	2300      	movs	r3, #0
 8008500:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8008502:	b1a5      	cbz	r5, 800852e <MCPA_dataLog+0x46>
 8008504:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8008506:	8ba2      	ldrh	r2, [r4, #28]
 8008508:	42aa      	cmp	r2, r5
 800850a:	d24e      	bcs.n	80085aa <MCPA_dataLog+0xc2>
 800850c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8008510:	2bfe      	cmp	r3, #254	; 0xfe
 8008512:	d066      	beq.n	80085e2 <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8008514:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8008518:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex + 2U,
 800851a:	8b22      	ldrh	r2, [r4, #24]
 800851c:	6820      	ldr	r0, [r4, #0]
 800851e:	3202      	adds	r2, #2
 8008520:	2309      	movs	r3, #9
 8008522:	6845      	ldr	r5, [r0, #4]
 8008524:	b292      	uxth	r2, r2
 8008526:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 8008528:	2300      	movs	r3, #0
 800852a:	8323      	strh	r3, [r4, #24]
}
 800852c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 800852e:	4601      	mov	r1, r0
 8008530:	2209      	movs	r2, #9
 8008532:	f851 0b14 	ldr.w	r0, [r1], #20
 8008536:	6803      	ldr	r3, [r0, #0]
 8008538:	4798      	blx	r3
 800853a:	b390      	cbz	r0, 80085a2 <MCPA_dataLog+0xba>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 800853c:	4b4b      	ldr	r3, [pc, #300]	; (800866c <MCPA_dataLog+0x184>)
 800853e:	6961      	ldr	r1, [r4, #20]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 8008544:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8008548:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer*/
 800854c:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 8008550:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 8008552:	4290      	cmp	r0, r2
          pHandle->bufferIndex = 4U;
 8008554:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 8008556:	d101      	bne.n	800855c <MCPA_dataLog+0x74>
 8008558:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 800855a:	e7d4      	b.n	8008506 <MCPA_dataLog+0x1e>
            pHandle->HFNumBuff = pHandle->HFNum;
 800855c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
            pHandle->MFNumBuff = pHandle->MFNum;
 8008560:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
            pHandle->HFRateBuff = pHandle->HFRate;
 8008564:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
            pHandle->MarkBuff = pHandle->Mark;
 8008568:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
            pHandle->HFNumBuff = pHandle->HFNum;
 800856c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8008570:	185a      	adds	r2, r3, r1
            pHandle->MFNumBuff = pHandle->MFNum;
 8008572:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8008576:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MFRateBuff = pHandle->MFRate;
 8008578:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
            pHandle->HFRateBuff = pHandle->HFRate;
 800857c:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8008580:	0092      	lsls	r2, r2, #2
            pHandle->MFRateBuff = pHandle->MFRate;
 8008582:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8008586:	83a3      	strh	r3, [r4, #28]
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8008588:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 800858c:	f001 fc02 	bl	8009d94 <memcpy>
          memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable, pHandle->HFNum+pHandle->MFNum); /* 1 size byte per ID*/
 8008590:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8008594:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8008598:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 800859c:	441a      	add	r2, r3
 800859e:	f001 fbf9 	bl	8009d94 <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 80085a2:	8b25      	ldrh	r5, [r4, #24]
 80085a4:	2d00      	cmp	r5, #0
 80085a6:	d1ad      	bne.n	8008504 <MCPA_dataLog+0x1c>
}
 80085a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80085aa:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
        logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 80085ae:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80085b0:	b36e      	cbz	r6, 800860e <MCPA_dataLog+0x126>
 80085b2:	68a2      	ldr	r2, [r4, #8]
 80085b4:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 80085b8:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80085ba:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80085be:	8800      	ldrh	r0, [r0, #0]
 80085c0:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 80085c4:	8b25      	ldrh	r5, [r4, #24]
 80085c6:	3502      	adds	r5, #2
 80085c8:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80085ca:	4563      	cmp	r3, ip
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 80085cc:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80085ce:	d1f4      	bne.n	80085ba <MCPA_dataLog+0xd2>
        if (pHandle->MFRateBuff < 254U)
 80085d0:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80085d4:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 80085d6:	2bfd      	cmp	r3, #253	; 0xfd
 80085d8:	4618      	mov	r0, r3
 80085da:	d91d      	bls.n	8008618 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80085dc:	4295      	cmp	r5, r2
 80085de:	d897      	bhi.n	8008510 <MCPA_dataLog+0x28>
}
 80085e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80085e2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80085e6:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 80085ea:	4418      	add	r0, r3
 80085ec:	4298      	cmp	r0, r3
 80085ee:	dd91      	ble.n	8008514 <MCPA_dataLog+0x2c>
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80085f0:	68a7      	ldr	r7, [r4, #8]
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 80085f2:	6926      	ldr	r6, [r4, #16]
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80085f4:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 80085f8:	6812      	ldr	r2, [r2, #0]
 80085fa:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80085fc:	1c5a      	adds	r2, r3, #1
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 80085fe:	5cf3      	ldrb	r3, [r6, r3]
 8008600:	441d      	add	r5, r3
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008602:	b2d3      	uxtb	r3, r2
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8008604:	b2ad      	uxth	r5, r5
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008606:	4283      	cmp	r3, r0
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8008608:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800860a:	dbf3      	blt.n	80085f4 <MCPA_dataLog+0x10c>
 800860c:	e782      	b.n	8008514 <MCPA_dataLog+0x2c>
        if (pHandle->MFRateBuff < 254U)
 800860e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 8008612:	28fd      	cmp	r0, #253	; 0xfd
 8008614:	f63f af71 	bhi.w	80084fa <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8008618:	f894 3020 	ldrb.w	r3, [r4, #32]
 800861c:	4283      	cmp	r3, r0
 800861e:	d007      	beq.n	8008630 <MCPA_dataLog+0x148>
            pHandle->MFIndex ++;
 8008620:	3301      	adds	r3, #1
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8008622:	8b25      	ldrh	r5, [r4, #24]
            pHandle->MFIndex ++;
 8008624:	f884 3020 	strb.w	r3, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8008628:	42aa      	cmp	r2, r5
 800862a:	f4ff af73 	bcc.w	8008514 <MCPA_dataLog+0x2c>
}
 800862e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008630:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 8008634:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 8008636:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008638:	42b7      	cmp	r7, r6
            pHandle->MFIndex = 0U;
 800863a:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800863e:	dd12      	ble.n	8008666 <MCPA_dataLog+0x17e>
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8008640:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008644:	f8d4 c010 	ldr.w	ip, [r4, #16]
              logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8008648:	8b25      	ldrh	r5, [r4, #24]
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 800864a:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008652:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008656:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008658:	441d      	add	r5, r3
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800865a:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800865c:	b2ad      	uxth	r5, r5
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800865e:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008660:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008662:	dbf2      	blt.n	800864a <MCPA_dataLog+0x162>
 8008664:	e7e0      	b.n	8008628 <MCPA_dataLog+0x140>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8008666:	8b25      	ldrh	r5, [r4, #24]
 8008668:	e7de      	b.n	8008628 <MCPA_dataLog+0x140>
 800866a:	bf00      	nop
 800866c:	20001fe4 	.word	0x20001fe4

08008670 <MCPA_flushDataLog>:
{
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->bufferIndex > 0) {  /* if buffer is allocated, we must send it*/
 8008670:	8b03      	ldrh	r3, [r0, #24]
 8008672:	b19b      	cbz	r3, 800869c <MCPA_flushDataLog+0x2c>
{
 8008674:	b570      	push	{r4, r5, r6, lr}
    if (pHandle->MFRateBuff == 254) /* In case of flush, we must respect the packet format to allow proper decoding */
 8008676:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800867a:	2afe      	cmp	r2, #254	; 0xfe
 800867c:	4604      	mov	r4, r0
 800867e:	d00e      	beq.n	800869e <MCPA_flushDataLog+0x2e>
      {
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
        {
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8008680:	6941      	ldr	r1, [r0, #20]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
        }
      }
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8008682:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8008686:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8008688:	8b22      	ldrh	r2, [r4, #24]
 800868a:	6820      	ldr	r0, [r4, #0]
 800868c:	3202      	adds	r2, #2
 800868e:	2309      	movs	r3, #9
 8008690:	6845      	ldr	r5, [r0, #4]
 8008692:	b292      	uxth	r2, r2
 8008694:	47a8      	blx	r5
    pHandle->bufferIndex = 0;
 8008696:	2300      	movs	r3, #0
 8008698:	8323      	strh	r3, [r4, #24]
  }   
}
 800869a:	bd70      	pop	{r4, r5, r6, pc}
 800869c:	4770      	bx	lr
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800869e:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80086a2:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 80086a6:	6941      	ldr	r1, [r0, #20]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80086a8:	4494      	add	ip, r2
 80086aa:	4562      	cmp	r2, ip
 80086ac:	dae9      	bge.n	8008682 <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 80086ae:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80086b0:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 80086b2:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 80086b6:	6800      	ldr	r0, [r0, #0]
 80086b8:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80086ba:	5ca8      	ldrb	r0, [r5, r2]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80086bc:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80086be:	4403      	add	r3, r0
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80086c0:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80086c2:	b29b      	uxth	r3, r3
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80086c4:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80086c6:	8323      	strh	r3, [r4, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80086c8:	dbf3      	blt.n	80086b2 <MCPA_flushDataLog+0x42>
 80086ca:	e7da      	b.n	8008682 <MCPA_flushDataLog+0x12>

080086cc <MCPA_cfgLog>:
  pHandle->HFIndex = 0;
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
}

uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 80086cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
    uint16_t newID, buffSize;
    uint8_t i;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 80086d0:	880f      	ldrh	r7, [r1, #0]
{
 80086d2:	4604      	mov	r4, r0

    if (buffSize == 0)
 80086d4:	2f00      	cmp	r7, #0
 80086d6:	d044      	beq.n	8008762 <MCPA_cfgLog+0x96>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 80086d8:	6803      	ldr	r3, [r0, #0]
 80086da:	89db      	ldrh	r3, [r3, #14]
 80086dc:	42bb      	cmp	r3, r7
 80086de:	d33d      	bcc.n	800875c <MCPA_cfgLog+0x90>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 80086e0:	788b      	ldrb	r3, [r1, #2]
 80086e2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 80086e6:	78ca      	ldrb	r2, [r1, #3]
 80086e8:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 80086ec:	790b      	ldrb	r3, [r1, #4]
 80086ee:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 80086f2:	794e      	ldrb	r6, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/

      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 80086f4:	7f83      	ldrb	r3, [r0, #30]
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 80086f6:	f880 6027 	strb.w	r6, [r0, #39]	; 0x27
      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 80086fa:	4416      	add	r6, r2
 80086fc:	429e      	cmp	r6, r3
 80086fe:	dc52      	bgt.n	80087a6 <MCPA_cfgLog+0xda>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/
 8008700:	3106      	adds	r1, #6
      {
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8008702:	2e00      	cmp	r6, #0
 8008704:	d056      	beq.n	80087b4 <MCPA_cfgLog+0xe8>
 8008706:	2500      	movs	r5, #0
 8008708:	4688      	mov	r8, r1
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
 800870a:	462e      	mov	r6, r5
 800870c:	e011      	b.n	8008732 <MCPA_cfgLog+0x66>
      {
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
         /* HF Data are fixed to 2 bytes*/
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 800870e:	68e3      	ldr	r3, [r4, #12]
 8008710:	5558      	strb	r0, [r3, r5]
        pCfgData++;/* Point to the next UID */
        pCfgData++;
         logSize = logSize+pHandle->dataSizeTable[i];
 8008712:	68e2      	ldr	r2, [r4, #12]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8008714:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8008718:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
         logSize = logSize+pHandle->dataSizeTable[i];
 800871c:	5d52      	ldrb	r2, [r2, r5]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 800871e:	f105 0c01 	add.w	ip, r5, #1
 8008722:	fa5f f58c 	uxtb.w	r5, ip
 8008726:	4403      	add	r3, r0
         logSize = logSize+pHandle->dataSizeTable[i];
 8008728:	4432      	add	r2, r6
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 800872a:	429d      	cmp	r5, r3
        pCfgData++;
 800872c:	4641      	mov	r1, r8
         logSize = logSize+pHandle->dataSizeTable[i];
 800872e:	b296      	uxth	r6, r2
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8008730:	da11      	bge.n	8008756 <MCPA_cfgLog+0x8a>
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
 8008732:	f838 9b02 	ldrh.w	r9, [r8], #2
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
 8008736:	6861      	ldr	r1, [r4, #4]
 8008738:	4648      	mov	r0, r9
 800873a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800873e:	f7fa fe01 	bl	8003344 <RI_GetPtrReg>
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 8008742:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8008746:	42ab      	cmp	r3, r5
 8008748:	f04f 0002 	mov.w	r0, #2
 800874c:	d8df      	bhi.n	800870e <MCPA_cfgLog+0x42>
 800874e:	4648      	mov	r0, r9
 8008750:	f7fa fdec 	bl	800332c <RI_GetIDSize>
 8008754:	e7db      	b.n	800870e <MCPA_cfgLog+0x42>
      }

     /*smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp*/
     if (buffSize < (logSize + 2U + 4U))
 8008756:	1db3      	adds	r3, r6, #6
 8008758:	429f      	cmp	r7, r3
 800875a:	d21a      	bcs.n	8008792 <MCPA_cfgLog+0xc6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 800875c:	2009      	movs	r0, #9
      }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return result;
}
 800875e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8008762:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0;
 8008764:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8008768:	b153      	cbz	r3, 8008780 <MCPA_cfgLog+0xb4>
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 800876a:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 800876c:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8008770:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8008772:	8b22      	ldrh	r2, [r4, #24]
 8008774:	6820      	ldr	r0, [r4, #0]
 8008776:	3202      	adds	r2, #2
 8008778:	6845      	ldr	r5, [r0, #4]
 800877a:	b292      	uxth	r2, r2
 800877c:	2309      	movs	r3, #9
 800877e:	47a8      	blx	r5
  pHandle->bufferIndex = 0;
 8008780:	2000      	movs	r0, #0
  pHandle->MarkBuff = 0;
 8008782:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  pHandle->HFIndex = 0;
 8008786:	77e0      	strb	r0, [r4, #31]
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
 8008788:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
  pHandle->bufferIndex = 0;
 800878c:	8320      	strh	r0, [r4, #24]
}
 800878e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       pHandle->bufferTxTrigger = buffSize-logSize-2U; /* 2 is required to add the last Mark byte and NUL ASYNCID */
 8008792:	1eba      	subs	r2, r7, #2
 8008794:	1b92      	subs	r2, r2, r6
 8008796:	8362      	strh	r2, [r4, #26]
       pHandle->Mark = *((uint8_t *) pCfgData);
 8008798:	780b      	ldrb	r3, [r1, #0]
 800879a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
       if (0U == pHandle->Mark)
 800879e:	b12b      	cbz	r3, 80087ac <MCPA_cfgLog+0xe0>
  uint8_t result = MCP_CMD_OK;
 80087a0:	2000      	movs	r0, #0
}
 80087a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       result = MCP_ERROR_BAD_RAW_FORMAT;
 80087a6:	200a      	movs	r0, #10
}
 80087a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 80087ac:	8b23      	ldrh	r3, [r4, #24]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d0e6      	beq.n	8008780 <MCPA_cfgLog+0xb4>
 80087b2:	e7da      	b.n	800876a <MCPA_cfgLog+0x9e>
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 80087b4:	2306      	movs	r3, #6
 80087b6:	e7cf      	b.n	8008758 <MCPA_cfgLog+0x8c>

080087b8 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 80087b8:	8a03      	ldrh	r3, [r0, #16]
 80087ba:	8b42      	ldrh	r2, [r0, #26]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d306      	bcc.n	80087ce <NTC_SetFaultState+0x16>
    {
      hFault = MC_OVER_TEMP;
    }
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 80087c0:	8b82      	ldrh	r2, [r0, #28]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d901      	bls.n	80087ca <NTC_SetFaultState+0x12>
    {
      hFault = MC_NO_ERROR;
 80087c6:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return hFault;
}
 80087c8:	4770      	bx	lr
      hFault = pHandle->hFaultState;
 80087ca:	8ac0      	ldrh	r0, [r0, #22]
 80087cc:	4770      	bx	lr
      hFault = MC_OVER_TEMP;
 80087ce:	2008      	movs	r0, #8
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop

080087d4 <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 80087d4:	2300      	movs	r3, #0
 80087d6:	8203      	strh	r3, [r0, #16]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop

080087dc <NTC_Init>:
{
 80087dc:	b510      	push	{r4, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 80087de:	7803      	ldrb	r3, [r0, #0]
{
 80087e0:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 80087e2:	b123      	cbz	r3, 80087ee <NTC_Init+0x12>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80087e4:	8a43      	ldrh	r3, [r0, #18]
 80087e6:	8203      	strh	r3, [r0, #16]
      pHandle->hFaultState = MC_NO_ERROR;
 80087e8:	2200      	movs	r2, #0
 80087ea:	82c2      	strh	r2, [r0, #22]
}
 80087ec:	bd10      	pop	{r4, pc}
      pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 80087ee:	3004      	adds	r0, #4
 80087f0:	f7fa fe38 	bl	8003464 <RCM_RegisterRegConv>
 80087f4:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
      NTC_Clear(pHandle);
 80087f8:	4620      	mov	r0, r4
 80087fa:	f7ff ffeb 	bl	80087d4 <NTC_Clear>
}
 80087fe:	bd10      	pop	{r4, pc}

08008800 <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle)
{
 8008800:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8008802:	7803      	ldrb	r3, [r0, #0]
{
 8008804:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8008806:	b113      	cbz	r3, 800880e <NTC_CalcAvTemp+0xe>

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
    }
    else  /* case VIRTUAL_SENSOR */
    {
      pHandle->hFaultState = MC_NO_ERROR;
 8008808:	2000      	movs	r0, #0
 800880a:	82e0      	strh	r0, [r4, #22]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 800880c:	bd10      	pop	{r4, pc}
      hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800880e:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8008812:	f7fa ff0f 	bl	8003634 <RCM_ExecRegularConv>
      if (0xFFFFU == hAux)
 8008816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800881a:	4298      	cmp	r0, r3
 800881c:	d007      	beq.n	800882e <NTC_CalcAvTemp+0x2e>
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 800881e:	8b23      	ldrh	r3, [r4, #24]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 8008820:	8a22      	ldrh	r2, [r4, #16]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8008822:	1e59      	subs	r1, r3, #1
        wtemp += hAux;
 8008824:	fb01 0002 	mla	r0, r1, r2, r0
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 8008828:	fbb0 f0f3 	udiv	r0, r0, r3
        pHandle->hAvTemp_d = (uint16_t)wtemp;
 800882c:	8220      	strh	r0, [r4, #16]
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 800882e:	4620      	mov	r0, r4
 8008830:	f7ff ffc2 	bl	80087b8 <NTC_SetFaultState>
 8008834:	82e0      	strh	r0, [r4, #22]
}
 8008836:	bd10      	pop	{r4, pc}

08008838 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8008838:	7803      	ldrb	r3, [r0, #0]
 800883a:	b95b      	cbnz	r3, 8008854 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 800883c:	8a02      	ldrh	r2, [r0, #16]
      wTemp -= ((int32_t)pHandle->wV0);
 800883e:	6a01      	ldr	r1, [r0, #32]
      wTemp *= pHandle->hSensitivity;
 8008840:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8008844:	8c80      	ldrh	r0, [r0, #36]	; 0x24
      wTemp -= ((int32_t)pHandle->wV0);
 8008846:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 8008848:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 800884c:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8008850:	b200      	sxth	r0, r0
 8008852:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 8008854:	8a80      	ldrh	r0, [r0, #20]
}
 8008856:	b200      	sxth	r0, r0
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop

0800885c <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 800885c:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 800885e:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8008860:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8008862:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8008864:	8442      	strh	r2, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 8008866:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8008868:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800886a:	4770      	bx	lr

0800886c <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 800886c:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800886e:	4770      	bx	lr

08008870 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8008870:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008872:	4770      	bx	lr

08008874 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 8008874:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop

0800887c <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 800887c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop

08008884 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8008884:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8008886:	4770      	bx	lr

08008888 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 8008888:	8b80      	ldrh	r0, [r0, #28]
 800888a:	4770      	bx	lr

0800888c <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 800888c:	2301      	movs	r3, #1
 800888e:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8008890:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8008892:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop

08008898 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8008898:	8bc0      	ldrh	r0, [r0, #30]
 800889a:	4770      	bx	lr

0800889c <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 800889c:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800889e:	4770      	bx	lr

080088a0 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 80088a0:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80088a2:	4770      	bx	lr

080088a4 <PID_SetKIDivisorPOW2>:
{
 80088a4:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 80088a6:	2301      	movs	r3, #1
{
 80088a8:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 80088aa:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 80088ac:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80088b0:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 80088b2:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 80088b4:	8343      	strh	r3, [r0, #26]
{
 80088b6:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 80088b8:	f7ff fff2 	bl	80088a0 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 80088bc:	4902      	ldr	r1, [pc, #8]	; (80088c8 <PID_SetKIDivisorPOW2+0x24>)
 80088be:	4628      	mov	r0, r5
 80088c0:	40a1      	lsls	r1, r4
 80088c2:	f7ff ffeb 	bl	800889c <PID_SetLowerIntegralTermLimit>
}
 80088c6:	bd38      	pop	{r3, r4, r5, pc}
 80088c8:	ffff8001 	.word	0xffff8001

080088cc <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 80088cc:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80088ce:	4770      	bx	lr

080088d0 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 80088d0:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop

080088d8 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 80088d8:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 80088da:	4770      	bx	lr

080088dc <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 80088dc:	2301      	movs	r3, #1
 80088de:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 80088e0:	84c1      	strh	r1, [r0, #38]	; 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 80088e2:	8483      	strh	r3, [r0, #36]	; 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop

080088e8 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80088e8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 80088ec:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 80088f0:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
{
 80088f4:	b510      	push	{r4, lr}
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80088f6:	fb01 f303 	mul.w	r3, r1, r3
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 80088fa:	f9b0 e016 	ldrsh.w	lr, [r0, #22]
    if (0 == pHandle->hKiGain)
 80088fe:	b162      	cbz	r2, 800891a <PI_Controller+0x32>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8008900:	fb01 f202 	mul.w	r2, r1, r2
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8008904:	6881      	ldr	r1, [r0, #8]

      if (wIntegral_sum_temp < 0)
 8008906:	188c      	adds	r4, r1, r2
 8008908:	d420      	bmi.n	800894c <PI_Controller+0x64>
          /* Nothing to do */
        }
      }
      else
      {
        if (pHandle->wIntegralTerm < 0)
 800890a:	2900      	cmp	r1, #0
 800890c:	db2a      	blt.n	8008964 <PI_Controller+0x7c>
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800890e:	68c2      	ldr	r2, [r0, #12]
 8008910:	42a2      	cmp	r2, r4
 8008912:	db02      	blt.n	800891a <PI_Controller+0x32>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8008914:	6902      	ldr	r2, [r0, #16]
 8008916:	42a2      	cmp	r2, r4
 8008918:	dd22      	ble.n	8008960 <PI_Controller+0x78>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 800891a:	8b81      	ldrh	r1, [r0, #28]
 800891c:	410b      	asrs	r3, r1
 800891e:	8bc1      	ldrh	r1, [r0, #30]
 8008920:	fa42 f101 	asr.w	r1, r2, r1
 8008924:	440b      	add	r3, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8008926:	459c      	cmp	ip, r3
 8008928:	da05      	bge.n	8008936 <PI_Controller+0x4e>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 800892a:	ebac 0303 	sub.w	r3, ip, r3
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 800892e:	441a      	add	r2, r3
 8008930:	6082      	str	r2, [r0, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8008932:	4660      	mov	r0, ip
 8008934:	bd10      	pop	{r4, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8008936:	459e      	cmp	lr, r3
      wDischarge = hLowerOutputLimit - wOutput_32;
 8008938:	bfc9      	itett	gt
 800893a:	ebae 0303 	subgt.w	r3, lr, r3
    returnValue = (int16_t)wOutput_32;
 800893e:	fa0f fc83 	sxthle.w	ip, r3
    pHandle->wIntegralTerm += wDischarge;
 8008942:	18d2      	addgt	r2, r2, r3
 8008944:	46f4      	movgt	ip, lr
 8008946:	6082      	str	r2, [r0, #8]
}
 8008948:	4660      	mov	r0, ip
 800894a:	bd10      	pop	{r4, pc}
        if (pHandle->wIntegralTerm > 0)
 800894c:	2900      	cmp	r1, #0
 800894e:	ddde      	ble.n	800890e <PI_Controller+0x26>
          if (wIntegral_Term > 0)
 8008950:	2a00      	cmp	r2, #0
 8008952:	dddc      	ble.n	800890e <PI_Controller+0x26>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8008954:	68c2      	ldr	r2, [r0, #12]
 8008956:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800895a:	428a      	cmp	r2, r1
 800895c:	d1dd      	bne.n	800891a <PI_Controller+0x32>
            wIntegral_sum_temp = INT32_MAX;
 800895e:	4614      	mov	r4, r2
 8008960:	4622      	mov	r2, r4
 8008962:	e7da      	b.n	800891a <PI_Controller+0x32>
            wIntegral_sum_temp = -INT32_MAX;
 8008964:	4902      	ldr	r1, [pc, #8]	; (8008970 <PI_Controller+0x88>)
 8008966:	ea34 0422 	bics.w	r4, r4, r2, asr #32
 800896a:	bf28      	it	cs
 800896c:	460c      	movcs	r4, r1
 800896e:	e7ce      	b.n	800890e <PI_Controller+0x26>
 8008970:	80000001 	.word	0x80000001

08008974 <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8008974:	6882      	ldr	r2, [r0, #8]
{
 8008976:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8008978:	89d1      	ldrh	r1, [r2, #14]
 800897a:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 800897e:	8993      	ldrh	r3, [r2, #12]
 8008980:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8008984:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 8008988:	fb13 230c 	smlabb	r3, r3, ip, r2
 800898c:	2b00      	cmp	r3, #0

    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 800898e:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 8008992:	bfbc      	itt	lt
 8008994:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8008998:	33ff      	addlt	r3, #255	; 0xff
    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 800899a:	ebc2 4323 	rsb	r3, r2, r3, asr #16
 800899e:	eb02 1323 	add.w	r3, r2, r3, asr #4
 80089a2:	8003      	strh	r3, [r0, #0]

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
}
 80089a4:	f85d fb04 	ldr.w	pc, [sp], #4

080089a8 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 80089a8:	2300      	movs	r3, #0
 80089aa:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop

080089b0 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float The average measured motor power expressed in Watts.
  */
__weak float PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 80089b0:	b538      	push	{r3, r4, r5, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 80089b2:	f9b0 5000 	ldrsh.w	r5, [r0]
{
 80089b6:	4604      	mov	r4, r0
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 80089b8:	68c0      	ldr	r0, [r0, #12]
 80089ba:	f7ff faf1 	bl	8007fa0 <VBS_GetAvBusVoltage_V>
 80089be:	fb05 f300 	mul.w	r3, r5, r0
 80089c2:	ee00 3a10 	vmov	s0, r3
 80089c6:	edd4 7a01 	vldr	s15, [r4, #4]
 80089ca:	eeb8 0ac0 	vcvt.f32.s32	s0, s0

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 80089ce:	ee20 0a27 	vmul.f32	s0, s0, s15
 80089d2:	bd38      	pop	{r3, r4, r5, pc}

080089d4 <startTimers>:
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 80089d4:	b430      	push	{r4, r5}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 80089d6:	4b18      	ldr	r3, [pc, #96]	; (8008a38 <startTimers+0x64>)
 80089d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80089da:	07d2      	lsls	r2, r2, #31
 80089dc:	b082      	sub	sp, #8
 80089de:	d415      	bmi.n	8008a0c <startTimers+0x38>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80089e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80089e2:	f042 0201 	orr.w	r2, r2, #1
 80089e6:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80089e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80089ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80089ee:	f002 0201 	and.w	r2, r2, #1
 80089f2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80089f4:	9a01      	ldr	r2, [sp, #4]
 80089f6:	694a      	ldr	r2, [r1, #20]
 80089f8:	f042 0201 	orr.w	r2, r2, #1
 80089fc:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80089fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008a00:	f022 0201 	bic.w	r2, r2, #1
 8008a04:	659a      	str	r2, [r3, #88]	; 0x58
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 8008a06:	b002      	add	sp, #8
 8008a08:	bc30      	pop	{r4, r5}
 8008a0a:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8008a0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008a10:	4c0a      	ldr	r4, [pc, #40]	; (8008a3c <startTimers+0x68>)
 8008a12:	685a      	ldr	r2, [r3, #4]
 8008a14:	6859      	ldr	r1, [r3, #4]
 8008a16:	4d0a      	ldr	r5, [pc, #40]	; (8008a40 <startTimers+0x6c>)
 8008a18:	4021      	ands	r1, r4
 8008a1a:	f041 0120 	orr.w	r1, r1, #32
 8008a1e:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008a20:	6958      	ldr	r0, [r3, #20]
 8008a22:	f040 0001 	orr.w	r0, r0, #1
 8008a26:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008a28:	6859      	ldr	r1, [r3, #4]
 8008a2a:	402a      	ands	r2, r5
 8008a2c:	4021      	ands	r1, r4
 8008a2e:	430a      	orrs	r2, r1
 8008a30:	605a      	str	r2, [r3, #4]
}
 8008a32:	b002      	add	sp, #8
 8008a34:	bc30      	pop	{r4, r5}
 8008a36:	4770      	bx	lr
 8008a38:	40021000 	.word	0x40021000
 8008a3c:	fdffff8f 	.word	0xfdffff8f
 8008a40:	02000070 	.word	0x02000070

08008a44 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8008a44:	3201      	adds	r2, #1
{
 8008a46:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8008a48:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8008a4a:	f06f 0602 	mvn.w	r6, #2
 8008a4e:	0155      	lsls	r5, r2, #5
 8008a50:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8008a52:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 8008a54:	f893 c000 	ldrb.w	ip, [r3]
 8008a58:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 8008a5c:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8008a60:	d80c      	bhi.n	8008a7c <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8008a62:	6904      	ldr	r4, [r0, #16]
 8008a64:	07a4      	lsls	r4, r4, #30
 8008a66:	d5f5      	bpl.n	8008a54 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8008a68:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8008a6c:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8008a6e:	6106      	str	r6, [r0, #16]
 8008a70:	d8f0      	bhi.n	8008a54 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8008a72:	781c      	ldrb	r4, [r3, #0]
 8008a74:	2c0f      	cmp	r4, #15
 8008a76:	d8ed      	bhi.n	8008a54 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_POW_COM
  }
#endif
  }
 8008a7c:	bd70      	pop	{r4, r5, r6, pc}
 8008a7e:	bf00      	nop

08008a80 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008a80:	6883      	ldr	r3, [r0, #8]
 8008a82:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008a86:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008a8a:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008a8c:	6883      	ldr	r3, [r0, #8]
 8008a8e:	00d9      	lsls	r1, r3, #3
/*
  * @brief Initializes @p ADCx peripheral for current sensing.
  * 
  */
static void R3_2_ADCxInit(ADC_TypeDef *ADCx)
{
 8008a90:	b082      	sub	sp, #8
 8008a92:	d418      	bmi.n	8008ac6 <R3_2_ADCxInit+0x46>
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
                                         * (SystemCoreClock / (100000UL * 2UL)));
 8008a94:	4b24      	ldr	r3, [pc, #144]	; (8008b28 <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 8008a96:	6882      	ldr	r2, [r0, #8]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4924      	ldr	r1, [pc, #144]	; (8008b2c <R3_2_ADCxInit+0xac>)
 8008a9c:	099b      	lsrs	r3, r3, #6
 8008a9e:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8008aa2:	fba1 1303 	umull	r1, r3, r1, r3
 8008aa6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8008aaa:	099b      	lsrs	r3, r3, #6
 8008aac:	005b      	lsls	r3, r3, #1
 8008aae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008ab2:	6082      	str	r2, [r0, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 8008ab4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008ab6:	9b01      	ldr	r3, [sp, #4]
 8008ab8:	b12b      	cbz	r3, 8008ac6 <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 8008aba:	9b01      	ldr	r3, [sp, #4]
 8008abc:	3b01      	subs	r3, #1
 8008abe:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008ac0:	9b01      	ldr	r3, [sp, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1f9      	bne.n	8008aba <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 8008ac6:	6883      	ldr	r3, [r0, #8]
 8008ac8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008acc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008ad0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ad4:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008ad6:	6883      	ldr	r3, [r0, #8]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	dbfc      	blt.n	8008ad6 <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8008adc:	6803      	ldr	r3, [r0, #0]
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0
  * following a calibration phase, could have no effect on ADC
  * within certain AHB/ADC clock ratio.
  */
  while (0U == LL_ADC_IsActiveFlag_ADRDY(ADCx))
 8008ade:	07da      	lsls	r2, r3, #31
 8008ae0:	d408      	bmi.n	8008af4 <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 8008ae2:	4a13      	ldr	r2, [pc, #76]	; (8008b30 <R3_2_ADCxInit+0xb0>)
 8008ae4:	6883      	ldr	r3, [r0, #8]
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	f043 0301 	orr.w	r3, r3, #1
 8008aec:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8008aee:	6803      	ldr	r3, [r0, #0]
 8008af0:	07db      	lsls	r3, r3, #31
 8008af2:	d5f7      	bpl.n	8008ae4 <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 8008af4:	6882      	ldr	r2, [r0, #8]
 8008af6:	490e      	ldr	r1, [pc, #56]	; (8008b30 <R3_2_ADCxInit+0xb0>)
 8008af8:	400a      	ands	r2, r1
 8008afa:	f042 0208 	orr.w	r2, r2, #8
 8008afe:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8008b00:	6882      	ldr	r2, [r0, #8]
 8008b02:	400a      	ands	r2, r1
 8008b04:	f042 0220 	orr.w	r2, r2, #32
 8008b08:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8008b0a:	68c3      	ldr	r3, [r0, #12]
 8008b0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b18:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 8008b1a:	6883      	ldr	r3, [r0, #8]
 8008b1c:	400b      	ands	r3, r1
 8008b1e:	f043 0304 	orr.w	r3, r3, #4
 8008b22:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode(ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY);

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
}
 8008b24:	b002      	add	sp, #8
 8008b26:	4770      	bx	lr
 8008b28:	20000434 	.word	0x20000434
 8008b2c:	053e2d63 	.word	0x053e2d63
 8008b30:	7fffffc0 	.word	0x7fffffc0

08008b34 <R3_2_GetPhaseCurrents>:
  * @brief  Computes and stores in @p pHdl handler the latest converted motor phase currents in @p Iab ab_t format.
  *
  */
__weak void R3_2_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8008b34:	b1d9      	cbz	r1, 8008b6e <R3_2_GetPhaseCurrents+0x3a>
  {
    int32_t Aux;
    uint32_t ADCDataReg1;
    uint32_t ADCDataReg2;
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008b36:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
 8008b3a:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
{
 8008b3e:	b470      	push	{r4, r5, r6}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008b40:	689c      	ldr	r4, [r3, #8]
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 8008b42:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008b46:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 8008b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 8008b4a:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 8008b4e:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008b52:	6863      	ldr	r3, [r4, #4]
 8008b54:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b5c:	6063      	str	r3, [r4, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    switch (Sector)
 8008b5e:	2a05      	cmp	r2, #5
 8008b60:	f200 80a0 	bhi.w	8008ca4 <R3_2_GetPhaseCurrents+0x170>
 8008b64:	e8df f002 	tbb	[pc, r2]
 8008b68:	043b3b1d 	.word	0x043b3b1d
 8008b6c:	1d04      	.short	0x1d04
 8008b6e:	4770      	bx	lr
      case SECTOR_4:
      case SECTOR_5:
      {
        /* Current on Phase C is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8008b70:	6f04      	ldr	r4, [r0, #112]	; 0x70

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 8008b72:	4b50      	ldr	r3, [pc, #320]	; (8008cb4 <R3_2_GetPhaseCurrents+0x180>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8008b74:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8008b76:	429c      	cmp	r4, r3
 8008b78:	db05      	blt.n	8008b86 <R3_2_GetPhaseCurrents+0x52>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 8008b7a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008b7e:	f2c0 808f 	blt.w	8008ca0 <R3_2_GetPhaseCurrents+0x16c>
        {
          Iab->a = INT16_MAX;
 8008b82:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8008b86:	800b      	strh	r3, [r1, #0]
        {
          Iab->a = (int16_t)Aux;
        }

        /* Ib = PhaseBOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8008b88:	6f42      	ldr	r2, [r0, #116]	; 0x74

        /* Saturation of Ib */
        if (Aux < -INT16_MAX)
 8008b8a:	4d4a      	ldr	r5, [pc, #296]	; (8008cb4 <R3_2_GetPhaseCurrents+0x180>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8008b8c:	1b92      	subs	r2, r2, r6
        if (Aux < -INT16_MAX)
 8008b8e:	42aa      	cmp	r2, r5
 8008b90:	da5d      	bge.n	8008c4e <R3_2_GetPhaseCurrents+0x11a>

      default:
        break;
    }

    pHandle->_Super.Ia = Iab->a;
 8008b92:	f9b1 c000 	ldrsh.w	ip, [r1]
          Iab->b = -INT16_MAX;
 8008b96:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008b98:	fa1f f38c 	uxth.w	r3, ip
 8008b9c:	f248 0201 	movw	r2, #32769	; 0x8001
 8008ba0:	e013      	b.n	8008bca <R3_2_GetPhaseCurrents+0x96>
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8008ba2:	6f44      	ldr	r4, [r0, #116]	; 0x74
        if (Aux < -INT16_MAX)
 8008ba4:	4b43      	ldr	r3, [pc, #268]	; (8008cb4 <R3_2_GetPhaseCurrents+0x180>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8008ba6:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8008ba8:	429c      	cmp	r4, r3
 8008baa:	da46      	bge.n	8008c3a <R3_2_GetPhaseCurrents+0x106>
          Iab->b = -INT16_MAX;
 8008bac:	804b      	strh	r3, [r1, #2]
 8008bae:	461c      	mov	r4, r3
 8008bb0:	f248 0201 	movw	r2, #32769	; 0x8001
 8008bb4:	461d      	mov	r5, r3
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8008bb6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8008bb8:	1af3      	subs	r3, r6, r3
        Aux -= (int32_t)Iab->b;             /* Ia  */
 8008bba:	1b1c      	subs	r4, r3, r4
        if (Aux > INT16_MAX)
 8008bbc:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008bc0:	db22      	blt.n	8008c08 <R3_2_GetPhaseCurrents+0xd4>
          Iab->a = INT16_MAX;
 8008bc2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8008bc6:	800b      	strh	r3, [r1, #0]
 8008bc8:	469c      	mov	ip, r3
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008bca:	4413      	add	r3, r2
 8008bcc:	425b      	negs	r3, r3
    pHandle->_Super.Ib = Iab->b;
 8008bce:	f8a0 5052 	strh.w	r5, [r0, #82]	; 0x52
    pHandle->_Super.Ia = Iab->a;
 8008bd2:	f8a0 c050 	strh.w	ip, [r0, #80]	; 0x50
  }
}
 8008bd6:	bc70      	pop	{r4, r5, r6}
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008bd8:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
 8008bdc:	4770      	bx	lr
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8008bde:	6f04      	ldr	r4, [r0, #112]	; 0x70
        if (Aux < -INT16_MAX)
 8008be0:	4b34      	ldr	r3, [pc, #208]	; (8008cb4 <R3_2_GetPhaseCurrents+0x180>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8008be2:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8008be4:	429c      	cmp	r4, r3
 8008be6:	da1e      	bge.n	8008c26 <R3_2_GetPhaseCurrents+0xf2>
          Iab->a = -INT16_MAX;
 8008be8:	461c      	mov	r4, r3
 8008bea:	800b      	strh	r3, [r1, #0]
 8008bec:	46a4      	mov	ip, r4
 8008bee:	f248 0301 	movw	r3, #32769	; 0x8001
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8008bf2:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8008bf4:	1ab2      	subs	r2, r6, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 8008bf6:	1b12      	subs	r2, r2, r4
        if (Aux > INT16_MAX)
 8008bf8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008bfc:	db0c      	blt.n	8008c18 <R3_2_GetPhaseCurrents+0xe4>
          Iab->b = INT16_MAX;
 8008bfe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008c02:	804a      	strh	r2, [r1, #2]
 8008c04:	4615      	mov	r5, r2
 8008c06:	e7e0      	b.n	8008bca <R3_2_GetPhaseCurrents+0x96>
        else  if (Aux < -INT16_MAX)
 8008c08:	4e2a      	ldr	r6, [pc, #168]	; (8008cb4 <R3_2_GetPhaseCurrents+0x180>)
 8008c0a:	42b4      	cmp	r4, r6
 8008c0c:	da42      	bge.n	8008c94 <R3_2_GetPhaseCurrents+0x160>
          Iab->a = -INT16_MAX;
 8008c0e:	800e      	strh	r6, [r1, #0]
 8008c10:	f248 0301 	movw	r3, #32769	; 0x8001
 8008c14:	46b4      	mov	ip, r6
 8008c16:	e7d8      	b.n	8008bca <R3_2_GetPhaseCurrents+0x96>
        else  if (Aux < -INT16_MAX)
 8008c18:	4d26      	ldr	r5, [pc, #152]	; (8008cb4 <R3_2_GetPhaseCurrents+0x180>)
 8008c1a:	42aa      	cmp	r2, r5
 8008c1c:	da36      	bge.n	8008c8c <R3_2_GetPhaseCurrents+0x158>
          Iab->b = -INT16_MAX;
 8008c1e:	804d      	strh	r5, [r1, #2]
 8008c20:	f248 0201 	movw	r2, #32769	; 0x8001
 8008c24:	e7d1      	b.n	8008bca <R3_2_GetPhaseCurrents+0x96>
        else  if (Aux > INT16_MAX)
 8008c26:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008c2a:	db29      	blt.n	8008c80 <R3_2_GetPhaseCurrents+0x14c>
          Iab->a = INT16_MAX;
 8008c2c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008c30:	4613      	mov	r3, r2
 8008c32:	800a      	strh	r2, [r1, #0]
 8008c34:	4614      	mov	r4, r2
 8008c36:	4694      	mov	ip, r2
 8008c38:	e7db      	b.n	8008bf2 <R3_2_GetPhaseCurrents+0xbe>
        else  if (Aux > INT16_MAX)
 8008c3a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008c3e:	db1b      	blt.n	8008c78 <R3_2_GetPhaseCurrents+0x144>
          Iab->b = INT16_MAX;
 8008c40:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8008c44:	461a      	mov	r2, r3
 8008c46:	804b      	strh	r3, [r1, #2]
 8008c48:	461c      	mov	r4, r3
 8008c4a:	461d      	mov	r5, r3
 8008c4c:	e7b3      	b.n	8008bb6 <R3_2_GetPhaseCurrents+0x82>
        else  if (Aux > INT16_MAX)
 8008c4e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008c52:	db09      	blt.n	8008c68 <R3_2_GetPhaseCurrents+0x134>
          Iab->b = INT16_MAX;
 8008c54:	f647 73ff 	movw	r3, #32767	; 0x7fff
    pHandle->_Super.Ia = Iab->a;
 8008c58:	f9b1 c000 	ldrsh.w	ip, [r1]
          Iab->b = INT16_MAX;
 8008c5c:	804b      	strh	r3, [r1, #2]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	4615      	mov	r5, r2
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008c62:	fa1f f38c 	uxth.w	r3, ip
 8008c66:	e7b0      	b.n	8008bca <R3_2_GetPhaseCurrents+0x96>
    pHandle->_Super.Ia = Iab->a;
 8008c68:	f9b1 c000 	ldrsh.w	ip, [r1]
          Iab->b = (int16_t)Aux;
 8008c6c:	b215      	sxth	r5, r2
 8008c6e:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008c70:	fa1f f38c 	uxth.w	r3, ip
 8008c74:	b292      	uxth	r2, r2
 8008c76:	e7a8      	b.n	8008bca <R3_2_GetPhaseCurrents+0x96>
          Iab->b = (int16_t)Aux;
 8008c78:	b225      	sxth	r5, r4
 8008c7a:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008c7c:	b2a2      	uxth	r2, r4
 8008c7e:	e79a      	b.n	8008bb6 <R3_2_GetPhaseCurrents+0x82>
          Iab->a = (int16_t)Aux;
 8008c80:	fa0f fc84 	sxth.w	ip, r4
 8008c84:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008c88:	b2a3      	uxth	r3, r4
 8008c8a:	e7b2      	b.n	8008bf2 <R3_2_GetPhaseCurrents+0xbe>
          Iab->b = (int16_t)Aux;
 8008c8c:	b215      	sxth	r5, r2
 8008c8e:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008c90:	b292      	uxth	r2, r2
 8008c92:	e79a      	b.n	8008bca <R3_2_GetPhaseCurrents+0x96>
          Iab->a = (int16_t)Aux;
 8008c94:	fa0f fc84 	sxth.w	ip, r4
 8008c98:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008c9c:	b2a3      	uxth	r3, r4
 8008c9e:	e794      	b.n	8008bca <R3_2_GetPhaseCurrents+0x96>
          Iab->a = (int16_t)Aux;
 8008ca0:	800c      	strh	r4, [r1, #0]
 8008ca2:	e771      	b.n	8008b88 <R3_2_GetPhaseCurrents+0x54>
    pHandle->_Super.Ia = Iab->a;
 8008ca4:	f9b1 c000 	ldrsh.w	ip, [r1]
    pHandle->_Super.Ib = Iab->b;
 8008ca8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008cac:	880b      	ldrh	r3, [r1, #0]
 8008cae:	884a      	ldrh	r2, [r1, #2]
 8008cb0:	e78b      	b.n	8008bca <R3_2_GetPhaseCurrents+0x96>
 8008cb2:	bf00      	nop
 8008cb4:	ffff8001 	.word	0xffff8001

08008cb8 <R3_2_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval Return value of R3_1_WriteTIMRegisters.
  */
uint16_t R3_2_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 8008cb8:	b410      	push	{r4}
  *         set too late for being taken into account in the next PWM cycle.
  */
__STATIC_INLINE uint16_t R3_2_WriteTIMRegisters(PWMC_Handle_t *pHdl, uint16_t SamplingPoint)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008cba:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8008cbe:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 8008cc2:	f880 406a 	strb.w	r4, [r0, #106]	; 0x6a
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8008cc6:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008cca:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8008ccc:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008cce:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8008cd0:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 8008cd2:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8008cd6:	f8b0 0042 	ldrh.w	r0, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008cda:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8008cdc:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008cde:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008ce0:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8008ce2:	4904      	ldr	r1, [pc, #16]	; (8008cf4 <R3_2_SetADCSampPointPolarization+0x3c>)
 8008ce4:	685b      	ldr	r3, [r3, #4]
}
 8008ce6:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8008cea:	420b      	tst	r3, r1
}
 8008cec:	bf14      	ite	ne
 8008cee:	2001      	movne	r0, #1
 8008cf0:	2000      	moveq	r0, #0
 8008cf2:	4770      	bx	lr
 8008cf4:	02000070 	.word	0x02000070

08008cf8 <R3_2_HFCurrentsPolarizationAB>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8008cf8:	b341      	cbz	r1, 8008d4c <R3_2_HFCurrentsPolarizationAB+0x54>
{
 8008cfa:	b430      	push	{r4, r5}
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008cfc:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008d00:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 8008d04:	689a      	ldr	r2, [r3, #8]
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 8008d06:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008d0a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8008d0c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 8008d0e:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8008d12:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008d16:	6853      	ldr	r3, [r2, #4]
 8008d18:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d20:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 8008d22:	f890 c080 	ldrb.w	ip, [r0, #128]	; 0x80
 8008d26:	f1bc 0f0f 	cmp.w	ip, #15
 8008d2a:	d80b      	bhi.n	8008d44 <R3_2_HFCurrentsPolarizationAB+0x4c>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
 8008d2c:	6f03      	ldr	r3, [r0, #112]	; 0x70
      pHandle-> PhaseBOffset += ADCDataReg2;
 8008d2e:	6f42      	ldr	r2, [r0, #116]	; 0x74
      pHandle-> PhaseAOffset += ADCDataReg1;
 8008d30:	441c      	add	r4, r3
      pHandle->PolarizationCounter++;
 8008d32:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
      pHandle-> PhaseBOffset += ADCDataReg2;
 8008d36:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 8008d38:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 8008d3a:	e9c0 421c 	strd	r4, r2, [r0, #112]	; 0x70
      pHandle->PolarizationCounter++;
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 8008d44:	2300      	movs	r3, #0
    Iab->b = 0;
  }
}
 8008d46:	bc30      	pop	{r4, r5}
    Iab->a = 0;
 8008d48:	600b      	str	r3, [r1, #0]
}
 8008d4a:	4770      	bx	lr
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop

08008d50 <R3_2_HFCurrentsPolarizationC>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationC(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8008d50:	b311      	cbz	r1, 8008d98 <R3_2_HFCurrentsPolarizationC+0x48>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008d52:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8008d56:	f890 c081 	ldrb.w	ip, [r0, #129]	; 0x81
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008d5a:	689a      	ldr	r2, [r3, #8]
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8008d5c:	eb03 038c 	add.w	r3, r3, ip, lsl #2
{
 8008d60:	b410      	push	{r4}
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8008d62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d64:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8008d68:	6853      	ldr	r3, [r2, #4]
 8008d6a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d72:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 8008d74:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008d78:	2b0f      	cmp	r3, #15
 8008d7a:	d808      	bhi.n	8008d8e <R3_2_HFCurrentsPolarizationC+0x3e>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 8008d7c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
      pHandle-> PhaseCOffset += ADCDataReg2;
 8008d80:	6f82      	ldr	r2, [r0, #120]	; 0x78
      pHandle->PolarizationCounter++;
 8008d82:	3301      	adds	r3, #1
      pHandle-> PhaseCOffset += ADCDataReg2;
 8008d84:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 8008d86:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 8008d88:	6782      	str	r2, [r0, #120]	; 0x78
      pHandle->PolarizationCounter++;
 8008d8a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 8008d8e:	2300      	movs	r3, #0
    Iab->b = 0;
  }
}
 8008d90:	f85d 4b04 	ldr.w	r4, [sp], #4
    Iab->a = 0;
 8008d94:	600b      	str	r3, [r1, #0]
}
 8008d96:	4770      	bx	lr
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop

08008d9c <R3_2_TurnOnLowSides>:
  * @param  ticks: Timer ticks value to be applied
  *                Min value: 0 (low sides ON)
  *                Max value: PWM_PERIOD_CYCLES/2 (low sides OFF)
  */
__weak void R3_2_TurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{
 8008d9c:	b410      	push	{r4}
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008d9e:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88

  pHandle->_Super.TurnOnLowSidesAction = true;
 8008da2:	2301      	movs	r3, #1
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008da4:	68a2      	ldr	r2, [r4, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8008da6:	f880 306b 	strb.w	r3, [r0, #107]	; 0x6b
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008daa:	f06f 0301 	mvn.w	r3, #1
 8008dae:	6113      	str	r3, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008db0:	6351      	str	r1, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008db2:	6391      	str	r1, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008db4:	63d1      	str	r1, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008db6:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1(TIMx, ticks);
  LL_TIM_OC_SetCompareCH2(TIMx, ticks);
  LL_TIM_OC_SetCompareCH3(TIMx, ticks);

  /* Wait until next update */
  while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 8008db8:	07db      	lsls	r3, r3, #31
 8008dba:	d5fc      	bpl.n	8008db6 <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008dbc:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8008dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dc2:	6453      	str	r3, [r2, #68]	; 0x44
  }

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->pParams_str->LowSideOutputs))
 8008dc4:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d10b      	bne.n	8008de4 <R3_2_TurnOnLowSides+0x48>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008dcc:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8008dd0:	f8b4 00ac 	ldrh.w	r0, [r4, #172]	; 0xac
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008dd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008dd6:	6190      	str	r0, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008dd8:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008ddc:	f8b4 20b0 	ldrh.w	r2, [r4, #176]	; 0xb0
 8008de0:	6188      	str	r0, [r1, #24]
 8008de2:	619a      	str	r2, [r3, #24]
  else
  {
    /* Nothing to do */
  }
  return;
}
 8008de4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop

08008dec <R3_2_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008dec:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  pHandle->ADCRegularLocked = true;

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 8008df0:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008df4:	688b      	ldr	r3, [r1, #8]
  pHandle->ADCRegularLocked = true;
 8008df6:	f04f 0c01 	mov.w	ip, #1
{
 8008dfa:	b430      	push	{r4, r5}
  pHandle->ADCRegularLocked = true;
 8008dfc:	f880 c08c 	strb.w	ip, [r0, #140]	; 0x8c
  pHandle->_Super.TurnOnLowSidesAction = false;
 8008e00:	f04f 0c00 	mov.w	ip, #0
 8008e04:	f880 c06b 	strb.w	ip, [r0, #107]	; 0x6b
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 8008e08:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008e0a:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 8008e0c:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008e0e:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008e10:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008e12:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008e16:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008e18:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008e1a:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 8008e1c:	07d2      	lsls	r2, r2, #31
 8008e1e:	d5fc      	bpl.n	8008e1a <R3_2_SwitchOnPWM+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008e20:	f06f 0201 	mvn.w	r2, #1
 8008e24:	611a      	str	r2, [r3, #16]
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8008e26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e2c:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008e2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e34:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->pParams_str->LowSideOutputs))
 8008e36:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 8008e3a:	2a02      	cmp	r2, #2
 8008e3c:	d008      	beq.n	8008e50 <R3_2_SwitchOnPWM+0x64>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008e3e:	f06f 0201 	mvn.w	r2, #1
 8008e42:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008e44:	68da      	ldr	r2, [r3, #12]
 8008e46:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);
}
 8008e4a:	bc30      	pop	{r4, r5}
 8008e4c:	60da      	str	r2, [r3, #12]
 8008e4e:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 8008e50:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8008e52:	6a0c      	ldr	r4, [r1, #32]
 8008e54:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 8008e58:	f240 5255 	movw	r2, #1365	; 0x555
 8008e5c:	4210      	tst	r0, r2
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008e5e:	e9d1 0209 	ldrd	r0, r2, [r1, #36]	; 0x24
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 8008e62:	d007      	beq.n	8008e74 <R3_2_SwitchOnPWM+0x88>
 8008e64:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008e66:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008e6a:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8008e6e:	6184      	str	r4, [r0, #24]
 8008e70:	6191      	str	r1, [r2, #24]
}
 8008e72:	e7e4      	b.n	8008e3e <R3_2_SwitchOnPWM+0x52>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8008e74:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008e76:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008e7a:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8008e7e:	6284      	str	r4, [r0, #40]	; 0x28
 8008e80:	6291      	str	r1, [r2, #40]	; 0x28
}
 8008e82:	e7dc      	b.n	8008e3e <R3_2_SwitchOnPWM+0x52>

08008e84 <R3_2_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008e84:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8008e88:	688a      	ldr	r2, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008e8a:	68d3      	ldr	r3, [r2, #12]
 8008e8c:	f023 0301 	bic.w	r3, r3, #1
 8008e90:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008e92:	6c53      	ldr	r3, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE(TIMx);

  pHandle->_Super.TurnOnLowSidesAction = false;
 8008e94:	f04f 0c00 	mov.w	ip, #0
 8008e98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e9c:	f880 c06b 	strb.w	ip, [r0, #107]	; 0x6b
 8008ea0:	6453      	str	r3, [r2, #68]	; 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (true == pHandle->BrakeActionLock)
 8008ea2:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008ea6:	b91b      	cbnz	r3, 8008eb0 <R3_2_SwitchOffPWM+0x2c>
  {
    /* Nothing to do */
  }
  else
  {
    if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 8008ea8:	f891 30c0 	ldrb.w	r3, [r1, #192]	; 0xc0
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d00c      	beq.n	8008eca <R3_2_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008eb0:	f06f 0301 	mvn.w	r3, #1
 8008eb4:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008eb6:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 8008eb8:	07db      	lsls	r3, r3, #31
 8008eba:	d5fc      	bpl.n	8008eb6 <R3_2_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008ebc:	f06f 0101 	mvn.w	r1, #1
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked = false;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	6111      	str	r1, [r2, #16]
 8008ec4:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
 8008ec8:	4770      	bx	lr
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8008eca:	6a0b      	ldr	r3, [r1, #32]
{
 8008ecc:	b410      	push	{r4}
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8008ece:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	; 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 8008ed2:	629c      	str	r4, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008ed4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8008ed6:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
 8008eda:	629c      	str	r4, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008edc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8008ede:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8008ee2:	6299      	str	r1, [r3, #40]	; 0x28
 8008ee4:	f06f 0301 	mvn.w	r3, #1
 8008ee8:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008eea:	6913      	ldr	r3, [r2, #16]
  while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 8008eec:	07d9      	lsls	r1, r3, #31
 8008eee:	d5fc      	bpl.n	8008eea <R3_2_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008ef0:	f06f 0101 	mvn.w	r1, #1
  pHandle->ADCRegularLocked = false;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	6111      	str	r1, [r2, #16]
}
 8008ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->ADCRegularLocked = false;
 8008efc:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
}
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop

08008f04 <R3_2_RLGetPhaseCurrents>:
  *         of phase A and B in ab_t format.
  */
static void R3_2_RLGetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{

  if (MC_NULL == pStator_Currents)
 8008f04:	b329      	cbz	r1, 8008f52 <R3_2_RLGetPhaseCurrents+0x4e>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008f06:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
{
 8008f0a:	b410      	push	{r4}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008f0c:	6894      	ldr	r4, [r2, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008f0e:	6863      	ldr	r3, [r4, #4]
 8008f10:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f18:	6063      	str	r3, [r4, #4]
    int32_t wAux;

    /* disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset) - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 8008f1a:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
 8008f1e:	6f43      	ldr	r3, [r0, #116]	; 0x74

    /* Check saturation */
    if (wAux > -INT16_MAX)
 8008f20:	480e      	ldr	r0, [pc, #56]	; (8008f5c <R3_2_RLGetPhaseCurrents+0x58>)
    wAux = ((int32_t)pHandle->PhaseBOffset) - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 8008f22:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8008f26:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008f28:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008f2c:	1a9b      	subs	r3, r3, r2
    if (wAux > -INT16_MAX)
 8008f2e:	4283      	cmp	r3, r0
 8008f30:	da09      	bge.n	8008f46 <R3_2_RLGetPhaseCurrents+0x42>
 8008f32:	4b0b      	ldr	r3, [pc, #44]	; (8008f60 <R3_2_RLGetPhaseCurrents+0x5c>)
    }

    pStator_Currents->a = (int16_t)wAux;
    pStator_Currents->b = (int16_t)wAux;
  }
}
 8008f34:	f85d 4b04 	ldr.w	r4, [sp], #4
    pStator_Currents->a = (int16_t)wAux;
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f363 020f 	bfi	r2, r3, #0, #16
 8008f3e:	f363 421f 	bfi	r2, r3, #16, #16
 8008f42:	600a      	str	r2, [r1, #0]
}
 8008f44:	4770      	bx	lr
      if (wAux < INT16_MAX)
 8008f46:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	dc02      	bgt.n	8008f54 <R3_2_RLGetPhaseCurrents+0x50>
    pStator_Currents->a = (int16_t)wAux;
 8008f4e:	b21b      	sxth	r3, r3
 8008f50:	e7f0      	b.n	8008f34 <R3_2_RLGetPhaseCurrents+0x30>
 8008f52:	4770      	bx	lr
 8008f54:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8008f58:	e7ec      	b.n	8008f34 <R3_2_RLGetPhaseCurrents+0x30>
 8008f5a:	bf00      	nop
 8008f5c:	ffff8002 	.word	0xffff8002
 8008f60:	ffff8001 	.word	0xffff8001

08008f64 <R3_2_RLTurnOnLowSides>:
  * @param  ticks: Duty cycle of the boot capacitors charge, specific to motor.
  */
static void R3_2_RLTurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008f64:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88

  pHandle->ADCRegularLocked = true;
 8008f68:	2301      	movs	r3, #1
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008f6a:	688a      	ldr	r2, [r1, #8]
{
 8008f6c:	b410      	push	{r4}
  pHandle->ADCRegularLocked = true;
 8008f6e:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008f72:	2400      	movs	r4, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008f74:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008f78:	6354      	str	r4, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008f7a:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008f7c:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Wait until next update */
  while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 8008f7e:	07db      	lsls	r3, r3, #31
 8008f80:	d5fc      	bpl.n	8008f7c <R3_2_RLTurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008f82:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8008f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f88:	6453      	str	r3, [r2, #68]	; 0x44
  }

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 8008f8a:	f891 30c0 	ldrb.w	r3, [r1, #192]	; 0xc0
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d10b      	bne.n	8008faa <R3_2_RLTurnOnLowSides+0x46>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008f92:	e9d1 2008 	ldrd	r2, r0, [r1, #32]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8008f96:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	; 0xac
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008f9a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008f9c:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008f9e:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008fa2:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BRR, PinMask);
 8008fa6:	6284      	str	r4, [r0, #40]	; 0x28
 8008fa8:	629a      	str	r2, [r3, #40]	; 0x28
  else
  {
    /* Nothing to do */
  }
  return;
}
 8008faa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <R3_2_RLSwitchOnPWM>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
static void R3_2_RLSwitchOnPWM( PWMC_Handle_t *pHdl)
{
  if (MC_NULL == pHdl)
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	d04c      	beq.n	800904e <R3_2_RLSwitchOnPWM+0x9e>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008fb4:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCx_1;
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;

    pHandle->ADCRegularLocked=true;
 8008fb8:	2201      	movs	r2, #1
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008fba:	688b      	ldr	r3, [r1, #8]
{
 8008fbc:	b4f0      	push	{r4, r5, r6, r7}
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008fbe:	e9d1 5400 	ldrd	r5, r4, [r1]
    pHandle->ADCRegularLocked=true;
 8008fc2:	f880 208c 	strb.w	r2, [r0, #140]	; 0x8c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008fc6:	f06f 0201 	mvn.w	r2, #1
 8008fca:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008fcc:	691a      	ldr	r2, [r3, #16]
    /* wait for a new PWM period */
    LL_TIM_ClearFlag_UPDATE(TIMx);
    while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 8008fce:	07d6      	lsls	r6, r2, #31
 8008fd0:	d5fc      	bpl.n	8008fcc <R3_2_RLSwitchOnPWM+0x1c>
    }
    /* Clear Update Flag */
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 8008fd2:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008fd6:	f06f 0601 	mvn.w	r6, #1
 8008fda:	611e      	str	r6, [r3, #16]
 8008fdc:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008fde:	2601      	movs	r6, #1
 8008fe0:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008fe2:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008fe4:	691a      	ldr	r2, [r3, #16]

    while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 8008fe6:	07d2      	lsls	r2, r2, #31
 8008fe8:	d5fc      	bpl.n	8008fe4 <R3_2_RLSwitchOnPWM+0x34>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008fea:	68da      	ldr	r2, [r3, #12]
 8008fec:	f042 0201 	orr.w	r2, r2, #1
 8008ff0:	60da      	str	r2, [r3, #12]

    /* enable TIMx update interrupt*/
    LL_TIM_EnableIT_UPDATE(TIMx);

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8008ff2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ff8:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008ffa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ffc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009000:	645a      	str	r2, [r3, #68]	; 0x44
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->pParams_str->LowSideOutputs)
 8009002:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 8009006:	2a02      	cmp	r2, #2
 8009008:	d00f      	beq.n	800902a <R3_2_RLSwitchOnPWM+0x7a>
      /* Nothing to do */
    }

    /* set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx_1 */
    pHdl->Sector = SECTOR_4;
 800900a:	2303      	movs	r3, #3
 800900c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
  MODIFY_REG(ADCx->CR,
 8009010:	68aa      	ldr	r2, [r5, #8]
 8009012:	4913      	ldr	r1, [pc, #76]	; (8009060 <R3_2_RLSwitchOnPWM+0xb0>)
 8009014:	400a      	ands	r2, r1
 8009016:	f042 0208 	orr.w	r2, r2, #8
 800901a:	60aa      	str	r2, [r5, #8]
 800901c:	68a3      	ldr	r3, [r4, #8]
 800901e:	400b      	ands	r3, r1
 8009020:	f043 0308 	orr.w	r3, r3, #8
 8009024:	60a3      	str	r3, [r4, #8]

    LL_ADC_INJ_StartConversion(ADCx_1);
    LL_ADC_INJ_StartConversion(ADCx_2);
  }
  return;
}
 8009026:	bcf0      	pop	{r4, r5, r6, r7}
 8009028:	4770      	bx	lr
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 800902a:	6a1a      	ldr	r2, [r3, #32]
        LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800902c:	6a0e      	ldr	r6, [r1, #32]
 800902e:	f8b1 70ac 	ldrh.w	r7, [r1, #172]	; 0xac
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 8009032:	f240 5355 	movw	r3, #1365	; 0x555
 8009036:	421a      	tst	r2, r3
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8009038:	e9d1 2309 	ldrd	r2, r3, [r1, #36]	; 0x24
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 800903c:	d008      	beq.n	8009050 <R3_2_RLSwitchOnPWM+0xa0>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800903e:	61b7      	str	r7, [r6, #24]
        LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8009040:	f8b1 60ae 	ldrh.w	r6, [r1, #174]	; 0xae
 8009044:	6196      	str	r6, [r2, #24]
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8009046:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BRR, PinMask);
 800904a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800904c:	e7dd      	b.n	800900a <R3_2_RLSwitchOnPWM+0x5a>
 800904e:	4770      	bx	lr
  WRITE_REG(GPIOx->BRR, PinMask);
 8009050:	62b7      	str	r7, [r6, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8009052:	f8b1 60ae 	ldrh.w	r6, [r1, #174]	; 0xae
 8009056:	6296      	str	r6, [r2, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8009058:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 800905c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800905e:	e7d4      	b.n	800900a <R3_2_RLSwitchOnPWM+0x5a>
 8009060:	7fffffc0 	.word	0x7fffffc0

08009064 <R3_2_SetAOReferenceVoltage>:
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 8009064:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 8009068:	b510      	push	{r4, lr}
 800906a:	f00c 0c3c 	and.w	ip, ip, #60	; 0x3c
 800906e:	f101 0e08 	add.w	lr, r1, #8
 8009072:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8009074:	f85c 300e 	ldr.w	r3, [ip, lr]
 8009078:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800907c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009080:	431a      	orrs	r2, r3
 8009082:	f84c 200e 	str.w	r2, [ip, lr]
  SET_BIT(DACx->SWTRIGR,
 8009086:	684a      	ldr	r2, [r1, #4]
 8009088:	f000 0303 	and.w	r3, r0, #3
 800908c:	4313      	orrs	r3, r2
 800908e:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 8009090:	680a      	ldr	r2, [r1, #0]
 8009092:	2301      	movs	r3, #1
 8009094:	f000 0010 	and.w	r0, r0, #16
 8009098:	fa03 f000 	lsl.w	r0, r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 800909c:	ea30 0302 	bics.w	r3, r0, r2
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 80090a0:	4b14      	ldr	r3, [pc, #80]	; (80090f4 <R3_2_SetAOReferenceVoltage+0x90>)
 80090a2:	d013      	beq.n	80090cc <R3_2_SetAOReferenceVoltage+0x68>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4c14      	ldr	r4, [pc, #80]	; (80090f8 <R3_2_SetAOReferenceVoltage+0x94>)
  SET_BIT(DACx->CR,
 80090a8:	680a      	ldr	r2, [r1, #0]
 80090aa:	fba4 4303 	umull	r4, r3, r4, r3
 80090ae:	0cdb      	lsrs	r3, r3, #19
 80090b0:	00db      	lsls	r3, r3, #3
 80090b2:	4310      	orrs	r0, r2
 80090b4:	6008      	str	r0, [r1, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 80090b6:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 80090b8:	9b00      	ldr	r3, [sp, #0]
 80090ba:	b12b      	cbz	r3, 80090c8 <R3_2_SetAOReferenceVoltage+0x64>
      wait_loop_index--;
 80090bc:	9b00      	ldr	r3, [sp, #0]
 80090be:	3b01      	subs	r3, #1
 80090c0:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 80090c2:	9b00      	ldr	r3, [sp, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d1f9      	bne.n	80090bc <R3_2_SetAOReferenceVoltage+0x58>
}
 80090c8:	b002      	add	sp, #8
 80090ca:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 80090cc:	4a0a      	ldr	r2, [pc, #40]	; (80090f8 <R3_2_SetAOReferenceVoltage+0x94>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	fba2 2303 	umull	r2, r3, r2, r3
 80090d4:	0cdb      	lsrs	r3, r3, #19
 80090d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80090da:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80090dc:	9b01      	ldr	r3, [sp, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d0f2      	beq.n	80090c8 <R3_2_SetAOReferenceVoltage+0x64>
      wait_loop_index--;
 80090e2:	9b01      	ldr	r3, [sp, #4]
 80090e4:	3b01      	subs	r3, #1
 80090e6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80090e8:	9b01      	ldr	r3, [sp, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1f9      	bne.n	80090e2 <R3_2_SetAOReferenceVoltage+0x7e>
}
 80090ee:	b002      	add	sp, #8
 80090f0:	bd10      	pop	{r4, pc}
 80090f2:	bf00      	nop
 80090f4:	20000434 	.word	0x20000434
 80090f8:	431bde83 	.word	0x431bde83

080090fc <R3_2_Init>:
  if (MC_NULL == pHandle)
 80090fc:	2800      	cmp	r0, #0
 80090fe:	f000 80fc 	beq.w	80092fa <R3_2_Init+0x1fe>
{
 8009102:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8009106:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCx_1;
 800910a:	681f      	ldr	r7, [r3, #0]
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 800910c:	685e      	ldr	r6, [r3, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800910e:	687a      	ldr	r2, [r7, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009110:	689c      	ldr	r4, [r3, #8]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 8009112:	f8d3 a014 	ldr.w	sl, [r3, #20]
 8009116:	4605      	mov	r5, r0
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8009118:	e9d3 e00b 	ldrd	lr, r0, [r3, #44]	; 0x2c
{
 800911c:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800911e:	2104      	movs	r1, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8009120:	f022 0204 	bic.w	r2, r2, #4
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8009124:	9001      	str	r0, [sp, #4]
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8009126:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009128:	9002      	str	r0, [sp, #8]
    COMP_TypeDef *COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 800912a:	e9d3 cb03 	ldrd	ip, fp, [r3, #12]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 800912e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009130:	9003      	str	r0, [sp, #12]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 8009132:	e9d3 9806 	ldrd	r9, r8, [r3, #24]
 8009136:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8009138:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800913a:	687a      	ldr	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800913c:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800913e:	f022 0220 	bic.w	r2, r2, #32
 8009142:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8009144:	6038      	str	r0, [r7, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8009146:	6872      	ldr	r2, [r6, #4]
 8009148:	f022 0204 	bic.w	r2, r2, #4
 800914c:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800914e:	6031      	str	r1, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8009150:	6872      	ldr	r2, [r6, #4]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8009152:	498f      	ldr	r1, [pc, #572]	; (8009390 <R3_2_Init+0x294>)
 8009154:	f022 0220 	bic.w	r2, r2, #32
 8009158:	6072      	str	r2, [r6, #4]
      if (TIM1 ==  TIMx)
 800915a:	4a8e      	ldr	r2, [pc, #568]	; (8009394 <R3_2_Init+0x298>)
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800915c:	6030      	str	r0, [r6, #0]
 800915e:	4294      	cmp	r4, r2
 8009160:	690a      	ldr	r2, [r1, #16]
 8009162:	bf0c      	ite	eq
 8009164:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 8009168:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 800916c:	610a      	str	r2, [r1, #16]
      if (OPAMPParams != NULL)
 800916e:	f1bc 0f00 	cmp.w	ip, #0
 8009172:	d011      	beq.n	8009198 <R3_2_Init+0x9c>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 8009174:	e9dc 0103 	ldrd	r0, r1, [ip, #12]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 8009178:	6802      	ldr	r2, [r0, #0]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 800917a:	f8dc c024 	ldr.w	ip, [ip, #36]	; 0x24
 800917e:	f042 0201 	orr.w	r2, r2, #1
 8009182:	6002      	str	r2, [r0, #0]
 8009184:	680a      	ldr	r2, [r1, #0]
 8009186:	f042 0201 	orr.w	r2, r2, #1
 800918a:	600a      	str	r2, [r1, #0]
 800918c:	f8dc 2000 	ldr.w	r2, [ip]
 8009190:	f042 0201 	orr.w	r2, r2, #1
 8009194:	f8cc 2000 	str.w	r2, [ip]
      if (COMP_OCPAx != NULL)
 8009198:	f1bb 0f00 	cmp.w	fp, #0
 800919c:	d018      	beq.n	80091d0 <R3_2_Init+0xd4>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 800919e:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
 80091a2:	2a01      	cmp	r2, #1
 80091a4:	d008      	beq.n	80091b8 <R3_2_Init+0xbc>
 80091a6:	f1be 0f00 	cmp.w	lr, #0
 80091aa:	d005      	beq.n	80091b8 <R3_2_Init+0xbc>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 80091ac:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 80091b0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80091b2:	4671      	mov	r1, lr
 80091b4:	f7ff ff56 	bl	8009064 <R3_2_SetAOReferenceVoltage>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80091b8:	f8db 3000 	ldr.w	r3, [fp]
 80091bc:	f043 0301 	orr.w	r3, r3, #1
 80091c0:	f8cb 3000 	str.w	r3, [fp]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80091c4:	f8db 3000 	ldr.w	r3, [fp]
 80091c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091cc:	f8cb 3000 	str.w	r3, [fp]
      if (COMP_OCPBx != NULL)
 80091d0:	f1ba 0f00 	cmp.w	sl, #0
 80091d4:	d019      	beq.n	800920a <R3_2_Init+0x10e>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 80091d6:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80091da:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 80091de:	2a01      	cmp	r2, #1
 80091e0:	d007      	beq.n	80091f2 <R3_2_Init+0xf6>
 80091e2:	9a01      	ldr	r2, [sp, #4]
 80091e4:	b12a      	cbz	r2, 80091f2 <R3_2_Init+0xf6>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 80091e6:	4611      	mov	r1, r2
 80091e8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80091ea:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 80091ee:	f7ff ff39 	bl	8009064 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80091f2:	f8da 3000 	ldr.w	r3, [sl]
 80091f6:	f043 0301 	orr.w	r3, r3, #1
 80091fa:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80091fe:	f8da 3000 	ldr.w	r3, [sl]
 8009202:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009206:	f8ca 3000 	str.w	r3, [sl]
      if (COMP_OCPCx != NULL)
 800920a:	f1b9 0f00 	cmp.w	r9, #0
 800920e:	d019      	beq.n	8009244 <R3_2_Init+0x148>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 8009210:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8009214:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 8009218:	2a01      	cmp	r2, #1
 800921a:	d007      	beq.n	800922c <R3_2_Init+0x130>
 800921c:	9a02      	ldr	r2, [sp, #8]
 800921e:	b12a      	cbz	r2, 800922c <R3_2_Init+0x130>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 8009220:	4611      	mov	r1, r2
 8009222:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8009224:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 8009228:	f7ff ff1c 	bl	8009064 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800922c:	f8d9 3000 	ldr.w	r3, [r9]
 8009230:	f043 0301 	orr.w	r3, r3, #1
 8009234:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8009238:	f8d9 3000 	ldr.w	r3, [r9]
 800923c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009240:	f8c9 3000 	str.w	r3, [r9]
      if (COMP_OVPx != NULL)
 8009244:	f1b8 0f00 	cmp.w	r8, #0
 8009248:	d019      	beq.n	800927e <R3_2_Init+0x182>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 800924a:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800924e:	f893 20c6 	ldrb.w	r2, [r3, #198]	; 0xc6
 8009252:	2a01      	cmp	r2, #1
 8009254:	d007      	beq.n	8009266 <R3_2_Init+0x16a>
 8009256:	9a03      	ldr	r2, [sp, #12]
 8009258:	b12a      	cbz	r2, 8009266 <R3_2_Init+0x16a>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 800925a:	4611      	mov	r1, r2
 800925c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800925e:	f8b3 20be 	ldrh.w	r2, [r3, #190]	; 0xbe
 8009262:	f7ff feff 	bl	8009064 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8009266:	f8d8 3000 	ldr.w	r3, [r8]
 800926a:	f043 0301 	orr.w	r3, r3, #1
 800926e:	f8c8 3000 	str.w	r3, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8009272:	f8d8 3000 	ldr.w	r3, [r8]
 8009276:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800927a:	f8c8 3000 	str.w	r3, [r8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800927e:	68bb      	ldr	r3, [r7, #8]
      if (0U == LL_ADC_IsEnabled(ADCx_1))
 8009280:	07d9      	lsls	r1, r3, #31
 8009282:	d56a      	bpl.n	800935a <R3_2_Init+0x25e>
 8009284:	68b3      	ldr	r3, [r6, #8]
      if (0U == LL_ADC_IsEnabled(ADCx_2))
 8009286:	07da      	lsls	r2, r3, #31
 8009288:	d563      	bpl.n	8009352 <R3_2_Init+0x256>
  volatile uint32_t Brk2Timeout = 1000;
 800928a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800928e:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8009290:	6823      	ldr	r3, [r4, #0]
  if (2U == pHandle->pParams_str->FreqRatio)
 8009292:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8009296:	f023 0301 	bic.w	r3, r3, #1
 800929a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800929c:	6863      	ldr	r3, [r4, #4]
 800929e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80092a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092a6:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80092a8:	69a3      	ldr	r3, [r4, #24]
 80092aa:	f043 0308 	orr.w	r3, r3, #8
 80092ae:	61a3      	str	r3, [r4, #24]
 80092b0:	69a3      	ldr	r3, [r4, #24]
 80092b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80092b6:	61a3      	str	r3, [r4, #24]
 80092b8:	69e3      	ldr	r3, [r4, #28]
 80092ba:	f043 0308 	orr.w	r3, r3, #8
 80092be:	61e3      	str	r3, [r4, #28]
 80092c0:	69e3      	ldr	r3, [r4, #28]
 80092c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80092c6:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80092c8:	6963      	ldr	r3, [r4, #20]
 80092ca:	f043 0301 	orr.w	r3, r3, #1
 80092ce:	6163      	str	r3, [r4, #20]
 80092d0:	f892 30c7 	ldrb.w	r3, [r2, #199]	; 0xc7
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d011      	beq.n	80092fc <R3_2_Init+0x200>
    if (M1 == pHandle->_Super.Motor)
 80092d8:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
 80092dc:	b9b3      	cbnz	r3, 800930c <R3_2_Init+0x210>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 80092de:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d00e      	beq.n	8009304 <R3_2_Init+0x208>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 80092e6:	2b03      	cmp	r3, #3
 80092e8:	d110      	bne.n	800930c <R3_2_Init+0x210>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80092ea:	2101      	movs	r1, #1
 80092ec:	6321      	str	r1, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80092ee:	6961      	ldr	r1, [r4, #20]
 80092f0:	f041 0101 	orr.w	r1, r1, #1
 80092f4:	6161      	str	r1, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80092f6:	6323      	str	r3, [r4, #48]	; 0x30
}
 80092f8:	e008      	b.n	800930c <R3_2_Init+0x210>
 80092fa:	4770      	bx	lr
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 80092fc:	f892 30c8 	ldrb.w	r3, [r2, #200]	; 0xc8
 8009300:	2b01      	cmp	r3, #1
 8009302:	d039      	beq.n	8009378 <R3_2_Init+0x27c>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 8009304:	f8b5 307c 	ldrh.w	r3, [r5, #124]	; 0x7c
 8009308:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 800930a:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800930c:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8009310:	6123      	str	r3, [r4, #16]
  if ((pHandle->pParams_str->BKIN2Mode) != NONE)
 8009312:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 8009316:	b17b      	cbz	r3, 8009338 <R3_2_Init+0x23c>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8009318:	6923      	ldr	r3, [r4, #16]
 800931a:	05db      	lsls	r3, r3, #23
 800931c:	d52a      	bpl.n	8009374 <R3_2_Init+0x278>
    while ((Brk2Timeout != 0u) && (1U == result))
 800931e:	9b05      	ldr	r3, [sp, #20]
 8009320:	b153      	cbz	r3, 8009338 <R3_2_Init+0x23c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8009322:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009326:	6122      	str	r2, [r4, #16]
      Brk2Timeout--;
 8009328:	9b05      	ldr	r3, [sp, #20]
 800932a:	3b01      	subs	r3, #1
 800932c:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800932e:	6923      	ldr	r3, [r4, #16]
 8009330:	f413 7f80 	tst.w	r3, #256	; 0x100
    while ((Brk2Timeout != 0u) && (1U == result))
 8009334:	9b05      	ldr	r3, [sp, #20]
 8009336:	d11a      	bne.n	800936e <R3_2_Init+0x272>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8009338:	68e3      	ldr	r3, [r4, #12]
 800933a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800933e:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 8009340:	6a23      	ldr	r3, [r4, #32]
 8009342:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8009346:	f043 0305 	orr.w	r3, r3, #5
 800934a:	6223      	str	r3, [r4, #32]
}
 800934c:	b007      	add	sp, #28
 800934e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        R3_2_ADCxInit(ADCx_2);
 8009352:	4630      	mov	r0, r6
 8009354:	f7ff fb94 	bl	8008a80 <R3_2_ADCxInit>
 8009358:	e797      	b.n	800928a <R3_2_Init+0x18e>
        R3_2_ADCxInit(ADCx_1);
 800935a:	4638      	mov	r0, r7
 800935c:	f7ff fb90 	bl	8008a80 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8009360:	2340      	movs	r3, #64	; 0x40
 8009362:	603b      	str	r3, [r7, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800936a:	607b      	str	r3, [r7, #4]
}
 800936c:	e78a      	b.n	8009284 <R3_2_Init+0x188>
    while ((Brk2Timeout != 0u) && (1U == result))
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1d9      	bne.n	8009326 <R3_2_Init+0x22a>
 8009372:	e7e1      	b.n	8009338 <R3_2_Init+0x23c>
 8009374:	9b05      	ldr	r3, [sp, #20]
 8009376:	e7df      	b.n	8009338 <R3_2_Init+0x23c>
      if (3U == pHandle->pParams_str->RepetitionCounter)
 8009378:	f892 10c1 	ldrb.w	r1, [r2, #193]	; 0xc1
 800937c:	2903      	cmp	r1, #3
 800937e:	d1c1      	bne.n	8009304 <R3_2_Init+0x208>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009380:	6323      	str	r3, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009382:	6963      	ldr	r3, [r4, #20]
 8009384:	f043 0301 	orr.w	r3, r3, #1
 8009388:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800938a:	6321      	str	r1, [r4, #48]	; 0x30
}
 800938c:	e7ba      	b.n	8009304 <R3_2_Init+0x208>
 800938e:	bf00      	nop
 8009390:	e0042000 	.word	0xe0042000
 8009394:	40012c00 	.word	0x40012c00

08009398 <R3_2_SetOffsetCalib>:
{
 8009398:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 800939a:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800939e:	680b      	ldr	r3, [r1, #0]
 80093a0:	6703      	str	r3, [r0, #112]	; 0x70
  pHdl->offsetCalibStatus = true;
 80093a2:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 80093a4:	e9c0 421d 	strd	r4, r2, [r0, #116]	; 0x74
  pHdl->offsetCalibStatus = true;
 80093a8:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 80093ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop

080093b4 <R3_2_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 80093b4:	e9d0 231d 	ldrd	r2, r3, [r0, #116]	; 0x74
 80093b8:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80093ba:	608b      	str	r3, [r1, #8]
 80093bc:	e9c1 0200 	strd	r0, r2, [r1]
}
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop

080093c4 <R3_2_CurrentReadingPolarization>:
{
 80093c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80093c6:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  if (true == pHandle->_Super.offsetCalibStatus)
 80093ca:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
  ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 80093ce:	e9d3 7600 	ldrd	r7, r6, [r3]
{
 80093d2:	b085      	sub	sp, #20
 80093d4:	4604      	mov	r4, r0
  if (true == pHandle->_Super.offsetCalibStatus)
 80093d6:	b1aa      	cbz	r2, 8009404 <R3_2_CurrentReadingPolarization+0x40>
  MODIFY_REG(ADCx->CR,
 80093d8:	68ba      	ldr	r2, [r7, #8]
 80093da:	494f      	ldr	r1, [pc, #316]	; (8009518 <R3_2_CurrentReadingPolarization+0x154>)
 80093dc:	400a      	ands	r2, r1
 80093de:	f042 0208 	orr.w	r2, r2, #8
 80093e2:	60ba      	str	r2, [r7, #8]
 80093e4:	68b3      	ldr	r3, [r6, #8]
 80093e6:	400b      	ands	r3, r1
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80093e8:	2280      	movs	r2, #128	; 0x80
 80093ea:	f043 0308 	orr.w	r3, r3, #8
 80093ee:	60b3      	str	r3, [r6, #8]
 80093f0:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
  pHandle->_Super.Sector = SECTOR_5;
 80093f4:	2204      	movs	r2, #4
  pHandle->BrakeActionLock = false;
 80093f6:	2300      	movs	r3, #0
  pHandle->_Super.Sector = SECTOR_5;
 80093f8:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
  pHandle->BrakeActionLock = false;
 80093fc:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8009400:	b005      	add	sp, #20
 8009402:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009404:	689d      	ldr	r5, [r3, #8]
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8009406:	6803      	ldr	r3, [r0, #0]
 8009408:	9302      	str	r3, [sp, #8]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 800940a:	6943      	ldr	r3, [r0, #20]
 800940c:	9303      	str	r3, [sp, #12]
    pHandle->PolarizationCounter = 0U;
 800940e:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  CLEAR_BIT(TIMx->CCER, Channels);
 8009412:	6a2b      	ldr	r3, [r5, #32]
    pHandle->PhaseCOffset = 0U;
 8009414:	6782      	str	r2, [r0, #120]	; 0x78
 8009416:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 800941a:	f023 0305 	bic.w	r3, r3, #5
    pHandle->PhaseBOffset = 0U;
 800941e:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8009422:	622b      	str	r3, [r5, #32]
  pHandle->PolarizationSector=SECTOR_5;
 8009424:	2304      	movs	r3, #4
 8009426:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  pHandle->_Super.Sector = SECTOR_5;   
 800942a:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 800942e:	4b3b      	ldr	r3, [pc, #236]	; (800951c <R3_2_CurrentReadingPolarization+0x158>)
 8009430:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8009432:	4b3b      	ldr	r3, [pc, #236]	; (8009520 <R3_2_CurrentReadingPolarization+0x15c>)
 8009434:	6143      	str	r3, [r0, #20]
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8009436:	2380      	movs	r3, #128	; 0x80
 8009438:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    R3_2_SwitchOnPWM(&pHandle->_Super);
 800943c:	f7ff fcd6 	bl	8008dec <R3_2_SwitchOnPWM>
    while (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF)
 8009440:	4a38      	ldr	r2, [pc, #224]	; (8009524 <R3_2_CurrentReadingPolarization+0x160>)
 8009442:	686b      	ldr	r3, [r5, #4]
 8009444:	4013      	ands	r3, r2
 8009446:	2b70      	cmp	r3, #112	; 0x70
 8009448:	d1fb      	bne.n	8009442 <R3_2_CurrentReadingPolarization+0x7e>
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	4932      	ldr	r1, [pc, #200]	; (8009518 <R3_2_CurrentReadingPolarization+0x154>)
 800944e:	400a      	ands	r2, r1
 8009450:	f042 0208 	orr.w	r2, r2, #8
 8009454:	60ba      	str	r2, [r7, #8]
 8009456:	68b3      	ldr	r3, [r6, #8]
    waitForPolarizationEnd(TIMx,
 8009458:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800945c:	400b      	ands	r3, r1
 800945e:	f043 0308 	orr.w	r3, r3, #8
 8009462:	60b3      	str	r3, [r6, #8]
 8009464:	f104 0144 	add.w	r1, r4, #68	; 0x44
 8009468:	f104 0380 	add.w	r3, r4, #128	; 0x80
 800946c:	f892 20c1 	ldrb.w	r2, [r2, #193]	; 0xc1
 8009470:	4628      	mov	r0, r5
 8009472:	e9cd 1300 	strd	r1, r3, [sp]
 8009476:	f7ff fae5 	bl	8008a44 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 800947a:	4620      	mov	r0, r4
 800947c:	f7ff fd02 	bl	8008e84 <R3_2_SwitchOffPWM>
    pHandle->PolarizationCounter = 0U;
 8009480:	2200      	movs	r2, #0
 8009482:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  pHandle->PolarizationSector=SECTOR_1;
 8009486:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  pHandle->_Super.Sector = SECTOR_1;   
 800948a:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 800948e:	4a26      	ldr	r2, [pc, #152]	; (8009528 <R3_2_CurrentReadingPolarization+0x164>)
 8009490:	6022      	str	r2, [r4, #0]
    R3_2_SwitchOnPWM(&pHandle->_Super);
 8009492:	4620      	mov	r0, r4
 8009494:	f7ff fcaa 	bl	8008dec <R3_2_SwitchOnPWM>
    waitForPolarizationEnd(TIMx,
 8009498:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800949c:	9b01      	ldr	r3, [sp, #4]
 800949e:	f892 20c1 	ldrb.w	r2, [r2, #193]	; 0xc1
 80094a2:	9900      	ldr	r1, [sp, #0]
 80094a4:	4628      	mov	r0, r5
 80094a6:	f7ff facd 	bl	8008a44 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 80094aa:	4620      	mov	r0, r4
 80094ac:	f7ff fcea 	bl	8008e84 <R3_2_SwitchOffPWM>
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80094b0:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	; 0x70
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 80094b4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 80094b6:	0909      	lsrs	r1, r1, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80094b8:	0912      	lsrs	r2, r2, #4
 80094ba:	e9c4 121c 	strd	r1, r2, [r4, #112]	; 0x70
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 80094be:	091b      	lsrs	r3, r3, #4
 80094c0:	67a3      	str	r3, [r4, #120]	; 0x78
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 80094c2:	9902      	ldr	r1, [sp, #8]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 80094c4:	9a03      	ldr	r2, [sp, #12]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80094c6:	69ab      	ldr	r3, [r5, #24]
 80094c8:	6162      	str	r2, [r4, #20]
 80094ca:	f023 0308 	bic.w	r3, r3, #8
    pHandle->_Super.offsetCalibStatus = true;
 80094ce:	2001      	movs	r0, #1
 80094d0:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 80094d4:	6021      	str	r1, [r4, #0]
 80094d6:	61ab      	str	r3, [r5, #24]
 80094d8:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 80094da:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 80094de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094e2:	61aa      	str	r2, [r5, #24]
 80094e4:	69ea      	ldr	r2, [r5, #28]
 80094e6:	f022 0208 	bic.w	r2, r2, #8
 80094ea:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80094ec:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80094ee:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80094f0:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80094f2:	69ab      	ldr	r3, [r5, #24]
 80094f4:	f043 0308 	orr.w	r3, r3, #8
 80094f8:	61ab      	str	r3, [r5, #24]
 80094fa:	69ab      	ldr	r3, [r5, #24]
 80094fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009500:	61ab      	str	r3, [r5, #24]
 8009502:	69eb      	ldr	r3, [r5, #28]
 8009504:	f043 0308 	orr.w	r3, r3, #8
 8009508:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 800950a:	6a2b      	ldr	r3, [r5, #32]
 800950c:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8009510:	f043 0305 	orr.w	r3, r3, #5
 8009514:	622b      	str	r3, [r5, #32]
}
 8009516:	e76d      	b.n	80093f4 <R3_2_CurrentReadingPolarization+0x30>
 8009518:	7fffffc0 	.word	0x7fffffc0
 800951c:	08008cf9 	.word	0x08008cf9
 8009520:	08008cb9 	.word	0x08008cb9
 8009524:	02000070 	.word	0x02000070
 8009528:	08008d51 	.word	0x08008d51

0800952c <R3_2_SetADCSampPointSectX>:
  if (MC_NULL == pHdl)
 800952c:	2800      	cmp	r0, #0
 800952e:	d03a      	beq.n	80095a6 <R3_2_SetADCSampPointSectX+0x7a>
{
 8009530:	b530      	push	{r4, r5, lr}
    if ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) > pHandle->pParams_str->Tafter)
 8009532:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8009536:	f8b0 e07c 	ldrh.w	lr, [r0, #124]	; 0x7c
 800953a:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800953e:	ebae 0203 	sub.w	r2, lr, r3
 8009542:	f8b1 40b2 	ldrh.w	r4, [r1, #178]	; 0xb2
 8009546:	b292      	uxth	r2, r2
 8009548:	42a2      	cmp	r2, r4
 800954a:	d916      	bls.n	800957a <R3_2_SetADCSampPointSectX+0x4e>
      pHandle->_Super.Sector = SECTOR_5;
 800954c:	2204      	movs	r2, #4
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 800954e:	f10e 33ff 	add.w	r3, lr, #4294967295
      pHandle->_Super.Sector = SECTOR_5;
 8009552:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 8009556:	b29b      	uxth	r3, r3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009558:	688a      	ldr	r2, [r1, #8]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 800955a:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 800955c:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8009560:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009564:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009566:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009568:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800956a:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800956c:	6852      	ldr	r2, [r2, #4]
 800956e:	4b11      	ldr	r3, [pc, #68]	; (80095b4 <R3_2_SetADCSampPointSectX+0x88>)
 8009570:	421a      	tst	r2, r3
    returnValue = 0U;
 8009572:	bf14      	ite	ne
 8009574:	2001      	movne	r0, #1
 8009576:	2000      	moveq	r0, #0
}
 8009578:	bd30      	pop	{r4, r5, pc}
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 800957a:	f8b0 c048 	ldrh.w	ip, [r0, #72]	; 0x48
 800957e:	eba3 0c0c 	sub.w	ip, r3, ip
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 8009582:	fa1f fc8c 	uxth.w	ip, ip
 8009586:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 800958a:	d80d      	bhi.n	80095a8 <R3_2_SetADCSampPointSectX+0x7c>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 800958c:	4423      	add	r3, r4
 800958e:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 8009590:	459e      	cmp	lr, r3
 8009592:	d8e1      	bhi.n	8009558 <R3_2_SetADCSampPointSectX+0x2c>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 8009594:	43db      	mvns	r3, r3
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 8009596:	f44f 7280 	mov.w	r2, #256	; 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800959a:	eb03 034e 	add.w	r3, r3, lr, lsl #1
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 800959e:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	e7d8      	b.n	8009558 <R3_2_SetADCSampPointSectX+0x2c>
}
 80095a6:	4770      	bx	lr
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 80095a8:	f8b1 20b6 	ldrh.w	r2, [r1, #182]	; 0xb6
 80095ac:	1a9b      	subs	r3, r3, r2
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	e7d2      	b.n	8009558 <R3_2_SetADCSampPointSectX+0x2c>
 80095b2:	bf00      	nop
 80095b4:	02000070 	.word	0x02000070

080095b8 <R3_2_TIMx_UP_IRQHandler>:
  if (MC_NULL == pHandle)
 80095b8:	4602      	mov	r2, r0
 80095ba:	2800      	cmp	r0, #0
 80095bc:	d043      	beq.n	8009646 <R3_2_TIMx_UP_IRQHandler+0x8e>
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80095be:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
{
 80095c2:	b5f0      	push	{r4, r5, r6, r7, lr}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80095c4:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    if (OPAMPParams != NULL)
 80095c8:	2c00      	cmp	r4, #0
 80095ca:	d036      	beq.n	800963a <R3_2_TIMx_UP_IRQHandler+0x82>
      while (0x0u != pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR)
 80095cc:	f890 c06a 	ldrb.w	ip, [r0, #106]	; 0x6a
 80095d0:	eb01 038c 	add.w	r3, r1, ip, lsl #2
 80095d4:	46e6      	mov	lr, ip
 80095d6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80095d8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1fc      	bne.n	80095d8 <R3_2_TIMx_UP_IRQHandler+0x20>
      OpampConfig = OPAMPParams->OPAMPConfig1[pHandle->_Super.Sector];
 80095de:	eb04 038c 	add.w	r3, r4, ip, lsl #2
 80095e2:	6bde      	ldr	r6, [r3, #60]	; 0x3c
      if (OpampConfig != OPAMP_UNCHANGED)
 80095e4:	1c77      	adds	r7, r6, #1
 80095e6:	d005      	beq.n	80095f4 <R3_2_TIMx_UP_IRQHandler+0x3c>
        operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 80095e8:	68df      	ldr	r7, [r3, #12]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 80095ea:	683c      	ldr	r4, [r7, #0]
 80095ec:	f424 7486 	bic.w	r4, r4, #268	; 0x10c
 80095f0:	4334      	orrs	r4, r6
 80095f2:	603c      	str	r4, [r7, #0]
      OpampConfig = OPAMPParams->OPAMPConfig2[pHandle->_Super.Sector];
 80095f4:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      if (OpampConfig != OPAMP_UNCHANGED)
 80095f6:	1c66      	adds	r6, r4, #1
 80095f8:	d005      	beq.n	8009606 <R3_2_TIMx_UP_IRQHandler+0x4e>
        operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 80095fa:	6a5e      	ldr	r6, [r3, #36]	; 0x24
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 80095fc:	6833      	ldr	r3, [r6, #0]
 80095fe:	f423 7386 	bic.w	r3, r3, #268	; 0x10c
 8009602:	4323      	orrs	r3, r4
 8009604:	6033      	str	r3, [r6, #0]
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009606:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800960a:	f8b2 307e 	ldrh.w	r3, [r2, #126]	; 0x7e
 800960e:	6fcc      	ldr	r4, [r1, #124]	; 0x7c
 8009610:	431c      	orrs	r4, r3
 8009612:	64c4      	str	r4, [r0, #76]	; 0x4c
    pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009614:	6e48      	ldr	r0, [r1, #100]	; 0x64
 8009616:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
 800961a:	430b      	orrs	r3, r1
 800961c:	64c3      	str	r3, [r0, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800961e:	686b      	ldr	r3, [r5, #4]
 8009620:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8009628:	2180      	movs	r1, #128	; 0x80
 800962a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800962e:	606b      	str	r3, [r5, #4]
    tempPointer = &(pHandle->_Super.Motor);
 8009630:	f102 0068 	add.w	r0, r2, #104	; 0x68
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8009634:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
}
 8009638:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800963a:	f890 e06a 	ldrb.w	lr, [r0, #106]	; 0x6a
 800963e:	eb01 038e 	add.w	r3, r1, lr, lsl #2
 8009642:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009644:	e7df      	b.n	8009606 <R3_2_TIMx_UP_IRQHandler+0x4e>
}
 8009646:	4770      	bx	lr

08009648 <R3_2_BRK2_IRQHandler>:
  if (MC_NULL == pHandle)
 8009648:	b168      	cbz	r0, 8009666 <R3_2_BRK2_IRQHandler+0x1e>
    if (false == pHandle->BrakeActionLock)
 800964a:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800964e:	b92b      	cbnz	r3, 800965c <R3_2_BRK2_IRQHandler+0x14>
      if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 8009650:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8009654:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 8009658:	2a02      	cmp	r2, #2
 800965a:	d005      	beq.n	8009668 <R3_2_BRK2_IRQHandler+0x20>
    pHandle->OverCurrentFlag = true;
 800965c:	2301      	movs	r3, #1
 800965e:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
    tempPointer = &(pHandle->_Super.Motor);
 8009662:	3068      	adds	r0, #104	; 0x68
 8009664:	4770      	bx	lr
}
 8009666:	4770      	bx	lr
{
 8009668:	b430      	push	{r4, r5}
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800966a:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800966e:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8009672:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 8009674:	62a5      	str	r5, [r4, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8009676:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	; 0xae
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800967a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800967e:	628c      	str	r4, [r1, #40]	; 0x28
 8009680:	6293      	str	r3, [r2, #40]	; 0x28
    pHandle->OverCurrentFlag = true;
 8009682:	2301      	movs	r3, #1
 8009684:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
}
 8009688:	bc30      	pop	{r4, r5}
    tempPointer = &(pHandle->_Super.Motor);
 800968a:	3068      	adds	r0, #104	; 0x68
}
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop

08009690 <R3_2_BRK_IRQHandler>:
  if (MC_NULL == pHandle)
 8009690:	4603      	mov	r3, r0
 8009692:	b160      	cbz	r0, 80096ae <R3_2_BRK_IRQHandler+0x1e>
    pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009694:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8009698:	6891      	ldr	r1, [r2, #8]
 800969a:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    pHandle->OverVoltageFlag = true;
 800969c:	f240 1c01 	movw	ip, #257	; 0x101
    pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80096a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80096a4:	644a      	str	r2, [r1, #68]	; 0x44
    tempPointer = &(pHandle->_Super.Motor);
 80096a6:	3068      	adds	r0, #104	; 0x68
    pHandle->OverVoltageFlag = true;
 80096a8:	f8a3 c083 	strh.w	ip, [r3, #131]	; 0x83
    tempPointer = &(pHandle->_Super.Motor);
 80096ac:	4770      	bx	lr
}
 80096ae:	4770      	bx	lr

080096b0 <R3_2_IsOverCurrentOccurred>:
  if (true == pHandle->OverVoltageFlag)
 80096b0:	f890 3083 	ldrb.w	r3, [r0, #131]	; 0x83
 80096b4:	b16b      	cbz	r3, 80096d2 <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 80096b6:	2300      	movs	r3, #0
 80096b8:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
 80096bc:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 80096be:	2302      	movs	r3, #2
  if (true == pHandle->OverCurrentFlag)
 80096c0:	f890 2082 	ldrb.w	r2, [r0, #130]	; 0x82
 80096c4:	b11a      	cbz	r2, 80096ce <R3_2_IsOverCurrentOccurred+0x1e>
    pHandle->OverCurrentFlag = false;
 80096c6:	2300      	movs	r3, #0
 80096c8:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
    retVal |= MC_BREAK_IN;
 80096cc:	460b      	mov	r3, r1
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	4770      	bx	lr
 80096d2:	2140      	movs	r1, #64	; 0x40
 80096d4:	e7f4      	b.n	80096c0 <R3_2_IsOverCurrentOccurred+0x10>
 80096d6:	bf00      	nop

080096d8 <R3_2_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 80096d8:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
{
 80096dc:	b430      	push	{r4, r5}
  if (false == pHandle->_Super.RLDetectionMode)
 80096de:	2900      	cmp	r1, #0
 80096e0:	d13d      	bne.n	800975e <R3_2_RLDetectionModeEnable+0x86>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80096e2:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
 80096e6:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80096e8:	699a      	ldr	r2, [r3, #24]
 80096ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80096ee:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80096f2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80096f6:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80096f8:	6a1a      	ldr	r2, [r3, #32]
 80096fa:	f042 0201 	orr.w	r2, r2, #1
 80096fe:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009700:	6a1a      	ldr	r2, [r3, #32]
 8009702:	f022 0204 	bic.w	r2, r2, #4
 8009706:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009708:	6359      	str	r1, [r3, #52]	; 0x34
    if (LS_PWM_TIMER == pHandle->pParams_str->LowSideOutputs)
 800970a:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
 800970e:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8009710:	f103 0418 	add.w	r4, r3, #24
 8009714:	d030      	beq.n	8009778 <R3_2_RLDetectionModeEnable+0xa0>
    else if (ES_GPIO ==  pHandle->pParams_str->LowSideOutputs)
 8009716:	2a02      	cmp	r2, #2
 8009718:	d10f      	bne.n	800973a <R3_2_RLDetectionModeEnable+0x62>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800971a:	699a      	ldr	r2, [r3, #24]
 800971c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009720:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8009724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009728:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800972a:	6a1a      	ldr	r2, [r3, #32]
 800972c:	f042 0210 	orr.w	r2, r2, #16
 8009730:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009732:	6a1a      	ldr	r2, [r3, #32]
 8009734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009738:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800973a:	6862      	ldr	r2, [r4, #4]
 800973c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009740:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8009744:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8009748:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 800974a:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 800974c:	6f41      	ldr	r1, [r0, #116]	; 0x74
 800974e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009752:	621a      	str	r2, [r3, #32]
 8009754:	6a1a      	ldr	r2, [r3, #32]
 8009756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800975a:	621a      	str	r2, [r3, #32]
 800975c:	6701      	str	r1, [r0, #112]	; 0x70
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800975e:	4b0f      	ldr	r3, [pc, #60]	; (800979c <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8009760:	490f      	ldr	r1, [pc, #60]	; (80097a0 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009762:	4a10      	ldr	r2, [pc, #64]	; (80097a4 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8009764:	4c10      	ldr	r4, [pc, #64]	; (80097a8 <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8009766:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 8009768:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800976a:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800976c:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8009770:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 8009772:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
}
 8009776:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009778:	699a      	ldr	r2, [r3, #24]
 800977a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800977e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8009782:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009786:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009788:	6a1a      	ldr	r2, [r3, #32]
 800978a:	f022 0210 	bic.w	r2, r2, #16
 800978e:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8009790:	6a1a      	ldr	r2, [r3, #32]
 8009792:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009796:	621a      	str	r2, [r3, #32]
}
 8009798:	e7cf      	b.n	800973a <R3_2_RLDetectionModeEnable+0x62>
 800979a:	bf00      	nop
 800979c:	08008f65 	.word	0x08008f65
 80097a0:	08008fb1 	.word	0x08008fb1
 80097a4:	08008e85 	.word	0x08008e85
 80097a8:	08008f05 	.word	0x08008f05

080097ac <R3_2_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 80097ac:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d03c      	beq.n	800982e <R3_2_RLDetectionModeDisable+0x82>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80097b4:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80097b8:	688b      	ldr	r3, [r1, #8]
{
 80097ba:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80097bc:	699a      	ldr	r2, [r3, #24]
 80097be:	4c43      	ldr	r4, [pc, #268]	; (80098cc <R3_2_RLDetectionModeDisable+0x120>)
 80097c0:	4022      	ands	r2, r4
 80097c2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80097c6:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80097c8:	6a1a      	ldr	r2, [r3, #32]
 80097ca:	f042 0201 	orr.w	r2, r2, #1
 80097ce:	621a      	str	r2, [r3, #32]
    if (LS_PWM_TIMER == pHandle->pParams_str->LowSideOutputs)
 80097d0:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 80097d4:	2a01      	cmp	r2, #1
 80097d6:	d02b      	beq.n	8009830 <R3_2_RLDetectionModeDisable+0x84>
    else if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 80097d8:	2a02      	cmp	r2, #2
 80097da:	d050      	beq.n	800987e <R3_2_RLDetectionModeDisable+0xd2>
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 80097dc:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 80097e0:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80097e2:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80097e4:	6999      	ldr	r1, [r3, #24]
 80097e6:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80097ea:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 80097ee:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 80097f2:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80097f4:	6a19      	ldr	r1, [r3, #32]
 80097f6:	f041 0110 	orr.w	r1, r1, #16
 80097fa:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80097fc:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80097fe:	69d9      	ldr	r1, [r3, #28]
 8009800:	400c      	ands	r4, r1
 8009802:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8009806:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009808:	6a19      	ldr	r1, [r3, #32]
 800980a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800980e:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8009810:	492f      	ldr	r1, [pc, #188]	; (80098d0 <R3_2_RLDetectionModeDisable+0x124>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009812:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009814:	4a2f      	ldr	r2, [pc, #188]	; (80098d4 <R3_2_RLDetectionModeDisable+0x128>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8009816:	6001      	str	r1, [r0, #0]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8009818:	492f      	ldr	r1, [pc, #188]	; (80098d8 <R3_2_RLDetectionModeDisable+0x12c>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 800981a:	4c30      	ldr	r4, [pc, #192]	; (80098dc <R3_2_RLDetectionModeDisable+0x130>)
 800981c:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 800981e:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009820:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8009824:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8009828:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
}
 800982c:	4770      	bx	lr
 800982e:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8009830:	6a19      	ldr	r1, [r3, #32]
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 8009832:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 8009836:	f041 0104 	orr.w	r1, r1, #4
 800983a:	0852      	lsrs	r2, r2, #1
 800983c:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800983e:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009840:	6999      	ldr	r1, [r3, #24]
 8009842:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8009846:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 800984a:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 800984e:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009850:	6a19      	ldr	r1, [r3, #32]
 8009852:	f041 0110 	orr.w	r1, r1, #16
 8009856:	6219      	str	r1, [r3, #32]
 8009858:	6a19      	ldr	r1, [r3, #32]
 800985a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800985e:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009860:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009862:	69d9      	ldr	r1, [r3, #28]
 8009864:	400c      	ands	r4, r1
 8009866:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 800986a:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800986c:	6a19      	ldr	r1, [r3, #32]
 800986e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009872:	6219      	str	r1, [r3, #32]
 8009874:	6a19      	ldr	r1, [r3, #32]
 8009876:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800987a:	6219      	str	r1, [r3, #32]
}
 800987c:	e7c8      	b.n	8009810 <R3_2_RLDetectionModeDisable+0x64>
  CLEAR_BIT(TIMx->CCER, Channels);
 800987e:	6a19      	ldr	r1, [r3, #32]
 8009880:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 8009884:	f021 0104 	bic.w	r1, r1, #4
 8009888:	0852      	lsrs	r2, r2, #1
 800988a:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800988c:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800988e:	6999      	ldr	r1, [r3, #24]
 8009890:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8009894:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8009898:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 800989c:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800989e:	6a19      	ldr	r1, [r3, #32]
 80098a0:	f041 0110 	orr.w	r1, r1, #16
 80098a4:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80098a6:	6a19      	ldr	r1, [r3, #32]
 80098a8:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80098ac:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80098ae:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80098b0:	69d9      	ldr	r1, [r3, #28]
 80098b2:	400c      	ands	r4, r1
 80098b4:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 80098b8:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80098ba:	6a19      	ldr	r1, [r3, #32]
 80098bc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80098c0:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80098c2:	6a19      	ldr	r1, [r3, #32]
 80098c4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80098c8:	6219      	str	r1, [r3, #32]
}
 80098ca:	e7a1      	b.n	8009810 <R3_2_RLDetectionModeDisable+0x64>
 80098cc:	fffeff8c 	.word	0xfffeff8c
 80098d0:	08008b35 	.word	0x08008b35
 80098d4:	08008e85 	.word	0x08008e85
 80098d8:	08008ded 	.word	0x08008ded
 80098dc:	08008d9d 	.word	0x08008d9d

080098e0 <R3_2_RLDetectionModeSetDuty>:
  if (MC_NULL == pHdl)
 80098e0:	2800      	cmp	r0, #0
 80098e2:	d03d      	beq.n	8009960 <R3_2_RLDetectionModeSetDuty+0x80>
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80098e4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 80098e8:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
{
 80098ec:	b410      	push	{r4}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80098ee:	689c      	ldr	r4, [r3, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80098f0:	69e3      	ldr	r3, [r4, #28]
 80098f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 80098f6:	fb02 f101 	mul.w	r1, r2, r1
 80098fa:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
 80098fe:	0c09      	lsrs	r1, r1, #16
    pHandle->ADCRegularLocked = true;
 8009900:	f04f 0c01 	mov.w	ip, #1
 8009904:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
    pHandle->_Super.CntPhA = (uint16_t)val;
 8009908:	87c1      	strh	r1, [r0, #62]	; 0x3e
    pHandle->ADCRegularLocked = true;
 800990a:	f880 c08c 	strb.w	ip, [r0, #140]	; 0x8c
 800990e:	61e3      	str	r3, [r4, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 8009910:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 8009914:	1ad2      	subs	r2, r2, r3
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 8009916:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
  WRITE_REG(TIMx->CCR4, CompareValue);
 800991a:	6422      	str	r2, [r4, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 800991c:	63e3      	str	r3, [r4, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 800991e:	6361      	str	r1, [r4, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009920:	6863      	ldr	r3, [r4, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8009922:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
 8009926:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800992a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800992e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    pHdl->Sector = SECTOR_4;
 8009932:	2103      	movs	r1, #3
 8009934:	6063      	str	r3, [r4, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8009936:	4562      	cmp	r2, ip
    pHdl->Sector = SECTOR_4;
 8009938:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800993c:	6863      	ldr	r3, [r4, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800993e:	d008      	beq.n	8009952 <R3_2_RLDetectionModeSetDuty+0x72>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009940:	4a08      	ldr	r2, [pc, #32]	; (8009964 <R3_2_RLDetectionModeSetDuty+0x84>)
}
 8009942:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009946:	4213      	tst	r3, r2
      hAux = MC_DURATION;
 8009948:	bf14      	ite	ne
 800994a:	4662      	movne	r2, ip
 800994c:	2200      	moveq	r2, #0
}
 800994e:	4610      	mov	r0, r2
 8009950:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 8009952:	2300      	movs	r3, #0
 8009954:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
}
 8009958:	f85d 4b04 	ldr.w	r4, [sp], #4
 800995c:	4610      	mov	r0, r2
 800995e:	4770      	bx	lr
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	02000070 	.word	0x02000070

08009968 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8009968:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 800996c:	8c02      	ldrh	r2, [r0, #32]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800996e:	8b03      	ldrh	r3, [r0, #24]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8009970:	4494      	add	ip, r2
{
 8009972:	b410      	push	{r4}
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8009974:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8009978:	b14b      	cbz	r3, 800998e <RVBS_Clear+0x26>
    {
      pHandle->aBuffer[index] = aux;
 800997a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800997c:	2300      	movs	r3, #0
 800997e:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8009980:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 8009982:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8009986:	8b01      	ldrh	r1, [r0, #24]
 8009988:	b29a      	uxth	r2, r3
 800998a:	4291      	cmp	r1, r2
 800998c:	d8f7      	bhi.n	800997e <RVBS_Clear+0x16>
    }
    pHandle->_Super.LatestConv = aux;
 800998e:	2300      	movs	r3, #0
 8009990:	f36c 030f 	bfi	r3, ip, #0, #16
 8009994:	f36c 431f 	bfi	r3, ip, #16, #16
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8009998:	2200      	movs	r2, #0
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
}
 800999a:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.LatestConv = aux;
 800999e:	6043      	str	r3, [r0, #4]
    pHandle->index = 0U;
 80099a0:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
}
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop

080099a8 <RVBS_Init>:
{
 80099a8:	b510      	push	{r4, lr}
 80099aa:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 80099ac:	300c      	adds	r0, #12
 80099ae:	f7f9 fd59 	bl	8003464 <RCM_RegisterRegConv>
 80099b2:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    RVBS_Clear(pHandle);
 80099b6:	4620      	mov	r0, r4
 80099b8:	f7ff ffd6 	bl	8009968 <RVBS_Clear>
}
 80099bc:	bd10      	pop	{r4, pc}
 80099be:	bf00      	nop

080099c0 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 80099c0:	8b42      	ldrh	r2, [r0, #26]
 80099c2:	8b81      	ldrh	r1, [r0, #28]
 80099c4:	428a      	cmp	r2, r1
 80099c6:	d00e      	beq.n	80099e6 <RVBS_CheckFaultState+0x26>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 80099c8:	f8b0 c006 	ldrh.w	ip, [r0, #6]
 80099cc:	8c03      	ldrh	r3, [r0, #32]
 80099ce:	4563      	cmp	r3, ip
 80099d0:	d807      	bhi.n	80099e2 <RVBS_CheckFaultState+0x22>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 80099d2:	7f83      	ldrb	r3, [r0, #30]
 80099d4:	b983      	cbnz	r3, 80099f8 <RVBS_CheckFaultState+0x38>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 80099d6:	4561      	cmp	r1, ip
 80099d8:	d912      	bls.n	8009a00 <RVBS_CheckFaultState+0x40>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 80099da:	2201      	movs	r2, #1
 80099dc:	7782      	strb	r2, [r0, #30]
          fault = MC_NO_ERROR;
 80099de:	4618      	mov	r0, r3
 80099e0:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 80099e2:	2004      	movs	r0, #4
 80099e4:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 80099e6:	88c3      	ldrh	r3, [r0, #6]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d309      	bcc.n	8009a00 <RVBS_CheckFaultState+0x40>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 80099ec:	8c00      	ldrh	r0, [r0, #32]
        fault = MC_UNDER_VOLT;
 80099ee:	4298      	cmp	r0, r3
 80099f0:	bf8c      	ite	hi
 80099f2:	2004      	movhi	r0, #4
 80099f4:	2000      	movls	r0, #0
 80099f6:	4770      	bx	lr
          fault = MC_OVER_VOLT;
        }
      }
      else
      {
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 80099f8:	4562      	cmp	r2, ip
 80099fa:	d303      	bcc.n	8009a04 <RVBS_CheckFaultState+0x44>
        fault = MC_NO_ERROR;
 80099fc:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 80099fe:	4770      	bx	lr
        fault = MC_OVER_VOLT;
 8009a00:	2002      	movs	r0, #2
 8009a02:	4770      	bx	lr
          pHandle->OverVoltageHysteresisUpDir = false;
 8009a04:	2300      	movs	r3, #0
 8009a06:	7783      	strb	r3, [r0, #30]
          fault = MC_OVER_VOLT;
 8009a08:	2002      	movs	r0, #2
 8009a0a:	4770      	bx	lr

08009a0c <RVBS_CalcAvVbus>:
{
 8009a0c:	b538      	push	{r3, r4, r5, lr}
 8009a0e:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8009a10:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8009a14:	f7f9 fe0e 	bl	8003634 <RCM_ExecRegularConv>
    if (0xFFFFU == hAux)
 8009a18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a1c:	4298      	cmp	r0, r3
 8009a1e:	d024      	beq.n	8009a6a <RVBS_CalcAvVbus+0x5e>
      pHandle->aBuffer[pHandle->index] = hAux;
 8009a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a22:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
 8009a26:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8009a2a:	f8b4 e018 	ldrh.w	lr, [r4, #24]
 8009a2e:	f01e 02ff 	ands.w	r2, lr, #255	; 0xff
 8009a32:	d00d      	beq.n	8009a50 <RVBS_CalcAvVbus+0x44>
 8009a34:	3a01      	subs	r2, #1
 8009a36:	b2d2      	uxtb	r2, r2
 8009a38:	eb03 0c42 	add.w	ip, r3, r2, lsl #1
 8009a3c:	3b02      	subs	r3, #2
      wtemp = 0u;
 8009a3e:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 8009a40:	f833 1f02 	ldrh.w	r1, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8009a44:	459c      	cmp	ip, r3
        wtemp += pHandle->aBuffer[i];
 8009a46:	440a      	add	r2, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8009a48:	d1fa      	bne.n	8009a40 <RVBS_CalcAvVbus+0x34>
      wtemp /= pHandle->LowPassFilterBW;
 8009a4a:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8009a4e:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8009a50:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009a54:	4575      	cmp	r5, lr
        pHandle->index++;
 8009a56:	bf34      	ite	cc
 8009a58:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 8009a5a:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8009a5c:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8009a5e:	80a0      	strh	r0, [r4, #4]
        pHandle->index++;
 8009a60:	bf34      	ite	cc
 8009a62:	f884 5029 	strbcc.w	r5, [r4, #41]	; 0x29
        pHandle->index = 0U;
 8009a66:	f884 3029 	strbcs.w	r3, [r4, #41]	; 0x29
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f7ff ffa8 	bl	80099c0 <RVBS_CheckFaultState>
 8009a70:	8120      	strh	r0, [r4, #8]
}
 8009a72:	bd38      	pop	{r3, r4, r5, pc}

08009a74 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 8009a74:	2300      	movs	r3, #0
    pHandle->TargetFinal = 0;
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 8009a76:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 8009a78:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 8009a7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 8009a80:	6142      	str	r2, [r0, #20]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
}
 8009a82:	4770      	bx	lr

08009a84 <SPD_GetElAngle>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 8009a84:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop

08009a8c <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 8009a8c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop

08009a94 <SPD_GetInstElSpeedDpp>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
#endif
}
 8009a94:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop

08009a9c <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8009a9c:	f9b1 3000 	ldrsh.w	r3, [r1]
    else
    {
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
    }

    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8009aa0:	8a81      	ldrh	r1, [r0, #20]
{
 8009aa2:	b500      	push	{lr}
    if (*pMecSpeedUnit < 0)
 8009aa4:	2b00      	cmp	r3, #0
      hAux = -(*pMecSpeedUnit);
 8009aa6:	bfb8      	it	lt
 8009aa8:	425b      	neglt	r3, r3
    {
      SpeedError = true;
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8009aaa:	f8b0 e016 	ldrh.w	lr, [r0, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8009aae:	f890 c003 	ldrb.w	ip, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8009ab2:	7802      	ldrb	r2, [r0, #0]
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
 8009ab4:	b29b      	uxth	r3, r3
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8009ab6:	459e      	cmp	lr, r3
 8009ab8:	d819      	bhi.n	8009aee <SPD_IsMecSpeedReliable+0x52>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8009aba:	4299      	cmp	r1, r3
 8009abc:	bf2c      	ite	cs
 8009abe:	2300      	movcs	r3, #0
 8009ac0:	2301      	movcc	r3, #1
    {
      SpeedError = true;
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8009ac2:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8009ac6:	f8b0 e018 	ldrh.w	lr, [r0, #24]
    if (pHandle->hMecAccelUnitP < 0)
 8009aca:	2900      	cmp	r1, #0
      hAux = -(pHandle->hMecAccelUnitP);
 8009acc:	bfb8      	it	lt
 8009ace:	4249      	neglt	r1, r1
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
 8009ad0:	b289      	uxth	r1, r1
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8009ad2:	458e      	cmp	lr, r1
 8009ad4:	d300      	bcc.n	8009ad8 <SPD_IsMecSpeedReliable+0x3c>
    {
      SpeedError = true;
    }

    if (true == SpeedError)
 8009ad6:	b163      	cbz	r3, 8009af2 <SPD_IsMecSpeedReliable+0x56>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8009ad8:	4594      	cmp	ip, r2
 8009ada:	d901      	bls.n	8009ae0 <SPD_IsMecSpeedReliable+0x44>
      {
        bSpeedErrorNumber++;
 8009adc:	3201      	adds	r2, #1
 8009ade:	b2d2      	uxtb	r2, r2
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
    {
      SpeedSensorReliability = false;
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8009ae0:	7002      	strb	r2, [r0, #0]
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8009ae2:	ebb2 000c 	subs.w	r0, r2, ip
 8009ae6:	bf18      	it	ne
 8009ae8:	2001      	movne	r0, #1
 8009aea:	f85d fb04 	ldr.w	pc, [sp], #4
      SpeedError = true;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e7e7      	b.n	8009ac2 <SPD_IsMecSpeedReliable+0x26>
        bSpeedErrorNumber = 0u;
 8009af2:	4594      	cmp	ip, r2
 8009af4:	bf88      	it	hi
 8009af6:	2200      	movhi	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8009af8:	7002      	strb	r2, [r0, #0]
}
 8009afa:	ebb2 000c 	subs.w	r0, r2, ip
 8009afe:	bf18      	it	ne
 8009b00:	2001      	movne	r0, #1
 8009b02:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b06:	bf00      	nop

08009b08 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 8009b08:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8009b0c:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wAux *= INT16_MAX;
 8009b10:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8009b14:	fb93 f0f0 	sdiv	r0, r3, r0
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 8009b18:	b200      	sxth	r0, r0
 8009b1a:	4770      	bx	lr

08009b1c <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8009b1c:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
    pHandle->PISpeed = pPI;
 8009b20:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8009b22:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
    pHandle->SPD = SPD_Handle;
 8009b26:	6142      	str	r2, [r0, #20]
{
 8009b28:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 8009b2a:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 8009b2e:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 8009b30:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8009b32:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8009b36:	0409      	lsls	r1, r1, #16
 8009b38:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 8009b3c:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8009b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 8009b42:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8009b44:	6183      	str	r3, [r0, #24]
}
 8009b46:	4770      	bx	lr

08009b48 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8009b48:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8009b4a:	4770      	bx	lr

08009b4c <STC_GetSpeedSensor>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 8009b4c:	6940      	ldr	r0, [r0, #20]
 8009b4e:	4770      	bx	lr

08009b50 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8009b50:	7803      	ldrb	r3, [r0, #0]
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	d000      	beq.n	8009b58 <STC_Clear+0x8>
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8009b56:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8009b58:	6900      	ldr	r0, [r0, #16]
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	f7fe be92 	b.w	8008884 <PID_SetIntegralTerm>

08009b60 <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 8009b60:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop

08009b68 <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 8009b68:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop

08009b70 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8009b70:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8009b72:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8009b74:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8009b76:	4770      	bx	lr

08009b78 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8009b78:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8009b7a:	7803      	ldrb	r3, [r0, #0]
 8009b7c:	2b04      	cmp	r3, #4
{
 8009b7e:	4604      	mov	r4, r0
 8009b80:	460e      	mov	r6, r1
 8009b82:	4615      	mov	r5, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8009b84:	d01e      	beq.n	8009bc4 <STC_ExecRamp+0x4c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8009b86:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8009b88:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8009b8c:	4299      	cmp	r1, r3
 8009b8e:	dd01      	ble.n	8009b94 <STC_ExecRamp+0x1c>
        allowedRange = false;
 8009b90:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8009b92:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8009b94:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8009b98:	428b      	cmp	r3, r1
 8009b9a:	dcf9      	bgt.n	8009b90 <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8009b9c:	8c23      	ldrh	r3, [r4, #32]
 8009b9e:	4299      	cmp	r1, r3
 8009ba0:	da03      	bge.n	8009baa <STC_ExecRamp+0x32>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8009ba2:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8009ba6:	428b      	cmp	r3, r1
 8009ba8:	dbf2      	blt.n	8009b90 <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 8009baa:	b9ad      	cbnz	r5, 8009bd8 <STC_ExecRamp+0x60>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8009bac:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8009bae:	0436      	lsls	r6, r6, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 8009bb0:	2b03      	cmp	r3, #3
        pHandle->RampRemainingStep = 0U;
 8009bb2:	f04f 0300 	mov.w	r3, #0
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8009bb6:	bf0c      	ite	eq
 8009bb8:	6066      	streq	r6, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8009bba:	60a6      	strne	r6, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 8009bbc:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 8009bbe:	61a3      	str	r3, [r4, #24]
 8009bc0:	2001      	movs	r0, #1
}
 8009bc2:	bd70      	pop	{r4, r5, r6, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8009bc4:	f7ff ffd0 	bl	8009b68 <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8009bc8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8009bca:	429e      	cmp	r6, r3
 8009bcc:	dce0      	bgt.n	8009b90 <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8009bce:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8009bd2:	42b3      	cmp	r3, r6
 8009bd4:	dcdc      	bgt.n	8009b90 <STC_ExecRamp+0x18>
 8009bd6:	e7e8      	b.n	8009baa <STC_ExecRamp+0x32>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8009bd8:	8ba3      	ldrh	r3, [r4, #28]
        pHandle->TargetFinal = hTargetFinal;
 8009bda:	8066      	strh	r6, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8009bdc:	fb05 f303 	mul.w	r3, r5, r3
        wAux /= 1000U;
 8009be0:	4d06      	ldr	r5, [pc, #24]	; (8009bfc <STC_ExecRamp+0x84>)
 8009be2:	fba5 2303 	umull	r2, r3, r5, r3
 8009be6:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 8009be8:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8009bea:	1a30      	subs	r0, r6, r0
 8009bec:	0400      	lsls	r0, r0, #16
        pHandle->RampRemainingStep++;
 8009bee:	60e3      	str	r3, [r4, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8009bf0:	fb90 f0f3 	sdiv	r0, r0, r3
        pHandle->IncDecAmount = wAux1;
 8009bf4:	61a0      	str	r0, [r4, #24]
 8009bf6:	2001      	movs	r0, #1
}
 8009bf8:	bd70      	pop	{r4, r5, r6, pc}
 8009bfa:	bf00      	nop
 8009bfc:	10624dd3 	.word	0x10624dd3

08009c00 <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8009c00:	2300      	movs	r3, #0
 8009c02:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8009c04:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8009c06:	4770      	bx	lr

08009c08 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 8009c08:	b538      	push	{r3, r4, r5, lr}
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
    {
      wCurrentReference = pHandle->TorqueRef;
 8009c0a:	e9d0 5101 	ldrd	r5, r1, [r0, #4]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8009c0e:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 8009c10:	68c3      	ldr	r3, [r0, #12]
      wCurrentReference = pHandle->TorqueRef;
 8009c12:	2a04      	cmp	r2, #4
 8009c14:	bf08      	it	eq
 8009c16:	460d      	moveq	r5, r1
    if (pHandle->RampRemainingStep > 1U)
 8009c18:	2b01      	cmp	r3, #1
{
 8009c1a:	4604      	mov	r4, r0
    if (pHandle->RampRemainingStep > 1U)
 8009c1c:	d908      	bls.n	8009c30 <STC_CalcTorqueReference+0x28>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 8009c1e:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8009c20:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8009c22:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 8009c24:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing. */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 8009c26:	2a03      	cmp	r2, #3
 8009c28:	d00b      	beq.n	8009c42 <STC_CalcTorqueReference+0x3a>
      pHandle->SpeedRefUnitExt = wCurrentReference;
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
    }
    else
    {
      pHandle->TorqueRef = wCurrentReference;
 8009c2a:	60a5      	str	r5, [r4, #8]
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8009c2c:	1428      	asrs	r0, r5, #16
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8009c2e:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8009c30:	d1f9      	bne.n	8009c26 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8009c32:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8009c36:	2300      	movs	r3, #0
    if (MCM_SPEED_MODE == pHandle->Mode)
 8009c38:	2a03      	cmp	r2, #3
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8009c3a:	ea4f 4505 	mov.w	r5, r5, lsl #16
      pHandle->RampRemainingStep = 0U;
 8009c3e:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8009c40:	d1f3      	bne.n	8009c2a <STC_CalcTorqueReference+0x22>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8009c42:	6960      	ldr	r0, [r4, #20]
 8009c44:	f7ff ff22 	bl	8009a8c <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 8009c48:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8009c4c:	b209      	sxth	r1, r1
 8009c4e:	6920      	ldr	r0, [r4, #16]
 8009c50:	f7fe fe4a 	bl	80088e8 <PI_Controller>
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8009c54:	0403      	lsls	r3, r0, #16
 8009c56:	e9c4 5301 	strd	r5, r3, [r4, #4]
}
 8009c5a:	bd38      	pop	{r3, r4, r5, pc}

08009c5c <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 8009c5c:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8009c60:	2200      	movs	r2, #0
 8009c62:	b299      	uxth	r1, r3
 8009c64:	f361 020f 	bfi	r2, r1, #0, #16
 8009c68:	0c1b      	lsrs	r3, r3, #16
 8009c6a:	f363 421f 	bfi	r2, r3, #16, #16
{
 8009c6e:	b082      	sub	sp, #8
}
 8009c70:	4610      	mov	r0, r2
 8009c72:	b002      	add	sp, #8
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop

08009c78 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8009c78:	b510      	push	{r4, lr}
 8009c7a:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8009c7c:	6940      	ldr	r0, [r0, #20]
 8009c7e:	f7ff ff05 	bl	8009a8c <SPD_GetAvrgMecSpeedUnit>
 8009c82:	0400      	lsls	r0, r0, #16
 8009c84:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8009c86:	bd10      	pop	{r4, pc}

08009c88 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8009c88:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8009c8a:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8009c8c:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 8009c8e:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 8009c92:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 8009c94:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 8009c96:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 8009c98:	8503      	strh	r3, [r0, #40]	; 0x28
    pHandle->bTransitionStarted = false;
 8009c9a:	8583      	strh	r3, [r0, #44]	; 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8009c9c:	85c2      	strh	r2, [r0, #46]	; 0x2e
    pHandle->hElAngleAccu = 0;
 8009c9e:	6303      	str	r3, [r0, #48]	; 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop

08009ca4 <VSS_Init>:
{
 8009ca4:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 8009ca6:	f7ff ffef 	bl	8009c88 <VSS_Clear>
}
 8009caa:	bd08      	pop	{r3, pc}

08009cac <VSS_SetMecAngle>:
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8009cac:	7843      	ldrb	r3, [r0, #1]
    pHandle->hElAngleAccu = hMecAngle;
 8009cae:	8601      	strh	r1, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8009cb0:	fb91 f3f3 	sdiv	r3, r1, r3
    pHandle->_Super.hElAngle = hMecAngle;
 8009cb4:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8009cb6:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop

08009cbc <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 8009cbc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8009cc0:	b99b      	cbnz	r3, 8009cea <VSS_SetMecAcceleration+0x2e>
{
 8009cc2:	b510      	push	{r4, lr}
    {
      if (0U == hDurationms)
 8009cc4:	b992      	cbnz	r2, 8009cec <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8009cc6:	8b43      	ldrh	r3, [r0, #26]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8009cc8:	69c4      	ldr	r4, [r0, #28]
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8009cca:	8181      	strh	r1, [r0, #12]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8009ccc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8009cd0:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8009cd4:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 8009cd6:	fb9c f3f3 	sdiv	r3, ip, r3

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8009cda:	f890 c001 	ldrb.w	ip, [r0, #1]

        pHandle->hRemainingStep = 0U;
 8009cde:	8502      	strh	r2, [r0, #40]	; 0x28
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8009ce0:	fb1c f303 	smulbb	r3, ip, r3
 8009ce4:	81c3      	strh	r3, [r0, #14]

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8009ce6:	8541      	strh	r1, [r0, #42]	; 0x2a
      }
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 8009ce8:	bd10      	pop	{r4, pc}
 8009cea:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8009cec:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8009cee:	4c16      	ldr	r4, [pc, #88]	; (8009d48 <VSS_SetMecAcceleration+0x8c>)
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8009cf0:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8009cf4:	fb03 f202 	mul.w	r2, r3, r2
 8009cf8:	fba4 2302 	umull	r2, r3, r4, r2
 8009cfc:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 8009d00:	3301      	adds	r3, #1
 8009d02:	b29b      	uxth	r3, r3
        pHandle->hRemainingStep = hNbrStep;
 8009d04:	8503      	strh	r3, [r0, #40]	; 0x28
        if (0U == hNbrStep)
 8009d06:	b923      	cbnz	r3, 8009d12 <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8009d08:	ea4f 430c 	mov.w	r3, ip, lsl #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8009d0c:	8541      	strh	r1, [r0, #42]	; 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8009d0e:	6243      	str	r3, [r0, #36]	; 0x24
}
 8009d10:	bd10      	pop	{r4, pc}
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8009d12:	8b42      	ldrh	r2, [r0, #26]
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8009d14:	7844      	ldrb	r4, [r0, #1]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8009d16:	8541      	strh	r1, [r0, #42]	; 0x2a
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8009d18:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009d1c:	ea4f 0e42 	mov.w	lr, r2, lsl #1
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8009d20:	69c2      	ldr	r2, [r0, #28]
 8009d22:	fb01 f202 	mul.w	r2, r1, r2
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8009d26:	fb92 f2fe 	sdiv	r2, r2, lr
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8009d2a:	fb9c fef4 	sdiv	lr, ip, r4
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8009d2e:	eba2 020e 	sub.w	r2, r2, lr
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 8009d32:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8009d34:	fb92 f3f3 	sdiv	r3, r2, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 8009d38:	fb04 f303 	mul.w	r3, r4, r3
 8009d3c:	6203      	str	r3, [r0, #32]
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8009d3e:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8009d42:	6243      	str	r3, [r0, #36]	; 0x24
 8009d44:	e7e4      	b.n	8009d10 <VSS_SetMecAcceleration+0x54>
 8009d46:	bf00      	nop
 8009d48:	10624dd3 	.word	0x10624dd3

08009d4c <__libc_init_array>:
 8009d4c:	b570      	push	{r4, r5, r6, lr}
 8009d4e:	4d0d      	ldr	r5, [pc, #52]	; (8009d84 <__libc_init_array+0x38>)
 8009d50:	4c0d      	ldr	r4, [pc, #52]	; (8009d88 <__libc_init_array+0x3c>)
 8009d52:	1b64      	subs	r4, r4, r5
 8009d54:	10a4      	asrs	r4, r4, #2
 8009d56:	2600      	movs	r6, #0
 8009d58:	42a6      	cmp	r6, r4
 8009d5a:	d109      	bne.n	8009d70 <__libc_init_array+0x24>
 8009d5c:	4d0b      	ldr	r5, [pc, #44]	; (8009d8c <__libc_init_array+0x40>)
 8009d5e:	4c0c      	ldr	r4, [pc, #48]	; (8009d90 <__libc_init_array+0x44>)
 8009d60:	f000 f82e 	bl	8009dc0 <_init>
 8009d64:	1b64      	subs	r4, r4, r5
 8009d66:	10a4      	asrs	r4, r4, #2
 8009d68:	2600      	movs	r6, #0
 8009d6a:	42a6      	cmp	r6, r4
 8009d6c:	d105      	bne.n	8009d7a <__libc_init_array+0x2e>
 8009d6e:	bd70      	pop	{r4, r5, r6, pc}
 8009d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d74:	4798      	blx	r3
 8009d76:	3601      	adds	r6, #1
 8009d78:	e7ee      	b.n	8009d58 <__libc_init_array+0xc>
 8009d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d7e:	4798      	blx	r3
 8009d80:	3601      	adds	r6, #1
 8009d82:	e7f2      	b.n	8009d6a <__libc_init_array+0x1e>
 8009d84:	0800a244 	.word	0x0800a244
 8009d88:	0800a244 	.word	0x0800a244
 8009d8c:	0800a244 	.word	0x0800a244
 8009d90:	0800a248 	.word	0x0800a248

08009d94 <memcpy>:
 8009d94:	440a      	add	r2, r1
 8009d96:	4291      	cmp	r1, r2
 8009d98:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d9c:	d100      	bne.n	8009da0 <memcpy+0xc>
 8009d9e:	4770      	bx	lr
 8009da0:	b510      	push	{r4, lr}
 8009da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009da6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009daa:	4291      	cmp	r1, r2
 8009dac:	d1f9      	bne.n	8009da2 <memcpy+0xe>
 8009dae:	bd10      	pop	{r4, pc}

08009db0 <memset>:
 8009db0:	4402      	add	r2, r0
 8009db2:	4603      	mov	r3, r0
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d100      	bne.n	8009dba <memset+0xa>
 8009db8:	4770      	bx	lr
 8009dba:	f803 1b01 	strb.w	r1, [r3], #1
 8009dbe:	e7f9      	b.n	8009db4 <memset+0x4>

08009dc0 <_init>:
 8009dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc2:	bf00      	nop
 8009dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dc6:	bc08      	pop	{r3}
 8009dc8:	469e      	mov	lr, r3
 8009dca:	4770      	bx	lr

08009dcc <_fini>:
 8009dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dce:	bf00      	nop
 8009dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dd2:	bc08      	pop	{r3}
 8009dd4:	469e      	mov	lr, r3
 8009dd6:	4770      	bx	lr
